/*
@license
Webix SpreadSheet v.10.3.2
This software is covered by Webix Commercial License.
Usage without proper license is prohibited.
(c) XB Software Ltd.
*/
(function (factory) {
	typeof define === 'function' && define.amd ? define(factory) :
	factory();
})((function () { 'use strict';

	const e="#DIV/0!",t="#VALUE!",r="#NUM!",n="#N/A";function o(e){const t=new Date(e.getFullYear(),0,0),r=e.valueOf()-t.valueOf()+60*(t.getTimezoneOffset()-e.getTimezoneOffset())*1e3;return Math.floor(r/864e5)}function i(e){const t=new Date(Math.round(86400*(e-25569)*1e3));return new Date(t.getTime()+6e4*t.getTimezoneOffset())}function u(e){return 25569+(e.getTime()-6e4*e.getTimezoneOffset())/864e5}function a(e){return !(!e&&0!==e||(e*=1,isNaN(e)))&&e}function s(e){if(1===e.length){const t=e[0];return "object"==typeof t?t:[t]}let t=[];for(let r=0;r<e.length;r++)t=t.concat(e[r]);return t}function c(e){return !e&&0!==e}function h(e){return "string"==typeof e?"TRUE"===e:!!e}function l(e){const t="string"==typeof e?new Date(e):i(e);if(t.getTime())return t;throw `${e} is invalid date`}function f(e){const t=a(e);if("number"!=typeof t)throw `${e} is not a number`;return t}function d(e,n,o,i,u){let s=a(e);s<0&&8==u&&(n=null);let c,h=n?a(n):null;if("number"!=typeof s||"boolean"==typeof h)throw t;if(s<o&&(s=o),s>i&&(s=i),h<-1)throw r;h&&(h=Math.floor(+h));const l=e<0&&16===u?"FF":"";if(c=i<2147483648?(s>>>0&i-o).toString(u):(s>>>0).toString(u),h&&c.length>h)throw r;return (l+c).padStart(h,"0").toUpperCase()}function m(...e){return s(e).join("")}function p(e,t){return c(e)?"":e.toString().substring(0,t)}function g(e,t,r){return c(e)?"":e.toString().substring(t,t+r)}function b(e,t){return c(e)?"":e.toString().substring(e.length-t)}function R(e){return c(e)?"":e.toString().toLowerCase()}function T(e){return c(e)?"":e.toString().toUpperCase()}function _(e){if(c(e))return "";const t=e.toString().toLowerCase().split(" ");e="";for(const r in t)e+=(e?" ":"")+t[r].substring(0,1).toUpperCase()+t[r].substring(1);return e}function y(e){return c(e)?"":e.toString().trim()}function N(e){return c(e)?0:e.toString().length}const M=/[\0-\x1F]/g;function q(e,t,r=0){const n=a(r);if("number"==typeof n&&t)return `${t}`.indexOf(`${e}`,n-1)+1;throw "index cannot be string"}function w(e,t,r=0){const n=a(r);if("number"==typeof n){const r=`${t}`.toLowerCase().indexOf(`${e}`.toLowerCase(),n-1)+1;if(0!==r)return r;throw "not found"}}function E(e,t,r,n){if(!e||!t||!r&&""!==r)return `${e}`;if(void 0===n)return `${e}`.replace(new RegExp(`${t}`,"g"),`${r}`);{let o=0,i=0;for(;`${e}`.indexOf(`${t}`,o)>0;)if(o=`${e}`.indexOf(`${t}`,o+1),i++,i===n)return `${e}`.substring(0,o)+r+`${e}`.substring(o+`${t}`.length)}}function A(e,t,r,n){const o=a(t),i=a(r);if("number"==typeof o&&"number"==typeof i){const t=e.toString(),r=n.toString();return t.replace(t.substr(o-1,i),r)}}var O=Object.freeze({__proto__:null,CONCATENATE:m,LEFT:p,MID:g,RIGHT:b,LOWER:R,UPPER:T,PROPER:_,TRIM:y,LEN:N,CHAR:function(e){const t=a(e);if("number"==typeof t)return String.fromCharCode(t)},CLEAN:function(e=""){return `${e}`.replace(M,"")},CODE:function(e=""){return `${e}`.charCodeAt(0)},EXACT:function(e,t){return e===t},FIND:q,FIXED:function(e,t=2,r=!1){const n=a(e),o=a(t);if("number"==typeof n&&"number"==typeof o){const e=n.toFixed(o);if(h(r))return `${e}`;const[t,i]=`${e}`.split(".");return t.replace(/\B(?=(\d{3})+(?!\d))/g,",")+"."+i}},NUMBERVALUE:function(e,t=".",r=","){if("string"==typeof e&&"string"==typeof t&&"string"==typeof r)return Number(e.replace(t,".").replace(r,""))},REGEXEXTRACT:function(e,t){if("string"==typeof e&&"string"==typeof t){const r=e.match(new RegExp(t));return r?r[r.length>1?r.length-1:0]:null}},REGEXMATCH:function(e,t){if("string"==typeof e&&"string"==typeof t){return !!e.match(new RegExp(t))}},REGEXREPLACE:function(e,t,r){if("string"==typeof e&&"string"==typeof t)return e.replace(new RegExp(t),`${r}`)},REPT:function(e,t){const r=a(t);if("number"==typeof r)return new Array(r+1).join(`${e}`)},SEARCH:w,SUBSTITUTE:E,T:function(e){return "string"==typeof e&&"TRUE"!==e&&"FALSE"!==e?`${e}`:""},JOIN:function(e,...t){const r=[];return t.forEach((t=>{"object"==typeof t?r.push(t.join(`${e}`)):r.push(t);})),r.join(`${e}`)},REPLACE:A,ARRAYTOTEXT:function(e,t){return t?`{${e.map((e=>"string"==typeof e?`"${e}"`:e)).join("; ")}}`:e.join("; ")}});const v=[[],[1,2,3,4,5,6,7],[7,1,2,3,4,5,6],[6,0,1,2,3,4,5],[],[],[],[],[],[],[],[7,1,2,3,4,5,6],[6,7,1,2,3,4,5],[5,6,7,1,2,3,4],[4,5,6,7,1,2,3],[3,4,5,6,7,1,2],[2,3,4,5,6,7,1],[1,2,3,4,5,6,7]],I=[void 0,0,1,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,1,2,3,4,5,6,0],S=[[],[6,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],void 0,void 0,void 0,[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]];function C(e,t,r){return u(new Date(e,t-1,r))}function D(e,t,r){const n=u(new Date(1900,0,1,e,t,r,0));return n-Math.trunc(n)}function x(e){return i(e).getDate()}function L(e){return i(e).getMonth()+1}function P(e){return i(e).getFullYear()}function F(e){return i(e).getHours()}function U(e){return i(e).getMinutes()}function V(e){return i(e).getSeconds()}function k(){return u(new Date)}function $(e,t,r){const n=r.toLowerCase();if("d"===n)return t-e;const u=i(e),a=i(t);switch(n){case"y":return a.getFullYear()-u.getFullYear();case"m":return 12*(a.getFullYear()-u.getFullYear())+a.getMonth()-u.getMonth();case"d":return Math.floor(t-e);case"md":{const e=a.getDate()-u.getDate();if(e<0){const e=new Date(u.getFullYear(),u.getMonth()+1,0).getDate();return a.getDate()+e-u.getDate()}return e}case"ym":{const e=a.getMonth()-u.getMonth();return e<0?12+e:e}case"yd":{const e=o(a)-o(u);return e<0?365+e:e}}}function B(e,t){const r=l(e),n=l(t);if(r&&n)return Math.round((r.getTime()-n.getTime())/864e5)}function H(e){const t=l(e);if(t){t.setHours(0,0,0),t.setDate(t.getDate()+4-(t.getDay()||7));const e=new Date(t.getFullYear(),0,1);return Math.ceil(((t.getTime()-e.getTime())/864e5+1)/7)}}function X(e,t,r,n){const o=l(e),u=l(t);if(o&&u){const e=void 0===r?S[1]:S[r],t=n||[];for(let e=0;e<t.length;e++){const r=i(t[e]);if(r instanceof Error)throw `The ${t[e]} is not a  number`;t[e]=r;}const a=(u.getTime()-o.getTime())/864e5+1;let s=Math.round(a);const c=o;for(let r=0;r<a;r++){const r=(new Date).getTimezoneOffset()>0?c.getUTCDay():c.getDay();let n=!1;r!==e[0]&&r!==e[1]||(n=!0);for(let e=0;e<t.length;e++){const r=t[e];if(r.getDate()===c.getDate()&&r.getMonth()===c.getMonth()&&r.getFullYear()===c.getFullYear()){n=!0;break}}n&&s--,c.setDate(c.getDate()+1);}return s}}function j(e,t,r,n){const o=l(e),s=a(t);if(o&&"number"==typeof s){const e=void 0===r?S[1]:S[r],t=n||[];for(let e=0;e<t.length;e++){const r=i(t[e]);if(r instanceof Error)throw `The ${t[e]} is not a  number`;t[e]=r;}let a=0;for(;a<s;){o.setDate(o.getDate()+1);const r=o.getDay();if(r!==e[0]&&r!==e[1]){for(let e=0;e<t.length;e++){const r=t[e];if(r.getDate()===o.getDate()&&r.getMonth()===o.getMonth()&&r.getFullYear()===o.getFullYear()){a--;break}}a++;}}return u(o)}}function Y(e){return 1===new Date(e,1,29).getMonth()}function G(e,t,r=0){const n=l(e),o=l(t);if(n&&o){let e=n.getDate();const t=n.getMonth()+1,i=n.getFullYear();let u=o.getDate();const a=o.getMonth()+1,s=o.getFullYear();let c=365;const h=s-i+1,l=(new Date(s+1,0,1).getTime()-new Date(i,0,1).getTime())/1e3/60/60/24/h;switch(r){case 0:return 31===e&&31===u?(e=30,u=30):31===e?e=30:30===e&&31===u&&(u=30),(u+30*a+360*s-(e+30*t+360*i))/360;case 1:return i===s||i+1===s&&(t>a||t===a&&e>=u)?((i===s&&Y(i)||function(e,t){const r=e.getFullYear(),n=new Date(r,2,1);if(Y(r)&&e<n&&t>=n)return !0;const o=t.getFullYear(),i=new Date(o,2,1);return Y(o)&&t>=i&&e<i}(n,o)||1===a&&29===u)&&(c=366),B(o.toDateString(),n.toDateString())/c):B(o.toDateString(),n.toDateString())/l;case 2:return B(o.toDateString(),n.toDateString())/360;case 3:return B(o.toDateString(),n.toDateString())/365;case 4:return (u+30*a+360*s-(e+30*t+360*i))/360}}}const z={DATE:C,TIME:D,DAY:x,MONTH:L,YEAR:P,HOUR:F,MINUTE:U,SECOND:V,NOW:k,DATEDIF:$,DATEVALUE:function(e){if("string"==typeof e){return u(new Date(new Date(e).toDateString()))}},DAYS:B,DAYS360:function(e,t,r=0){const n=l(e),o=l(t);if(n&&o){const e=n.getMonth();let t,i,u=o.getMonth();if(h(r))t=31===n.getDate()?30:n.getDate(),i=31===o.getDate()?30:o.getDate();else {const r=new Date(n.getFullYear(),e+1,0).getDate(),a=new Date(o.getFullYear(),u+1,0).getDate();t=n.getDate()===r?30:n.getDate(),o.getDate()===a?t<30?(u++,i=1):i=30:i=o.getDate();}return 360*(o.getFullYear()-n.getFullYear())+30*(u-e)+(i-t)}},EDATE:function(e,t){const r=l(e),n=a(t);if(r&&"number"==typeof n)return r.setMonth(r.getMonth()+n),u(r)},EOMONTH:function(e,t){const r=l(e),n=a(t);if(r&&"number"==typeof n)return u(new Date(r.getFullYear(),r.getMonth()+n+1,0))},ISOWEEKNUM:H,NETWORKDAYS:function(e,t,r){return X(e,t,1,r)},"NETWORKDAYS.INTL":X,TIMEVALUE:function(e){if("string"==typeof e){const t=e.split(" "),r=t[1],n=t[0].split(":"),o=new Date;return o.setHours(+n[0]),r&&"PM"===r.toUpperCase()&&o.setHours(o.getHours()+12),o.setMinutes(+n[1]),n[2]&&o.setSeconds(+n[2]),(3600*o.getHours()+60*o.getMinutes()+o.getSeconds())/86400}},WEEKNUM:function(e,t=1){const r=l(e);if(21===t)return H(t);const n=I[t],o=new Date(r.getFullYear(),0,1),i=o.getDay()<n?1:0,u=o.getTime()-24*Math.abs(o.getDay()-n)*60*60*1e3;return Math.floor((r.getTime()-u)/864e5/7+1)+i},WEEKDAY:function(e,t=1){const r=l(e).getDay();return v[t][r]},WORKDAY:function(e,t,r){return j(e,t,1,r)},"WORKDAY.INTL":j,YEARFRAC:G};function W(e,t,r,n=0,o=0){const i=f(e),u=f(t),a=f(r),s=f(n);let c;if(0===i)c=(a+s)/u;else {const e=Math.pow(1+i,u);c=i*(a*e+s)/(e-1),1===o&&(c/=1+i);}return -c}function K(e,t,r,n=0,o=0){const i=f(e),u=f(t),a=f(r),s=f(n);let c;if(0!==i){const e=Math.pow(1+i,u);return c=s*e+a*(e-1)/i,1===o&&(c=s*e+a*(1+i)*(e-1)/i),-c}c=s+a*u;}function Q(e,t,r,n,o=0,i=0){const u=f(e),a=f(r),s=f(t),c=f(n),h=W(u,a,c,f(o),i);let l;return l=1===s?1===i?0:-c:1===i?K(u,s-2,h,c,1)-h:K(u,s-1,h,c,0),l*u}var J=Object.freeze({__proto__:null,ACCRINT:function(e,t,r,n,o=0,i,u=0){const a=l(e),s=l(r),c=f(n),h=f(o),d=f(i),m=f(u);if(1!==d)throw "This function is only supported with frequency 1";if(-1===[0,1,2,3,4].indexOf(m))throw `Basis is ${u}. It's should be 0, 1, 2, 3 or 4`;if(s<=a)throw "Settlement canot be before or equal to issue";return h*c*G(e,r,m)},PMT:W,FV:K,DB:function(e,t,r,n,o=12){const i=f(e),u=f(t),a=f(r),s=f(n),c=f(o);if(i<0||u<0||a<0||s<0)throw "Parameters cannot be negative";if(-1===[1,2,3,4,5,6,7,8,9,10,11,12].indexOf(c))throw `Month is ${o}. It's should be beetwen 1 and 12`;if(s>a)throw "Period cannot be greater than life";if(u>=i)return 0;const h=+(1-Math.pow(u/i,1/a)).toFixed(3),l=i*h*c/12;let d=l,m=0;const p=n===a?a-1:n;for(let e=2;e<=+p;e++)m=(i-d)*h,d+=m;return 1===n?l:n===a?(i-d)*h:m},DDB:function(e,t,r,n,o=2){const i=f(e),u=f(t),a=f(r),s=f(n),c=f(o);if(i<0||u<0||a<0||s<0||c<0)throw "Parameters cannot be negative";if(s>a)throw "Period cannot be greater than life";if(u>=i)return 0;let h=0,l=0;for(let e=1;e<=+n;e++)l=Math.min(c/a*(i-h),i-u-h),h+=l;return l},DOLLAR:function(e,t=2){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n){if(n>=0)return `$${r.toFixed(n)}`;const e=Math.pow(10,-n);return "$"+Math.trunc(r/e)*e}},DOLLARDE:function(e,t){const r=f(e);let n=f(t);if(n<0)throw "Fraction cannot be negative";if(n>=0&&n<1)throw "Fraction cannot be zero";n=parseInt(`${n}`,10);let o=parseInt(`${e}`,10);o+=r%1*Math.pow(10,Math.ceil(Math.log(n)/Math.LN10))/n;const i=Math.pow(10,Math.ceil(Math.log(n)/Math.LN2)+1);return o=Math.round(o*i)/i,o},DOLLARFR:function(e,t){const r=f(e);let n=f(t);if(n<0)throw "Fraction cannot be negative";if(n>=0&&n<1)throw "Fraction cannot be zero";n=parseInt(`${n}`,10);let o=parseInt(`${e}`,10);return o+=r%1*Math.pow(10,-Math.ceil(Math.log(n)/Math.LN10))*n,o},EFFECT:function(e,t){const r=f(e);let n=f(t);if(r<=0)throw "Rate cannot be less than or equal to zero";if(n<1)throw "Periods cannot be less than 1";return n=parseInt(`${n}`,10),Math.pow(1+r/n,n)-1},FVSCHEDULE:function(e,t){const r=f(e),n=t.map((e=>f(e))),o=n.length;let i=r;for(let e=0;e<o;e++)i*=1+n[e];return i},IRR:function(e,t=0){const r=s(e).map((e=>f(e)));let n=f(t);const o=function(e,t,r){const n=r+1;let o=e[0];for(let r=1;r<e.length;r++)o+=e[r]/Math.pow(n,(t[r]-t[0])/365);return o},i=function(e,t,r){const n=r+1;let o=0;for(let r=1;r<e.length;r++){const i=(t[r]-t[0])/365;o-=i*e[r]/Math.pow(n,i+1);}return o},u=[];let a=!1,c=!1;for(let e=0;e<r.length;e++)u[e]=0===e?0:u[e-1]+365,r[e]>0&&(a=!0),r[e]<0&&(c=!0);if(!a||!c)throw "Values should contain at least one positive value and one negative value";n=void 0===t?.1:n;let h,l,d,m=n,p=!0;do{d=o(r,u,m),h=m-d/i(r,u,m),l=Math.abs(h-m),m=h,p=l>1e-10&&Math.abs(d)>1e-10;}while(p);return m},IPMT:Q,ISPMT:function(e,t,r,n){const o=f(e),i=f(t),u=f(r);return f(n)*o*(i/u-1)},NPV:function(...e){const t=s(e).map((e=>f(e))),r=f(t[0]);let n=0;for(let e=1;e<t.length;e++)n+=t[e]/Math.pow(1+r,e);return n},NOMINAL:function(e,t){const r=f(e);let n=f(t);if(r<=0)throw "Rate cannot be less then or equal to zero";if(n<1)throw "Periods cannot be less then 1";return n=parseInt(`${n}`,10),(Math.pow(r+1,1/n)-1)*n},NPER:function(e,t,r,n=0,o=0){const i=f(e),u=f(t),a=f(r),s=f(n),c=f(o),h=u*(1+i*c)-s*i,l=a*i+u*(1+i*c);return Math.log(h/l)/Math.log(1+i)},PDURATION:function(e,t,r){const n=f(e),o=f(t),i=f(r);if(n<=0)throw "Rate cannot be less then or equal to zero";return (Math.log(i)-Math.log(o))/Math.log(1+n)},PPMT:function(e,t,r,n,o=0,i=0){const u=f(e),a=f(t),s=f(r),c=f(n),h=f(o),l=f(i);return W(u,s,c,h,l)-Q(u,a,s,c,h,l)},PV:function(e,t,r,n=0,o=0){const i=f(e),u=f(t),a=f(r),s=f(n),c=f(o);return 0===i?-a*u-s:((1-Math.pow(1+i,u))/i*a*(1+i*c)-s)/Math.pow(1+i,u)},SYD:function(e,t,r,n){const o=f(e),i=f(t),u=f(r);return (o-i)*(u-f(n)+1)*2/(u*(u+1))},TBILLPRICE:function(e,t,r){const n=l(e),o=l(t),i=f(r);if("number"==typeof i&&o>n){return 100*(1-i*Math.round((o.getTime()-n.getTime())/864e5)/360)}},TBILLYIELD:function(e,t,r){const n=l(e),o=l(t),i=f(r);if("number"==typeof i&&o>n){return (100-i)/i*360/Math.round((o.getTime()-n.getTime())/864e5)}}});const le={1:"#ERROR",2:"#ERROR",3:"#REF!",4:"#SPILL!"};function Te(e,t,r){return r+64*t+64*e*4096}function _e(e){return [e<2147483648?e>>18:e/262144&16777215,e>>6&4095,63&e]}function ye(e){return e<2147483648?e>>18:e/262144&16777215}function Ne(e){return e>>6&4095}function Me(e){return 63&e}function qe(e,t,r){const[n,o]=_e(e),[i,u]=_e(t),a=i-n,s=u-o;for(let t=0;t<=a;t++)for(let n=0;n<=s;n++)r(e+64*n+4096*t*64);}function we(e,t,r,n){let o=0;for(let i=0;i<r;i++)for(let r=0;r<t;r++)n(e+64*r+4096*i*64,o),o++;}function Ee(e,t){const r=e.code,n=e.source;let o,i,u,a,s,c="";const h=r.length;for(let l=0;l<h;l+=3){switch(r[l]){case 5:{let n;9===r[l+6]&&(n=t.pageName(Me(r[l+7]))),c+=Oe(n||e.source.substr(r[l+1],r[l+2]))+"!";break}case 7:[o,u,s]=_e(r[l+4]),t.z!==s&&5!==r[l-3]&&(c+=Oe(t.pageName(s))+"!"),c+=Ae(o,u,r[l+5]);break;case 4:c+=n.substr(r[l+1],r[l+2]).toUpperCase();break;case 8:[o,u,s]=_e(r[l+4]),[i,a]=_e(r[l+7]),t.z!==s&&5!==r[l-3]&&(c+=Oe(t.pageName(s))+"!"),c+=Ae(o,u,r[l+5]),c+=":",c+=Ae(i,a,r[l+8]);break;case 9:break;case 2:c+="{{"+n.substr(r[l+1],r[l+2])+"}}";break;case 3:c+="#REF!";break;case 1:c+='"'+n.substr(r[l+1],r[l+2])+'"';break;case 13:{c+="{";const e=r[l+1],t=r[l+2];l+=3;for(let o=0;o<t;o++){for(let t=0;t<e;t++){t>0&&(c+=",");const e=r[l];1===e?c+='"'+n.substr(r[l+1],r[l+2])+'"':11===e&&(c+=n.substr(r[l+1],r[l+2])),l+=3;}o<t-1&&(c+=";");}l-=3,c+="}";break}default:c+=n.substr(r[l+1],r[l+2]);}}return c}function Ae(e,t,r){let n="";2&r&&(n+="$");let o="";for(t+=1;t>0;){let e=t%26;0===e&&(e=26),o=String.fromCharCode(64+e)+o,t=(t-e)/26;}return n+=o,1&r&&(n+="$"),n+=e+1,n}function Oe(e){return -1!==e.indexOf(" ")?`'${e}'`:e}let ve;function Ie(e){return e<=122}function Se(e){return e<=122?e>=65&&94!=e||35===e||36===e||46===e:e>191}function Ce(e){return e>=97}function De(e){const t=e.charCodeAt(0);return t>=48&&t<=57}function xe(e,t){let r;do{t++,r=e.charCodeAt(t);}while(r>=48&&r<=57);return t}function Le(e,t){let r;do{r=e[++t];}while('"'!==r);return t}function Pe(e){return " "===e||"\t"===e||"\n"===e||"\r"===e}function Fe(e,t){let r;do{r=e[++t];}while(Pe(r));return t}function Ue(e,t){if("<"===e[t]){const r=e[t+1];">"!==r&&"="!==r||t++;}else ">"===e[t]&&"="===e[t+1]&&t++;return t+1}function Ve(e,t,r){const n=e.length;let o=!0,i=t,u=!1,a=!1,s=!1,c=0;for(;i<n;i++){const t=e[i];if("'"!==t){if(!u){s=!0;const e=t.charCodeAt(0);if(Se(e)){Ie(e)?Ce(e)&&(a=!0):o=!1,1==c&&c++;continue}if(De(t)){0==c&&c++;continue}break}}else {if(s)break;if(u){i++;break}u=!0;}}const h=e[i];let l=t,f=i-t;return u&&(f-=1+("'"===e[i-1]?1:0),f<0&&(f=0),l++,r=5),0===r&&(":"===h&&o?1!==c?r=3:(r=8,a&&(ve=!0)):"!"===h?r="#"===e[l]?3:5:"("===h?(function(e,t,r){const n=e.substr(t,r);return n.toUpperCase()!==n}(e,l,f)&&(ve=!0),r=4):"}"===h&&"}"===e[i-1]?r=2:1===c&&o?(r=7,a&&(ve=!0)):r=6),[l,f,i,r]}function ke(e,t,r){let n=0,o=0,i=1,u=1,a=0,s=!1;for(let e=t.length-1;e>=0;e--){const r=t[e].charCodeAt(0);36!==r?r<58?(o+=(r-48)*i,i*=10):(s||(i=1,n=o,o=0,s=!0,u+=1),o+=(r-(r>96?96:64))*i,i*=26):a+=u;}o>4095?e.push(3,0,0):e.push(9,Te(n-1,o-1,r),a);}function $e(e,t){const r=[];ve=!1;let n=-1,o=-1,i=0;for(let a=0;a<e.length;a++){const s=e[a];if(o>-1){if("}"==s){const e=r[o+2]+=1,t=r[o+1]=i/e;t-Math.round(t)!=0&&r.push(3,0,0),o=-1;}else if('"'===s){const t=Le(e,a);a++,r.push(1,a,t-a),i++,a=t;}else if("-"===s){const t=xe(e,a+1);r.push(11,a,t-a),i++,a=t-1;}else if(De(s)){const t=xe(e,a);r.push(11,a,t-a),i++,a=t-1;}else " "===s||"\t"===s||","===s||(";"===s?r[o+2]+=1:r.push(3,0,0));continue}if('"'==s){n>-1?(r.push(1,n+1,a-n-1),n=-1):n=a;continue}if(n>-1)continue;if("{"==s){if("{"==e[a+1]){const[t,n,o]=Ve(e,a+2,2);r.push(2,t,n),a=o+2-1;continue}o=r.length,i=0,r.push(13,0,0);continue}if("'"==s||((u=s.charCodeAt(0))<=122?u>=65&&94!=u||35===u||36===u:u>191)){let n,[o,i,u,s]=Ve(e,a,0);const c=r.length;if(7!==s&&8!==s||5!==r[r.length-3])n=t.z,r.push(s,o,i);else {const u="'"===e[o-2]?1:0,a=r[c-2],h=r[c-1];n=t.page(e.substr(a,h)),void 0===n&&(r.push(3,0,0),n=0),r.push(s,o-h-2*u-1,i+h+2*u+1);}if(a=u-1,6===s)t.name(r,e,t);else if(8===s){const t=r.length;if(ke(r,e.substr(o,i),n),[o,i,u,s]=Ve(e,a+2,0),5===s&&([o,i,u,s]=Ve(e,u+1,0)),7!==s){r[t-3]=7;continue}ke(r,e.substr(o,i),n);const c=r[t+1],h=r[t+4];(c>h||ye(c)>ye(h))&&(r[t+1]=h,r[t+4]=c),r[t-1]+=i+1,a=u-1;}else 7===s?ke(r,e.substr(o,i),n):3!==s&&5!==s||a++;continue}if(Pe(s)){const t=Fe(e,a);r.push(12,a,t-a),a=t-1;continue}if(De(s)){const t=xe(e,a);r.push(11,a,t-a),a=t-1;continue}const c=Ue(e,a);r.push(10,a,c-a),a=c-1;}var u;const a={code:r,source:e,exec:null,broken:0,triggers:null};return ve&&(a.source=Ee(a,t)),a}function Be(e){return "            ".substr(0,10-e.length)}const He=[">","<","=","+"];function Xe(e,t){const r=function(e,t){const r=e.code,n=e.source;let o="",i=0;const u=[],a=r.length;for(let s=0;s<a;s+=3){switch(r[s]){case 4:o+=`ctx.m["${n.substr(r[s+1],r[s+2]).toUpperCase()}"]`;break;case 1:o+='"'+n.substr(r[s+1],r[s+2])+'"';break;case 2:o+=`ctx.p("${n.substr(r[s+1],r[s+2])}")`;break;case 6:case 7:{let e,t;if(10===r[s-3]?e=s-3:12===r[s-3]&&10===r[s-6]&&(e=s-6),10===r[s+6]?t=s+6:12===r[s+6]&&10===r[s+9]&&(t=s+9),e||t){const i=e?n[r[e+1]]:null,u=t?n[r[t+1]]:null;if("&"==i||"&"==u){o+=`(ctx.v(${r[s+4]}) === null ? "" : ctx.v(${r[s+4]}))`;break}if(-1!=He.indexOf(i)||-1!=He.indexOf(u)){o+=`(ctx.v(${r[s+4]}) === null ? 0 : ctx.v(${r[s+4]}))`;break}}o+=`ctx.v(${r[s+4]})`;break}case 8:o+=`ctx.r(${r[s+4]}, ${r[s+7]})`;break;case 10:if(1===r[s+2]){const e=n[r[s+1]];"&"===e?o+='+""+':t&&"+"==e?o+="*1+1*":"="===e?o+="==":";"===e?o+=",":"{"===e?o+="[":"}"===e?o+="]":"^"===e?o+="**":"%"===e?r[s+3]&&10!==r[s+3]?o+=t?"/0+":e:o+=("/"==u[i]?"*":"/")+"100":("("==e?(i++,u.push("+")):")"==e&&(i--,u.pop()),o+=e),"+"!=e&&"-"!=e&&"*"!=e&&"/"!=e&&"&"!=e||(u[i]=e);}else if(2===r[s+2]){const e=n.substr(r[s+1],r[s+2]);o+="<>"===e?"!=":e;}else o+=n.substr(r[s+1],r[s+2]);break;case 11:o+=n.substr(r[s+1],r[s+2]);break;case 3:return "";case 9:case 5:case 12:break;case 13:{o+="ctx.a([";const t=r[s+1],i=r[s+2];s+=3;const u=s+t*i*3;let a=!1;for(;s<u;s+=3){a&&(o+=",");const t=r[s];if(11===t)o+=n.substr(r[s+1],r[s+2]);else if(1===t)o+='"'+n.substr(r[s+1],r[s+2])+'"';else if(3===t)return e.broken=3,"";a=!0;}s-=3,o+=`],${t}, ${i})`;break}}}return o}(e,t);if(!r)return e.broken=3,void(e.exec=null);try{e.exec=new Function("ctx",`return ${r}`);}catch(t){e.broken=1,e.exec=null;}}function je(e,t){const r=+Ut(e),n=+Vt(e),o=+Ut(t),i=+Vt(t);return Ot(r*o-n*i,r*i+n*o)}function Ye(e,t){const r=+Ut(e),n=+Vt(e);return Ot(r+ +Ut(t),n+ +Vt(t))}function Ge(e){return e>0?Math.floor(e):Math.ceil(e)}function ze(e){return e<0?Math.floor(e):Math.ceil(e)}function We(...e){let t=0;const r=s(e);for(let e=0;e<r.length;e++){const n=a(r[e]);"number"==typeof n&&(t+=n);}return t}function Ke(...e){let t=0,r=0;const n=s(e);for(let e=0;e<n.length;e++){const o=a(n[e]);"number"==typeof o&&(t+=o,r++);}return r?t/r:0}function Qe(...e){const t=s(e);let r=0,n=0;for(let e=0;e<t.length;e++){const o=t[e],i=a(t[e]);"number"==typeof i?(r+=i,n++):(!0===o&&r++,(o||!1===o)&&n++);}return n?r/n:0}function Je(...e){let t=0;const r=s(e);for(let e=0;e<r.length;e++){"number"==typeof a(r[e])&&t++;}return t}function Ze(...e){let t=0;const r=s(e);for(let e=0;e<r.length;e++)r[e]&&1*r[e]!=0&&t++;return t}function et(...e){let t=-1/0;const r=s(e);for(let e=0;e<r.length;e++){const n=a(r[e]);"number"==typeof n&&n>t&&(t=n);}return t===-1/0?0:t}function tt(...e){let t=1/0;const r=s(e);for(let e=0;e<r.length;e++){const n=a(r[e]);"number"==typeof n&&n<t&&(t=n);}return t===1/0?0:t}function rt(...e){let t=!1,r=1;const n=s(e);for(let e=0;e<n.length;e++){const o=a(n[e]);"number"==typeof o&&(t=!0,r*=o);}return t?r:null}function nt(...e){const t=e[0].length;for(const r in e)if(e[r].length!==t)return;let r=0;for(let t=0;t<e[0].length;t++){let n=!1,o=1;for(const r in e){const i=a(e[r][t]);"number"==typeof i&&(o*=i,n=!0);}n&&(r+=o);}return r}function ot(e,t,r){const n=s(e);let o=t?0:-1;const i=r?Qe(...e):Ke(...e);let u=0;for(let e=0;e<n.length;e++){const t=n[e];let s=a(n[e]);if("number"!=typeof s){if(!r||"boolean"!=typeof t&&!t)continue;s=!0===t?1:0;}o++,u+=Math.pow(s-i,2);}return o?u/o:0}function it(...e){return ot(e,!1,!1)}function ut(...e){return ot(e,!1,!0)}function at(...e){return ot(e,!0,!1)}function st(...e){return ot(e,!0,!0)}function ct(...e){return Math.sqrt(it(...e))}function ht(...e){return Math.sqrt(at(...e))}function lt(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return Math.pow(r,n)}function ft(e){const t=a(e);if("number"==typeof t&&t>=0)return Math.sqrt(t)}function dt(e){const t=a(e);if("number"==typeof t)return Math.abs(t)}function mt(){return Math.random()}function pt(e){const t=a(e);if("number"==typeof t)return Math.floor(t)}function gt(e,t){const r=a(e),n=a(t)||0;if("number"==typeof r&&"number"==typeof n)return n<0?Math.round(r/Math.pow(10,Math.abs(n)))*Math.pow(10,Math.abs(n)):parseFloat(r.toFixed(n))}function bt(e,t){const r=a(e),n=a(t)||0;if("number"==typeof r&&"number"==typeof n)return Math.floor(r*Math.pow(10,n))/Math.pow(10,n)}function Rt(e,t){const r=a(e),n=a(t)||0;if("number"==typeof r&&"number"==typeof n)return Math.ceil(r*Math.pow(10,n))/Math.pow(10,n)}const Tt={M:1e3,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1};function _t(e,t=1,r=0){const n=a(e);let o=a(t);const i=a(r);if("number"==typeof n&&"number"==typeof o&&"number"==typeof i)return 0===o?0:(o=Math.abs(o),n>=0?Math.ceil(n/o)*o:0===r?-1*Math.floor(Math.abs(n)/o)*o:-1*Math.ceil(Math.abs(n)/o)*o)}const yt=[];function Nt(e){const t=a(e);if("number"==typeof t&&t>-1){const e=Math.floor(t);return 0===e||1===e?1:(yt[e]>0||(yt[e]=Nt(e-1)*e),yt[e])}}function Mt(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return Nt(r)/(Nt(n)*Nt(r-n))}function qt(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n){const e=Math.abs(n);return r>=0?Math.floor(r/e)*e:-1*Math.ceil(Math.abs(r)/e)*e}}function wt(e,t=10){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return Math.log(r)/Math.log(n)}function Et(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r+Math.ceil((n-r+1)*Math.random())-1}const At=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"];function Ot(e,t,n="i"){const o=a(e),i=a(t);if("number"!=typeof o&&"number"!=typeof i)throw r;let u="",s="";return e&&(u=e.toString()),t&&1!==t?s=t+n:1===t&&(s=n),t>0?`${u?`${u}+`:""}${s}`:u+s}function vt(e,t=null){return d(e,t,-512,511,2)}function It(e,t=null){return d(e,t,-274877906944,274877906943,16)}function St(e,t=null){return d(e,t,-536870912,536870911,8)}const Ct=[-1.3026537197817094,.6419697923564902,.019476473204185836,-.00956151478680863,-.000946595344482036,.000366839497852761,42523324806907e-18,-20278578112534e-18,-1624290004647e-18,130365583558e-17];function Dt(e){const t=e<0;let r,n=0,o=0;const i=2/(2+(e=Math.abs(e))),u=4*i-2;for(let e=Ct.length-1;e>0;e--)r=u*n-o+Ct[e],o=n,n=r;const a=i*Math.exp(-e*e+.5*(Ct[0]+u*n)-o);return t?a-1:1-a}function xt(e,r){const n=a(e),o=a(r);if("number"==typeof n)return "number"==typeof o?Dt(o)-Dt(n):Dt(n);throw t}function Lt(e){const r=a(e);if("number"==typeof r)return Math.exp(r);throw t}const Pt=[.9999999999998099,676.5203681218851,-1259.1392167224028,771.3234287776531,-176.6150291621406,12.507343278686905,-.13857109526572012,9984369578019572e-21,1.5056327351493116e-7];const Ft=Math.pow(2,39);function Ut(e){if("string"!=typeof e)throw t;if(["i","+i","1i","+1i","-i","-1i","j","+j","1j","+1j","-j","-1j"].indexOf(e)>=0)return 0;let n=e.indexOf("+"),o=e.indexOf("-");0===n&&(n=e.indexOf("+",1)),0===o&&(o=e.indexOf("-",1));const i=e.substring(e.length-1,e.length),u="i"===i||"j"===i;if(n>=0||o>=0){if(!u)throw r;if(n>=0){if(isNaN(+e.substring(0,n))||isNaN(+e.substring(n+1,e.length-1)))throw r;return Number(e.substring(0,n))}if(isNaN(+e.substring(0,o))||isNaN(+e.substring(o+1,e.length-1)))throw r;return Number(e.substring(0,o))}if(u){if(isNaN(+e.substring(0,e.length-1)))throw r;return 0}if(isNaN(+e))throw r;return +e}function Vt(e){if("string"!=typeof e)throw t;if(["i","j"].indexOf(e)>=0)return 1;let n=(e=e.replace("+i","+1i").replace("-i","-1i").replace("+j","+1j").replace("-j","-1j")).indexOf("+"),o=e.indexOf("-");0===n&&(n=e.indexOf("+",1)),0===o&&(o=e.indexOf("-",1));const i=e.substring(e.length-1,e.length),u="i"===i||"j"===i;if(n>=0||o>=0){if(!u)throw r;if(n>=0){if(isNaN(+e.substring(0,n))||isNaN(+e.substring(n+1,e.length-1)))throw r;return Number(e.substring(n+1,e.length-1))}if(isNaN(+e.substring(0,o))||isNaN(+e.substring(o+1,e.length-1)))throw r;return -Number(e.substring(o+1,e.length-1))}if(u){const t=+e.substring(0,e.length-1);if(isNaN(t))throw r;return t}if(isNaN(+e))throw r;return 0}function kt(e){const t=+Ut(e),r=+Vt(e);return Ot(Math.cos(t)*Math.cosh(r),-Math.sin(t)*Math.sinh(r))}function $t(e){const t=+Ut(e),r=+Vt(e);return Ot(Math.cos(r)*(Math.exp(t)+Math.exp(-t))/2,Math.sin(r)*(Math.exp(t)-Math.exp(-t))/2)}function Bt(e,t){const r=+Ut(e),n=+Vt(e),o=+Ut(t),i=+Vt(t),u=Math.pow(o,2)+Math.pow(i,2);return Ot((r*o+n*i)/u,(n*o-r*i)/u)}function Ht(e){const t=+Ut(e),r=+Vt(e);return Ot(Math.sin(t)*Math.cosh(r),Math.cos(t)*Math.sinh(r))}function Xt(e){const t=+Ut(e),r=+Vt(e);return Ot(Math.cos(r)*(Math.exp(t)-Math.exp(-t))/2,Math.sin(r)*(Math.exp(t)+Math.exp(-t))/2)}const jt=Math.pow(2,29);function Yt(e,r,n){const o=a(r);if("number"!=typeof o||r<0||r>1||n&&(0===r||1===r))throw t;let i=s(e).sort(((e,t)=>e-t));n&&(i=[0,...i]);const u=(i.length+(n?0:-1))*o,c=Math.floor(u);if(void 0===i[c+1])return i[c];const h=i[c+1]-i[c];return i[c]+h*(u-c)}function Gt(e,n,o){const i=a(n);if("number"!=typeof i)throw t;switch(i){case 0:if(o)throw t;return tt(...e);case 1:return Yt(e,.25,o);case 2:return Yt(e,.5,o);case 3:return Yt(e,.75,o);case 4:if(o)throw t;return et(...e);default:throw r}}function zt(e,t,r,n){const o=f(e),i=f(t),u=f(r);if(1==t)return 1/u;const a=Math.exp(-Math.pow(o/u,i));return n?1-a:i/Math.pow(u,i)*Math.pow(o,i-1)*a}function Wt(e,t,r,n=!1){const o=f(e),i=f(t),u=f(r),a=(e,t,r)=>Mt(t,e)*Math.pow(r,e)*Math.pow(1-r,t-e);if(!n)return a(o,i,u);let s=0;for(let e=0;e<o+1;e++)s+=a(e,i,u);return s}function Kt(t,r,o){const i=t.filter((e=>"number"==typeof e)),u=r.filter((e=>"number"==typeof e));if(i.length!==u.length)throw n;const a=i.length;if(0===a)throw e;const s=i.reduce(((e,t)=>e+t),0)/a,c=u.reduce(((e,t)=>e+t),0)/a;let h=0;for(let e=0;e<a;e++)h+=(i[e]-s)*(u[e]-c);return h/(o?a-1:a)}function Qt(e,t){return Kt(e,t,!1)}const Jt={ABS:dt,ACOS:function(e){const t=a(e);if("number"==typeof t)return Math.acos(t)},ACOSH:function(e){const t=a(e);if("number"==typeof t)return Math.acosh(t)},ACOT:function(e){const t=a(e);if("number"==typeof t)return Math.atan(1/t)},ACOTH:function(e){const t=a(e);if("number"==typeof t)return .5*Math.log((t+1)/(t-1))},ADD:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r+n},ARABIC:function(e){if(!a(e)&&/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(`${e}`)){let t=0;return `${e}`.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g,(function(e){return t+=Tt[e],e})),+t}},ASIN:function(e){const t=a(e);if("number"==typeof t)return Math.asin(t)},ASINH:function(e){const t=a(e);if("number"==typeof t)return Math.asinh(t)},ATAN:function(e){const t=a(e);if("number"==typeof t)return Math.atan(t)},ATAN2:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return Math.atan2(n,r)},ATANH:function(e){const t=a(e);if("number"==typeof t)return Math.log((1+t)/(1-t))/2},AVEDEV:function(...t){const r=s(t).filter((e=>"number"==typeof e)),n=r.length;if(0===n)throw e;const o=r.reduce(((e,t)=>e+t),0)/n;return r.reduce(((e,t)=>e+Math.abs(t-o)),0)/n},AVERAGE:Ke,AVERAGEA:Qe,BASE:function(e,t,r=0){const n=a(e),o=a(t),i=a(r);if("number"==typeof n&&"number"==typeof o&&"number"==typeof i){const e=n.toString(o);return new Array(Math.max(i+1-e.length,0)).join("0")+e.toUpperCase()}},BINOMDIST:Wt,"BINOM.INV":function(e,t,r){const n=f(e),o=f(t),i=f(r);for(let e=0;e<=n;e++){if(Wt(e,n,o,!0)>=i)return e}},"BINOM.DIST.RANGE":function(e,t,r,n){const o=f(e),i=f(t),u=f(r);let s=a(n);"number"!=typeof s&&(s=u);let c=0;for(let e=u;e<=s;e++){c+=Mt(o,e)*Math.pow(i,e)*Math.pow(1-i,o-e);}return c},"BINOM.DIST":Wt,BITAND:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return n&o;throw t},BITLSHIFT:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return o>0?n<<o:n>>-o;throw t},BITOR:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return n|o;throw t},BITRSHIFT:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return o>0?n>>o:n<<-o;throw t},BITXOR:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return n^o;throw t},CEILING:_t,COMBIN:Mt,COMBINA:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return 0===r&&0===n?1:Mt(r+n-1,r-1)},COMPLEX:Ot,CORREL:function(t,r){if(t.length!==r.length)throw n;const o=t.filter((e=>"number"==typeof e)),i=r.filter((e=>"number"==typeof e)),u=o.length,a=o.reduce(((e,t)=>e+t),0)/u,s=i.reduce(((e,t)=>e+t),0)/u;let c=0,h=0,l=0;for(let e=0;e<u;e++)c+=(o[e]-a)*(i[e]-s),h+=Math.pow(o[e]-a,2),l+=Math.pow(i[e]-s,2);const f=Math.sqrt(h*l);if(!f)throw e;return c/f},COS:function(e){const t=a(e);if("number"==typeof t)return Math.cos(t)},COSH:function(e){const t=a(e);if("number"==typeof t)return Math.cosh(t)},COT:function(e){const t=a(e);if("number"==typeof t)return 1/Math.tan(t)},COTH:function(e){const t=a(e);if("number"==typeof t){const e=Math.exp(2*t);return (e+1)/(e-1)}},COUNT:Je,COUNTA:Ze,COUNTBLANK:function(...e){let t=0;const r=s(e);for(let e=0;e<r.length;e++)0===r[e]||r[e]||t++;return t},COVAR:Qt,"COVARIANCE.P":Qt,"COVARIANCE.S":function(e,t){return Kt(e,t,!0)},CSC:function(e){const t=a(e);if("number"==typeof t)return 1/Math.sin(t)},CSCH:function(e){const t=a(e);if("number"==typeof t)return 2/(Math.exp(t)-Math.exp(-t))},DEC2BIN:vt,DEC2HEX:It,DEC2OCT:St,DECIMAL:function(e,t){const r=a(e),n=a(t);if(!`${r}`.match("/[2-9]/")&&"number"==typeof r&&"number"==typeof n&&n>1&&n<37)return parseInt(`${r}`,n)},DEGREES:function(e){const t=a(e);if("number"==typeof t)return 180*t/Math.PI},DELTA:function(e,r){const n=a(e),o=a(r);if("number"==typeof n||"number"==typeof n)return +(n===o);throw t},DEVSQ:function(...e){const t=s(e),r=[];t.forEach((e=>{"number"==typeof e&&r.push(e);}));const n=r.reduce(((e,t)=>e+t),0)/r.length;return r.reduce(((e,t)=>e+Math.pow(t-n,2)),0)},DIVIDE:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n&&0!==n)return r/n},EQ:function(e,t){return typeof e==typeof t&&e==t},ERF:xt,ERFC:function(e,r){const n=a(e);if("number"==typeof n)return 1-xt(n,r);throw t},EVEN:function(e){const t=a(e);if("number"==typeof t){const e=ze(t);return e%2?e+Math.sign(t):e}},EXP:Lt,FACT:Nt,FACTDOUBLE:function e(t){const r=a(t);if("number"==typeof r){const t=Math.floor(r);return t<=0?1:t*e(t-2)}},FISHER:function(e){const r=a(e);if("number"==typeof r&&r>-1&&r<1)return .5*Math.log((1+r)/(1-r));throw t},FISHERINV:function(e){const r=a(e);if("number"==typeof r){const e=Math.exp(2*r);return (e-1)/(e+1)}throw t},FLOOR:qt,GAMMA:function e(n){let o=a(n);if("number"!=typeof o)throw t;if(!(Number.isInteger(o)&&o<=0)){if(o<.5)return Math.PI/(Math.sin(Math.PI*o)*e(1-o));{o-=1;let e=Pt[0];for(let t=1;t<9;t++)e+=Pt[t]/(o+t);const t=o+7+.5;return Math.sqrt(2*Math.PI)*Math.pow(t,o+.5)*Math.exp(-t)*e}}throw r},GCD:function(...e){const t=s(e),r=t.length;if(!r)return 1;let n=t[0],o=1;for(;"number"!=typeof n;){if(n=t[o],o>t.length)throw "The arguments should contain at least one numeric value";o++;}let i=n<0?-n:n;for(;o<r;o++){const e=a(t[o]);if("number"==typeof e){let t=e<0?-e:e;for(;i&&t;)i>t?i%=t:t%=i;i+=t;}}return i},GEOMEAN:function(...e){const t=s(e);if(t.some((e=>!Number.isFinite(e)||e<=0)))throw r;return Math.pow(t.reduce(((e,t)=>t*e),1),1/t.length)},GESTEP:function(e,r=0){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return +(e>=r);throw t},GT:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r>n},GTE:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r>=n},HARMEAN:function(...e){const t=s(e);if(t.some((e=>!Number.isFinite(e)||e<=0)))throw r;const n=t.reduce(((e,t)=>e+1/t),0);return 1/(1/t.length*n)},HEX2BIN:function(e,t){return vt(parseInt(e.toString(),16),t)},HEX2DEC:function(e,r){let n=parseInt(e.toString(),16);if(!Number.isFinite(n))throw t;const o=n>Ft;o&&(n=-(n-2*Ft));const i=r?a(r):null,u=n.toString();return (o?"-":"")+(i?u.padStart(i,"0"):u)},HEX2OCT:function(e,t=null){let r=parseInt(e.toString(),16);return r>Ft&&(r^=Ft),St(r,t)},IMABS:function(e){const r=Ut(e),n=Vt(e);if(!Number.isFinite(+r)||!Number.isFinite(+n))throw t;return Math.sqrt(Math.pow(+r,2)+Math.pow(+n,2))},IMAGINARY:Vt,IMCONJUGATE:function(e){return Ot(+Ut(e),-+Vt(e))},IMCOS:kt,IMCOSH:$t,IMCOT:function(e){return Bt(kt(e),Ht(e))},IMCSC:function(e){return Bt("1",Ht(e))},IMCSCH:function(e){return Bt("1",Xt(e))},IMDIV:Bt,IMEXP:function(e){const t=+Ut(e),r=+Vt(e),n=Math.exp(t);return Ot(n*Math.cos(r),n*Math.sin(t))},IMLN:function(e){const t=+Ut(e),r=+Vt(e);return Ot(Math.log(Math.sqrt(t*t+r*r)),Math.atan(r/t))},IMPOWER:function(e,r){const n=a(r);if("number"!=typeof n)throw t;const o=+Ut(e),i=+Vt(e),u=Math.sqrt(o*o+i*i),s=Math.pow(u,n),c=Math.atan(i/o);return Ot(s*Math.cos(n*c),s*Math.sin(n*c))},IMPRODUCT:function(...e){if(0===e.length)throw t;let r=e[0];for(const t of e.slice(1))r=je(r.toString(),t.toString());return r.toString()},IMREAL:Ut,IMSEC:function(e){return Bt("1",kt(e))},IMSECH:function(e){return Bt("1",$t(e))},IMSIN:Ht,IMSINH:Xt,IMSQRT:function(e){const t=+Ut(e),r=+Vt(e),n=Math.sqrt(Math.sqrt(t*t+r*r)),o=Math.atan(r/t)/2;return Ot(n*Math.cos(o),n*Math.sin(o))},IMSUB:function(e,t){const r=+Ut(e),n=+Vt(e);return Ot(r-+Ut(t),n-+Vt(t))},IMSUM:function(...e){if(0===e.length)throw t;let r=e[0];for(const t of e.slice(1))r=Ye(r.toString(),t.toString());return r.toString()},IMTAN:function(e){return Bt(Ht(e),kt(e))},INT:pt,LARGE:function(e,r){const n=a(r),o=e.sort(((e,t)=>e-t));if("number"==typeof n&&!e.some((e=>"number"!=typeof a(e))))return o[o.length-n];throw t},LN:function(e){const t=a(e);if("number"==typeof t)return Math.log(t)},LOG:wt,LOG10:function(e){const t=a(e);if("number"==typeof t)return Math.log(t)/Math.log(10)},LT:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r<n},LTE:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r<=n},MAX:et,MEDIAN:function(...e){const t=s(e);t.sort((function(e,t){return e-t}));const r=Math.floor(t.length/2);return t.length%2?t[r]:(t[r-1]+t[r])/2},MIN:tt,MINUS:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r-n},MOD:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n&&0!==n){const e=Math.abs(r%n);return t>0?e:-e}},MROUND:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n&&r*n>-1)return Math.round(r/n)*n},MULTINOMIAL:function(...e){const t=s(e);let r=0,n=1;for(let e=0;e<t.length;e++){const o=a(t[e]);"number"==typeof o&&(r+=o,n*=Nt(t[e]));}return Nt(r)/n},MULTIPLY:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return r*n},NE:function(e,t){return typeof e!=typeof t||e!=t},OCT2BIN:function(e,t=null){let r=parseInt(e.toString(),8);return r&jt&&(r=-(2*jt-r)),vt(r,t)},OCT2DEC:function(e,r=null){const n=r?a(r):null;let o=parseInt(e.toString(),8);if(o&jt&&(o=-(2*jt-o)),!Number.isFinite(o)||"boolean"==typeof n)throw t;return o.toString().padStart(n||0,"0")},OCT2HEX:function(e,t=null){let r=parseInt(e.toString(),8);return r&jt&&(r=-(2*jt-r)),It(r,t)},ODD:function(e){const t=a(e);if("number"==typeof t){const e=ze(t);return e%2?e:e+Math.sign(t)}},PERCENTILE:Yt,"PERCENTILE.INC":Yt,"PERCENTILE.EXC":function(e,t){return Yt(e,t,!0)},PERMUT:function(e,r){const n=a(e),o=a(r);if("number"==typeof n&&"number"==typeof o)return Nt(n)/Nt(n-o);throw t},PI:function(){return Math.PI},POW:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return lt(e,t)},POWER:lt,PRODUCT:rt,QUARTILE:Gt,"QUARTILE.INC":Gt,"QUARTILE.EXC":function(e,t){return Gt(e,t,!0)},QUOTIENT:function(e,t){const r=a(e),n=a(t);if("number"==typeof r&&"number"==typeof n)return Ge(r/n)},RADIANS:function(e){const t=a(e);if("number"==typeof t)return t*Math.PI/180},RAND:mt,RANDBETWEEN:Et,ROMAN:function(e){const t=a(e);if("number"==typeof t){const e=String(t).split("");let r="",n=3;for(;n--;)r=(At[+e.pop()+10*n]||"")+r;return new Array(+e.join("")+1).join("M")+r}},ROUND:gt,ROUNDDOWN:bt,ROUNDUP:Rt,SEC:function(e){const t=a(e);if("number"==typeof t)return 1/Math.cos(t)},SECH:function(e){const t=a(e);if("number"==typeof t)return 2/(Math.exp(t)+Math.exp(-t))},SIGN:function(e){const r=a(e);if("number"==typeof r)return 0===r?0:r/Math.abs(r);throw t},SIN:function(e){const t=a(e);if("number"==typeof t)return Math.sin(t)},SINH:function(e){const t=a(e);if("number"==typeof t)return Math.sinh(t)},SMALL:function(e,r){const n=a(r),o=e.sort(((e,t)=>e-t));if("number"==typeof n&&!e.some((e=>"number"!=typeof a(e))))return o[n-1];throw t},SQRT:ft,SQRTPI:function(e){const t=a(e);if("number"==typeof t&&t>-1)return Math.sqrt(t*Math.PI)},STDEV:ct,"STDEV.S":ct,"STDEV.P":ht,STDEVA:function(...e){return Math.sqrt(ut(...e))},STDEVP:ht,STDEVPA:function(...e){return Math.sqrt(st(...e))},STEYX:function(t,r){if(t.length!==r.length)throw n;const o=t.filter((e=>"number"==typeof e)),i=r.filter((e=>"number"==typeof e)),u=o.length;if(2===u)throw e;const a=o.reduce(((e,t)=>e+t),0)/u,s=i.reduce(((e,t)=>e+t),0)/u;let c=0,h=0,l=0;for(let e=0;e<u;e++)c+=(o[e]-a)*(i[e]-s),h+=Math.pow(o[e]-a,2),l+=Math.pow(i[e]-s,2);if(2===l)throw e;return Math.sqrt((h-Math.pow(c,2)/l)/(u-2))},SUBTOTAL:function(e,...t){const r=a(e),n=s(t);if("number"==typeof r)switch(r){case 1:case 101:return Ke(...n);case 102:case 2:return Je(...n);case 103:case 3:return Ze(...n);case 104:case 4:return et(...n);case 105:case 5:return tt(...n);case 106:case 6:return rt(...n);case 107:case 7:case 110:case 10:return;case 108:case 8:return ht(...n);case 109:case 9:return We(...n);case 111:case 11:return at(...n)}},SUM:We,SUMPRODUCT:nt,SUMSQ:function(...e){let t=0;const r=s(e);for(let e=0;e<r.length;e++){const n=a(r[e]);"number"==typeof n&&(t+=Math.pow(n,2));}return t},SUMX2MY2:function(e,t){if(!e.find((e=>"number"!=typeof a(e)))&&!t.find((e=>"number"!=typeof a(e)))){let r=0;for(let n=0;n<e.length;n++)r+=e[n]*e[n]-t[n]*t[n];return r}},SUMX2PY2:function(e,t){if(!e.find((e=>"number"!=typeof a(e)))&&!t.find((e=>"number"!=typeof a(e)))){let r=0;for(let n=0;n<e.length;n++)r+=e[n]*e[n]+t[n]*t[n];return r}},SUMXMY2:function(e,t){if(!e.find((e=>"number"!=typeof a(e)))&&!t.find((e=>"number"!=typeof a(e)))){let r=0;for(let n=0;n<e.length;n++)r+=Math.pow(e[n]-t[n],2);return r}},TAN:function(e){const t=a(e);if("number"==typeof t)return Math.tan(t)},TANH:function(e){const t=a(e);if("number"==typeof t)return Math.tanh(t)},TRUNC:function(e){const t=a(e);if("number"==typeof t)return Ge(t)},VAR:it,"VAR.S":it,"VAR.P":at,VARA:ut,VARP:at,VARPA:st,WEIBULL:zt,"WEIBULL.DIST":zt};function Zt(e){return void 0===e?null:e}function er(e,t,r,n){void 0===r&&(r=0);let o=-1;if(0===r)o=t.indexOf(e);else {let n="string"==typeof e?"":-1/0*r;1===r?t.forEach(((t,r)=>{t<=e&&t>n&&(n=t,o=r);})):-1===r&&t.forEach(((t,r)=>{t>=e&&t<n&&(n=t,o=r);}));}return o+1}const tr={LOOKUP:function(e,t,r){const n=er(e,t,1);if(0===n)throw "#N/A";return (r||t)[n-1]},HLOOKUP:function(e,t,r,n){let o=!0;void 0!==n&&(o=h(n));const i=t.$width?t.$width:t.length,u=er(e,t.slice(0,i),o?1:0);if(0===u)throw "#N/A";return Zt(t[i*((r||1)-1)+u-1])},VLOOKUP:function(e,t,r,n){let o=!0;void 0!==n&&(o=h(n));const i=t.$width?t.$width:1,u=t.length/i;let a;if(1===u)a=t;else {a=[];for(let e=0;e<u;e++)a.push(t[i*e]);}const s=r,c=er(e,a,o?1:0);if(0===c)throw "#N/A";return Zt(t[i*(c-1)+(s||1)-1])},XLOOKUP:function(e,t,r,n,o,i){const u=er(e,t,o);if(0===u){if(void 0!==n)return n;throw "#N/A"}return (r||t)[u-1]},INDEX:function(e,t,r){const n=t,o=r;return Zt(e[(e.$width?e.$width:1)*(n-1)+(o||1)-1])},MATCH:function(e,t,r){let n=r;void 0===r&&(n=1);const o=er(e,t,n);if(0===o)throw "#N/A";return o},XMATCH:function(e,t,r,n){const o=er(e,t,r);if(0===o)throw "#N/A";return o},CHOOSE:function(e,...t){let r=a(e);if(t.length>1&&"number"==typeof r){if(t.length<r)throw "the index number is greater than the length of the array of values";if(r<=0)throw "index cannot be less than or equal to 0";return r--,t[r]}}};var rr=Object.freeze({__proto__:null,IF:function(e,t,r){return e?t:r},AND:function(...e){for(let t=0;t<e.length;t++)if(!h(e[t]))return !1;return !0},NOT:function(e){return !h(e)},OR:function(...e){for(let t=0;t<e.length;t++)if(e[t])return !0;return !1},FALSE:function(){return !1},TRUE:function(){return !0}});var nr=Object.freeze({__proto__:null,ISBLANK:function(e){return c(e)},ISBINARY:function(e){return /^[01]{1,10}$/.test(`${e}`)},ISEVEN:function(e){const t=a(e);return "number"==typeof t&&t%2==0},ISODD:function(e){const t=a(e);return "number"==typeof t&&t%2!=0},ISNONTEXT:function(e){return "string"!=typeof e},ISNUMBER:function(e){return "number"==typeof a(e)},ISTEXT:function(e){return "string"==typeof e},N:function(e){const t=a(e);if("number"==typeof t)return t;const r=new Date(e);return r.getTime()?u(r):"TRUE"===e||!0===e?1:0}});const or={SUM:We,AVERAGE:Ke,AVERAGEA:Qe,COUNT:Je,COUNTA:Ze,MIN:tt,MAX:et,SQRT:ft,POWER:lt,LOG:wt,EXP:Lt,PRODUCT:rt,SUMPRODUCT:nt,ABS:dt,RAND:mt,RANDBETWEEN:Et,ROUND:gt,ROUNDUP:Rt,ROUNDDOWN:bt,INT:pt,CEILING:_t,FLOOR:qt},ir={CONCATENATE:m,MID:g,LEFT:p,RIGHT:b,LOWER:R,UPPER:T,PROPER:_,TRIM:y,LEN:N,SEARCH:w,FIND:q,REPLACE:A,SUBSTITUTE:E,NOW:k},ur={DATE:C,TIME:D,YEAR:P,MONTH:L,DAY:x,HOUR:F,MINUTE:U,SECOND:V,DATEDIF:$},ar=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},or),ir),ur),tr),nr),rr),sr=Object.assign({},ar),cr=()=>Object.keys(sr);function hr(e,t){sr[e]=t;}function lr(e){Object.assign(sr,e);}function pr(e,t,r,n,o,i){const[u,a,s]=_e(e),[c,h,l]=_e(n);return s===l&&(!(u>=c+o)&&(!(u+t<=c)&&(!(a>=h+i)&&!(a+r<=h))))}Object.assign({},or),Object.assign({},ir),Object.assign({},ur);const gr=Math.pow(10,8);function br(e,t,r){r.add?e.has(t)||r.add(t):e.add(t);}function Rr(e){if(e.keys)return Array.from(e.keys());const t=[];return e.forEach(((e,r)=>t.push(r))),t}function Tr(e){if(e.values)return e.values();const t=[];e.forEach(((e,r)=>t.push(r)));let r=0;return {add:e=>{t.push(e);},next:()=>{const e=t[r];return r++,{done:r>t.length,value:e}}}}class _r{constructor(e){(e=e||{get:null,set:null,strict:!1})&&(this._getter=e.get,this._setter=e.set,this._strict=e.strict),this._parser=$e,this._printer=Xe,this._parseContext={name:function(){},pageName:()=>"",pageObj:()=>null,page:function(){return 0},z:0},this.$count=0,this._data=new Map,this._triggers=new Map,this._holders={},this._context={a:(e,t,r)=>(e.$width=t,e.$height=r,e),v:e=>{if(-1===e)throw new Error;const t=this._getter(e);return void 0===t?null:t},r:(e,t)=>{const[r,n]=_e(e),[o,i]=_e(t),u=o-r,a=i-n+1,s=[];s.$width=a,s.$height=u+1;for(let t=0;t<=u;t++)for(let r=0;r<a;r++)s[t*a+r]=this._getter(e+64*r+4096*t*64);return s},m:sr,e:e=>{throw e},p:e=>this.getPlaceholder(e)};}getTriggerList(e){return this._triggers.get(e)}setValue(e,t,r,n){""===t&&(t=null),this._removeTriggers(e,null),this._setter(e,t,r)&&(n||this.trigger(e));}clean(e){this._removeTriggers(e,null);}getValue(e){return this._getter(e)}getMeta(){return this._meta}setMeta(e){this._meta=Object.assign(Object.assign({},this._meta),e);}setPlaceholder(e,t){"*"===e?Object.entries(t).forEach((e=>this.setPlaceholder(e[0],e[1]))):(null===t?delete this._holders[e]:this._holders[e]=t,this.each(((t,r)=>{(function(e,t,r){for(let n=0;n<e.length;n+=3)if(2===e[n]&&t.substr(e[n+1],e[n+2])==r)return !0;return !1})(r.code,r.source,e)&&this.setMath(t,r.source,this._parseContext);})));}getPlaceholder(e){if("*"===e)return this._holders;const t=this._holders[e];return void 0===t?null:t}setMath(e,t,r,n){const o=this._generate(t,r),i=this._setMathAt(e,o);n||this._execAndTrigger(i);}refresh(e){this._execAndTrigger(e);}getMath(e){return this._data.get(e)}trigger(e,t){const r=this._triggers.get(e);if(r){const e=!t;t||(t=new Set);for(let e=0;e<r.length;e++)t.add(r[e]);e&&this.triggerSet(t);}return null}triggerSet(e){const t=new Map;for(;e.size;){const r=Tr(e);let n=!1;e:for(let o=r.next();!o.done;o=r.next()){const r=this._data.get(o.value);let i=t.get(o.value);if(i&&(1==i&&(i=this._check_for_loops(o.value,r.triggers,t)),2==i))continue;const u=r.triggers;if(u)for(let t=0;t<u.length;t++)if(e.has(u[t]))continue e;this._execAndTrigger(o.value,e),i||t.set(o.value,1),e.delete(o.value),n=!0;}if(!n)return void e.forEach((t=>this._errorAndTrigger(t,e)))}}getStats(){return {math:this._data.size,trigger:this._triggers.size}}_check_for_loops(e,t,r){const n=new Set;t.forEach((e=>n.add(e)));const o=Tr(n);for(let t=o.next();!t.done;t=o.next()){if(t.value==e)return r.set(e,2),2;const i=r.get(t.value);if(i&&i>1)return r.set(e,i),i;const u=this._data.get(t.value);u&&u.triggers&&u.triggers.forEach((e=>br(n,e,o)));}return r.set(e,3),3}_setMathAt(e,t){if(this._removeTriggers(e,t)){if(t.triggers)if(-1===t.triggers.indexOf(e)&&3!==t.broken)for(let r=0;r<t.triggers.length;r++){const n=t.triggers[r];let o=this._triggers.get(n);void 0===o&&(o=[],this._triggers.set(n,o)),o.push(e);}else t=Object.assign(Object.assign({},t),{broken:3});return this._data.set(e,t),e}}_removeTriggers(e,t){const r=this._data.get(e);if(!r)return !0;if(r===t)return !1;r.$width&&this._clearArea(e,!1);const n=r.triggers;if(n&&3!==r.broken)for(let t=0;t<n.length;t++){const r=n[t],o=this._triggers.get(r);if(o){const t=o.filter((t=>t!==e));t.length?this._triggers.set(r,t):this._triggers.delete(r);}}return this._data.delete(e),!0}parse(e,t){return this._parser(e,t||this._parseContext)}exec(e,t){const r=this._generate(e,t);return this._exec(r)}each(e){Rr(this._data).forEach((t=>e(t,this._data.get(t))));}setLogger(e){this._err_handler=e;}_setErr(e,t){return e.broken=2,t&&this._err_handler&&this._err_handler(t),le[e.broken]}_exec(e){if(e.broken>0&&2!==e.broken)return le[e.broken];try{const t=e.exec(this._context);return e.broken=0,"number"==typeof t?isFinite(t)?Math.round(t*gr)/gr:this._setErr(e):t}catch(t){return this._setErr(e,t)}}toString(e,t){return Ee(e,t||this._parseContext)}regenerate(e,t,r){r=Object.assign({},r||this._parseContext),Rr(this._data).forEach((n=>{let o=!1;const i=this._data.get(n),u=Me(n);if(t&&u===e)this._removeTriggers(n,null);else {for(let t=0;t<i.code.length;t+=3)if(9===i.code[t]&&Me(i.code[t+1])===e){o=!0;break}o&&(r.z=u,t?this.setMath(n,i.source,r):(i.source=Ee(i,r),i.code=this._parser(i.source,r).code));}}));}recalculate(e,t){t=Object.assign({},t||this._parseContext);const r=new Set;this.each((n=>{if(e){const e=this._data.get(n);if(e.broken&&2!==e.broken)return t.z=Me(n),void this.setMath(n,e.source,t)}r.add(n);})),this.triggerSet(r);}_generate(e,t,r){const n=r||this._parser(e,t||this._parseContext);return this._printer(n,this._strict),n.triggers=function(e){let t=[];const r=e.code,n=r.length;for(let e=0;e<n;e+=3){switch(r[e]){case 7:case 6:{const n=r[e+4];t.push(n);break}case 8:qe(r[e+4],r[e+7],(e=>t.push(e)));}}if(t.length>10){const e=new Set;t=t.filter((t=>!e.has(t)&&(e.add(t),!0)));}return t.length?t:null}(n),n}_execAndTrigger(e,t){this.$count+=1;const r=this._data.get(e);if(r){const n=this._exec(r);if(Array.isArray(n)){if(63!==Me(e))return void this._complexSetter(e,n,t)}this._setter(e,n,2)&&this.trigger(e,t);}}_complexSetter(e,t,r){const{$width:n,$height:o}=t,i=this._data.get(e);i.$width=n,i.$height=o;try{we(e,n,o,((n,o)=>{this._setter(n,t[o],2,0===o?null:e)&&this.trigger(n,r);}));}catch(t){this._clearArea(e,!0);}}_clearArea(e,t){const{$width:r,$height:n}=this._data.get(e);we(e,r,n,((r,n)=>{if(0===n&&t)this._setter(r,le[4],1)&&this.trigger(r);else {(t?this._setter(r,null,3,e):this._setter(r,null,3,-1))&&this.trigger(r);}}));}_errorAndTrigger(e,t){const r=this._data.get(e),n=this._setErr(r);this._setter(e,n,2)&&this.trigger(e,t);}debug(e,t=!1){const r=function(e){const t=e.code,r=e.source;let n="";const o=t.length;for(let e=0;e<o;e+=3){const o=t[e];let i;switch(o){case 4:i="method";break;case 1:i="text";break;case 5:i="page";break;case 2:i="holder";break;case 6:i="name";break;case 7:i="arg";break;case 8:i="range";break;case 9:i="data";break;case 10:i="op";break;case 11:i="number";break;case 3:i="error";break;case 12:i="extra";break;case 13:i="arr";}n+=9===o?`            ${t[e+1]}.${t[e+2]}\n`:13===o?`[${i}]${Be(i)}${t[e+1]} x ${t[e+2]}\n`:`[${i}]${Be(i)}${r.substr(t[e+1],t[e+2])}\n`;}return n}(this.parse(e));if(t)return r;console.log(r);}transpose(e,t,r,n){n=n||this._parseContext;const[o,i,u]=_e(e),a=new Map,s=new Map,c=new Set;Rr(this._data).forEach((e=>{const[h,l,f]=_e(e),d=this._data.get(e),m=f===n.z?n:Object.assign(Object.assign({},n),{z:f}),p=this._transpose(d,o,i,t,r,n,m);let g=e;if(f===u&&(l>=i||h>=o)&&(g=Te(h>=o?h+t:h,l>=i?l+r:l,f)),d!==p||e!==g){if(s.set(e,p),f===u&&(r<0&&l>=i&&l<i-r||t<0&&h>=o&&h<o-t))return;a.set(g,p),d.broken!==p.broken&&c.add(g);}})),Rr(a).forEach((e=>this._setMathAt(e,a.get(e)))),Array.from(s.keys()).forEach((e=>{a.has(e)||this._removeTriggers(e,null);})),t>0&&this._triggerRow(o,t,c),r>0&&this._triggerColumn(i,r,c),t<0&&this._triggerColumn(o-1,2,c),r<0&&this._triggerColumn(i-1,2,c),this.triggerSet(c);}_triggerColumn(e,t,r){const n=t?e+t:e;Rr(this._triggers).forEach((t=>{const o=Ne(t);o>=e&&o<n&&this.trigger(t,r);}));}_triggerRow(e,t,r){const n=t?e+t:e;Rr(this._triggers).forEach((t=>{const o=ye(t);o>=e&&o<n&&this.trigger(t,r);}));}moveMath(e,t,r,n,o,i,u){"string"==typeof e&&(e=this.parse(e,i));return this._moveMath(e,t,r,n,o,u||i).source}_moveMath(e,t,r,n,o,i){const u=e.code;for(let e=0;e<u.length;e+=3)if(7===u[e]){let[i,a]=_e(u[e+4]);pr(o.id,o.h,o.w,u[e+4],1,1)&&(i+=t,a+=r,u[e+4]=Te(i,a,n)),e+=3;}else if(8===u[e]){let[i,a]=_e(u[e+4]),[s,c]=_e(u[e+7]);pr(o.id,o.h,o.w,u[e+4],s-i+1,c-a+1)&&(i+=t,a+=r,s+=t,c+=r,u[e+4]=Te(i,a,n),u[e+7]=Te(s,c,n)),e+=6;}let a={code:u,broken:e.broken,source:e.source,triggers:null,exec:null};return a=this._parser(Ee(a,i),i),this._generate(a.source,i,a)}transposeMath(e,t,r,n){"string"==typeof e&&(e=this.parse(e,n)),n=n||this._parseContext;return this._transpose(e,-1,-1,t,r,n,n).source}_transpose(e,t,r,n,o,i,u){let a=!0,s=e.code;const c=!(t<0||r<0);for(let e=0;e<s.length;e+=3)if(7===s[e]){let[u,h,l]=_e(s[e+4]);if(i.z!==l)continue;const f=s[e+5];if(!c&&3==f)continue;(c||0==(1&f))&&0!==n&&u>=t&&(a&&(s=[].concat(s),a=!1),u+=n,(u<t||u<0)&&(s[e]=3)),(c||0==(2&f))&&0!==o&&h>=r&&(a&&(s=[].concat(s),a=!1),h+=o,(h<r||h<0)&&(s[e]=3)),a||(s[e+4]=Te(u,h,l)),e+=3;}else if(8===s[e]){const u=s[e+5],h=s[e+8];if(!c&&3===u&&3===h)continue;let[l,f,d]=_e(s[e+4]),[m,p]=_e(s[e+7]);if(i.z!==d)continue;0!==n&&((c||0==(1&u))&&(n>0?l>=t:l>t)&&(a&&(s=[].concat(s),a=!1),l+=n,l<0&&(s[e]=3)),(c||0==(1&h))&&m>=t&&(a&&(s=[].concat(s),a=!1),m+=n,m<l&&(s[e]=3))),0!==o&&((c||0==(2&u))&&(o>0?f>=r:f>r)&&(a&&(s=[].concat(s),a=!1),f+=o,f<0&&(s[e]=3)),(c||0==(2&h))&&p>=r&&(a&&(s=[].concat(s),a=!1),p+=o,p<f&&(s[e]=3))),a||(s[e+4]=Te(l,f,d),s[e+7]=Te(m,p,d)),e+=6;}if(a)return e;let h={code:s,broken:e.broken,source:e.source,triggers:null,exec:null};return h=this._parser(Ee(h,u),u),this._generate(h.source,u,h)}}class yr{constructor(e,t,r){this._id=e,this._store=t,this._meta={},this._parseContext=Object.assign(Object.assign({},r),{z:e}),this.reset(),this._parseMode=!1;}reset(){this._data=[],this._rows=[],this._cols=[],this._spans=[];}getMeta(){return this._meta}setMeta(e){this._meta=Object.assign(Object.assign({},this._meta),e);}getID(){return this._id}cellID(e,t){return Te(e,t,this._id)}getSize(){const e=this._data.length;let t=0;return this._data.forEach((e=>{e&&e.length>t&&(t=e.length);})),[e,t]}getContext(){return this._parseContext}addRow(e,t){this._data.splice.apply(this._data,Nr(e,t)),this._store.transpose(Te(e,0,this._id),t,0,this._parseContext),this._rows.splice.apply(this._rows,Nr(e,t)),this._recalculateSpans(e,t,0);}removeRow(e,t){return this._data.splice(e,t),this._store.transpose(Te(e,0,this._id),-t,0,this._parseContext),this._rows.splice(e,t),this._recalculateSpans(e,-t,0)}addColumn(e,t){const r=Nr(e,t);this._data.forEach((e=>{e&&e.splice.apply(e,r);})),this._store.transpose(Te(0,e,this._id),0,t,this._parseContext),this._cols.splice.apply(this._cols,Nr(e,t)),this._recalculateSpans(e,0,t);}removeColumn(e,t){this._data.forEach((r=>{r&&r.splice(e,t);})),this._store.transpose(Te(0,e,this._id),0,-t,this._parseContext),this._cols.splice(e,t),this._recalculateSpans(e,0,-t);}setCell(e,t,r){let n=this._data[e];n||(n=this._data[e]=[]);const o=n[t];n[t]=o?Object.assign(Object.assign(Object.assign({},o),r),{value:o.value}):r,void 0!==r.value&&this.setValue(e,t,r.value);}clearCell(e,t){const r=this._data[e];r&&r[t]&&(r[t]=null,this._store.setValue(Te(e,t,this._id),""));}setValue(e,t,r,n){const o=Te(e,t,this._id);"string"==typeof r&&r.length>1&&"="===r[0]?this._store.setMath(o,r.substr(1),this._parseContext):this._store.setValue(o,r,n);}getCell(e,t,r){let n=this._data[e],o=n?n[t]:null;return o||!r||(n||(n=this._data[e]=[]),o=n[t],o||(o=n[t]={value:null})),o}getValue(e,t,r){if(r){const r=this._store.getMath(Te(e,t,this._id));if(r)return "="+r.source}const n=this.getCell(e,t,!1);return n?n.value:null}getRange(e,t,r,n){const o=[];for(let i=e;i<=r;i++)for(let e=t;e<=n;e++)o.push(this.getValue(i,e,!1));return o}getCellRange(e,t,r,n){const o=[];for(let i=e;i<=r;i++)for(let e=t;e<=n;e++)o.push(this.getCell(i,e));return o}eachCell(e){this._data.forEach(((t,r)=>{t&&t.forEach(((t,n)=>{t&&e(r,n,t);}));}));}serialize(e){const t=[];return this.eachCell(((r,n,o)=>{if(o=Object.assign({},o),e){const e=this._store.getMath(Te(r,n,this.getID()));e&&(o.value="="+e.source);}t.push([r,n,o]);})),t}parse(e,t){this.reset(),this._store.each((e=>{Me(e)===this._id&&this._store.clean(e);})),this.parseBlock(e,t,!0);}parseBlock(e,t,r){const n=new Set;this._parseMode=!0,e.forEach((([e,o,i])=>{const u=Te(e,o,this._id);r||this._store.clean(u);let a=this._data[e];a||(a=this._data[e]=[]);const s=(i=a[o]=Object.assign({},i)).value;if(s)if("string"==typeof s&&s.length>1&&"="===s[0]){const e=s.substr(1);this._store.setMath(u,e,this.getContext(),!0),n.add(u);}else t&&(i.value=null,this._store.setValue(u,s,null,!0),this._store.trigger(u,n));})),this._store.triggerSet(n),this._parseMode=!1;}throwError(e){if(!this._parseMode)throw e}setRowMeta(e,t){const r=this._rows[e]||{};this._rows[e]=r?Object.assign(Object.assign({},r),t):t;}getRowMeta(e,t){const r=this._rows[e];if(t&&!r){const t={};return this._rows[e]=t,t}return r||null}setColumnMeta(e,t){const r=this._cols[e]||{};this._cols[e]=r?Object.assign(Object.assign({},r),t):t;}getColumnMeta(e,t){const r=this._cols[e];if(t&&!r){const t={};return this._cols[e]=t,t}return r||null}sort(e,t,r=0,n="asc"){const[o,i]=_e(e),[u,a]=_e(t),s="asc"===n,c=[],h=[];for(let e=o;e<=u;e++){const t=[];for(let r=i;r<=a;r++){const n=this._store.getMath(this.cellID(e,r));t.push({value:this.getValue(e,r),row:e,math:n||null});}c.push(t);}c.sort(((e,t)=>{const n=e[r].value,o=t[r].value;return "string"==typeof n&&"string"==typeof o||"number"==typeof n&&"number"==typeof o?n<o?s?-1:1:n>o?s?1:-1:0:"number"==typeof n?-1:1}));for(let e=o;e<=u;e++)for(let t=i;t<=a;t++){const r=c[e-o][t-i];if(r.math){const t=r.row-e,n=this._store.transposeMath(r.math,-t,0,this._parseContext);r.value=`=${n}`;}h.push([e,t,{value:r.value}]);}this.parseBlock(h);}addSpan(e,t,r){let n;if(!(t>1||r>1))return n=this._spans.findIndex((t=>t.id===e)),void(-1!==n&&this._spans.splice(n,1));for(let n=0;n<=this._spans.length-1;n++){const o=this._spans[n];pr(e,t,r,o.id,o.info.width,o.info.height)&&this._spans.splice(n,1);}this._spans.push({id:e,info:{width:t,height:r}});}getSpan(e){return this._spans.find((t=>t.id===e))||null}getSpans(){return this._spans}_recalculateSpans(e,t,r){if(this._spans.length)for(let n=this._spans.length-1;n>=0;n--){const o=this._spans[n];let{height:i,width:u}=o.info,[a,s]=_e(o.id);t&&([a,i]=this._adjustSpan(a,i,e,t)),r&&([s,u]=this._adjustSpan(s,u,e,r)),u<1||i<1||u+i<=2?this._spans.splice(n,1):(o.id=Te(a,s,this._id),o.info.height=i,o.info.width=u);}}_adjustSpan(e,t,r,n){const o=e+t;if(n<0){const i=r+(n=-n);r>e?r<=o&&(t-=Math.min(n,e+t-r)):i>e?(t-=i-e,e=n-(i-e)):e-=n;}else r<=e?e+=n:r<=o&&(t+=n);return [e,t]}}function Nr(e,t){const r=[e,0];for(let e=0;e<t;e++)r.push(null);return r}class Mr{constructor(e,t,r){this._ranges=new Map,this._counter=1,this._rangeOrder=[],this._store=e,this._page=t,this._pageGetter=r;}get(e){return this._store.getMath(this._ranges.get(e))}toId(e){return this._ranges.get(e)}add(e,t){const r=this._ranges.get(e)||this._next_id();this._store.setMath(r,t,this._page.getContext()),this._ranges.set(e,r),this._refresh(e);}remove(e){this._ranges.delete(e),this._counter=1,this._refresh(e);}serialize(){return Array.from(this._ranges.keys()).map((e=>[e,this.get(e).source]))}parse(e){e.forEach((e=>this.add(e[0],e[1])));}_refresh(e){const t=e.indexOf("!");let r="";-1!==t&&(r=e.substr(0,t),e=e.substr(t+1)),this._store.each(((t,n)=>{if(function(e,t,r,n){for(let o=0;o<e.length;o+=3)if(6===e[o]){if(""!==r){if(5===e[o-3]&&t.substr(e[o-2],e[o-1])!==r)continue;return !0}if(t.substr(e[o+1],e[o+2])===n)return !0}return !1}(n.code,n.source,r,e)){const e=Me(t);this._store.setMath(t,n.source,this._pageGetter(e).getContext());}}));}_next_id(){for(;this._rangeOrder[this._counter];)this._counter++;return this._rangeOrder[this._counter]=!0,Te(this._counter,0,this._page.getID())}renamePage(e,t){e+="!",t&&(t+="!"),this._ranges.forEach(((r,n,o)=>{0===n.indexOf(e)&&(t?o.set(n.replace(e,t),r):this._store.clean(r),o.delete(n));}));}}class qr{constructor(e,t){this._store=e,this._pageGetter=t;}copy(e,t){t||(t=e);const r=this._serialize(e,t);return this._store.setMeta({$clipboard:r}),r}paste(e,t,r,n,o=this._updateCurrentCell){var i;if(n=n||0,!(null===(i=r=r||this._store.getMeta().$clipboard)||void 0===i?void 0:i.data.length))return;const[u,a,s]=_e(e),[c,h]=_e(t),l=this._pageGetter(s),[f,d]=_e(r.from||0),m=r.data,p=[],g=u-f,b=a-d;if(0===n){const e=m[0].length-1;for(let t=0;t<=m.length-1;t++)for(let r=0;r<=e;r++){const e=m[t][r],n=u+t,i=a+r,c=this._updateCell(n,i,s,e,g,b,o);c&&p.push(c);}}if(1===n)for(let e=u;e<=c;e++)for(let t=a;t<=h;t++){const r=t-a,n=m[e-u][r],i=this._updateCell(e,t,s,n,g,b,o);i&&p.push(i);}if(2===n){let e=0;for(let t=u;t<=c;t++){let r=0;e===m.length&&(e=0);for(let n=a;n<=h;n++){r===m[0].length&&(r=0);const i=m[e][r],u=t-(f+e),a=n-(d+r),c=this._updateCell(t,n,s,i,u,a,o);c&&p.push(c),r++;}e++;}}l.parseBlock(p);}clean(e,t,r){r=r||255;const[n,o,i]=_e(e),[u,a]=_e(t),s=this._pageGetter(i),c=[],h=[];for(let e=n;e<=u;e++)for(let t=o;t<=a;t++){const n=s.getCell(e,t),o=Te(e,t,i),u=255===r?{}:Object.assign({},n);if(1&r){const e=this._store.getTriggerList(o);e&&h.push(...e),delete u.value;}c.push([e,t,u]);}s.parseBlock(c),this._refreshRelatedFormulas(h);}_refreshRelatedFormulas(e){wr(e).forEach((e=>this._store.refresh(e)));}_serialize(e,t){const[r,n,o]=_e(e),[i,u]=_e(t),a=this._pageGetter(o),s={from:e,data:[]};for(let e=r;e<=i;e++){const t=[];for(let r=n;r<=u;r++){const n=a.getCell(e,r),i=this._store.getMath(Te(e,r,o));let u;i&&(u=i.source);const s=[n?Object.assign({},n):null];u&&s.push(u),t.push(s);}s.data.push(t);}return s}reset(){this._store.setMeta({$clipboard:null});}move(e,t){const{data:r,from:n}=t||this._store.getMeta().$clipboard,[o,i,u]=_e(n),a=r.length,s=r[0].length,[c,h,l]=_e(e),f=[],d=[],m=this._pageGetter(l),p={id:n,h:a,w:s};for(let e=0;e<a;e++)for(let t=0;t<s;t++){const g=r[e][t],[b,R]=g,T=Te(o+e,i+t,u),_=this._store.getTriggerList(T);if(_){const e=this._getTriggersOutsideCutRange(_,n,a,s);e.length&&f.push(...e);}const y=c+e,N=h+t;if(b){if(R){const e=this._pageGetter(u).getContext(),t=this._store.moveMath(R,c-o,h-i,l,p,e,m.getContext());b.value=`=${t}`;}d.push([y,N,b]);}else d.push([y,N,{}]);}m.parseBlock(d),this._updateRelatedFormulas(f,c-o,h-i,l,p);}_updateRelatedFormulas(e,t,r,n,o){wr(e).forEach((e=>{const[,,i]=_e(e),u=this._store.getMath(e),a=this._pageGetter(i).getContext(),s=this._store.moveMath(u,t,r,n,o,a);this._store.setMath(e,s,a);}));}_getTriggersOutsideCutRange(e,t,r,n){const o=[];return e.forEach((e=>{pr(t,r,n,e,1,1)||o.push(e);})),o}_updateCell(e,t,r,n,o,i,u){const[a,s]=n,c=this._pageGetter(r),h=a?Object.assign({},a):{value:null};h.formula=s?`=${this._store.transposeMath(s,o,i)}`:null;const l=u(c.getCell(e,t)||{},h);return l?[e,t,l]:null}_updateCurrentCell(e,t){return t.formula&&(t.value=t.formula),t}fromCSV(e,t="\n",r="\t"){return {data:e.split(t).map((e=>e.split(r).map((e=>[{value:e}]))))}}}function wr(e){const t=new Set(e);return Array.from(t)}class Er{constructor(e){this._cfg=e||{strict:!1},this._pages=[],this._pageNames=[],this._pageName2ID=new Map,this._pCounter=0,this._parseContext={page:e=>this._pageName2ID.get(e),pageName:e=>this._pageNames[e],pageObj:e=>this._pages[e],name:(e,t,r)=>{const n=e.length,o=t.substr(e[n-2],e[n-1]);let i;if(5===e[n-6]){const r=t.substr(e[n-5],e[n-4]);i=this._ranges.toId(r+"!"+o)||this._ranges.toId(o);}else i=this._ranges.toId(r.pageName(r.z)+"!"+o)||this._ranges.toId(o);e.push(9,i||-1,0);},z:0};const t=this._store=new _r(Object.assign(Object.assign({},this._cfg),{get:e=>{const[t,r,n]=_e(e);return this._pages[n].getValue(t,r)},set:(e,r,n,o)=>{const[i,u,a]=_e(e),s=this._pages[a].getCell(i,u,!0),c=o?null:"number"==typeof s.spill?s.spill:r||0===r?s.source:null;if(3===n){if(o>=0&&(s.spill=o,s.source!==o))return !1;s.source=o=null;}else if(null===r&&!o&&s.source)return !1;if(o&&e!==o&&s.source!==o&&(s.value||0===s.value||"number"==typeof s.source&&s.source!==o)){this._pages[a].throwError("spill error");}s.source!==o&&(s.source=o);const h=2===n||3===n;if((null==n||h)&&(n=s.$format||0),s.$format=n,"string"==typeof r&&1!=n&&r){let e=parseFloat(r);h&&(e=e.toString()),e==r&&(r=parseFloat(r));}const l=s.value!==r;return l&&(s.value=r),"number"==typeof c&&t.triggerSet(new Set([c])),l}})),r=this._pages[63]=new yr(63,this._store,this._parseContext);this._ranges=new Mr(this._store,r,this.getPage.bind(this)),this._cm=new qr(this._store,this.getPage.bind(this));}addPage(e){for(;this._pages[this._pCounter];)this._pCounter++;const t=this._pCounter,r=new yr(t,this._store,this._parseContext);return this._pageName2ID.set(e,t),this._pages[t]=r,this._pageNames[t]=e,r}renamePage(e,t){if(e===t)return;const r=this._pageName2ID.get(e);this._pageName2ID.delete(e),this._pageName2ID.set(t,r),this._pageNames[r]=t,this._ranges.renamePage(e,t);const n=this._pages[r].getContext();this._store.regenerate(r,!1,n);}removePage(e){const t=this._pageName2ID.get(e),r=this._pages[t].getContext();this._pageName2ID.delete(e),this._pages[t]=this._pageNames[t]=null,this._pCounter=0,this._ranges.renamePage(e,null),this._store.regenerate(t,!0,r);}getPage(e){return "string"==typeof e&&(e=this._pageName2ID.get(e)),this._pages[e]}getRanges(){return this._ranges}getStore(){return this._store}find(e,{firstOnly:t,resultsLimit:r=100}){const n=[];return this._pages.forEach(((o,i)=>{o.eachCell(((o,u,a)=>{const s=a.value;e(s)&&(t&&0===n.length||!t&&n.length<r)&&n.push({id:Te(o,u,i),value:s});}));})),n}getCopyManager(){return this._cm}}const Ar=()=>({SUM:[["Number1","Required. The first value to sum."],["Number2","Optional. The second value to sum."],["Number3","Optional. The third value to sum."]],AVERAGE:[["Number1","Required. A number or cell reference that refers to numeric values."],["Number2","Optional. A number or cell reference that refers to numeric values."]],AVERAGEA:[["Value1","Required. A value or reference to a value that can be evaluated as a number."],["Value2","Optional. A value or reference to a value that can be evaluated as a number."]],COUNT:[["Value1","Required. An item, cell reference, or range."],["Value2","Optional. An item, cell reference, or range."]],COUNTA:[["Value1","Required. An item, cell reference, or range."],["Value2","Optional. An item, cell reference, or range."]],MIN:[["Number1","Required. Number, reference to numeric value, or range that contains numeric values."],["Number2","Optional. Number, reference to numeric value, or range that contains numeric values."]],MAX:[["Number1","Required. Number, reference to numeric value, or range that contains numeric values."],["Number2","Optional. Number, reference to numeric value, or range that contains numeric values."]],SQRT:[["Number","Required. The number to get the square root of."]],POWER:[["Number","Required. Number to raise to a power."],["Power","Required. Power to raise number to (the exponent)."]],LOG:[["Number","Required. Number for which you want the logarithm."],["Base","Optional. Base of the logarithm. Defaults to 10."]],EXP:[["Number","Required. The power that e is raised to."]],PRODUCT:[["Number1","Required. The first number or range to multiply."],["Number2","Optional. The second number or range to multiply."]],SUMPRODUCT:[["Array1","Required. The first array or range to multiply, then add."],["Array2","Optional. The second array or range to multiply, then add."]],ABS:[["Number","Required. The number to get the absolute value of."]],RAND:[],RANDBETWEEN:[["Bottom","Required. An integer representing the lower value of the range."],["Top","Required. An integer representing the upper value of the range."]],ROUND:[["Number","Required. The number to round."],["Num_digits","Required. The place at which number should be rounded."]],ROUNDUP:[["Number","Required. The number to round up."],["Num_digits","Required. The place at which number should be rounded."]],ROUNDDOWN:[["Number","Required. The number to round down."],["Num_digits","Required. The place at which number should be rounded."]],INT:[["Number","Required. The number from which you want an integer."]],CEILING:[["Number","Required. The number that should be rounded."],["Significance","Required. The multiple to use when rounding."]],FLOOR:[["Number","Required. The number that should be rounded."],["Significance","Required. The multiple to use when rounding."]],CONCATENATE:[["Text1","Required. The first text value to join together."],["Text2","Required. The second text value to join together."],["Text3","Optional. The third text value to join together."]],MID:[["Text","Required. The text to extract from."],["Start_num","Required. The location of the first character to extract."],["Num_chars","Required. The number of characters to extract."]],LEFT:[["Text","Required. The text from which to extract characters."],["Num_chars","Optional. The number of characters to extract, starting on the left side of text. Default = 1."]],RIGHT:[["Text","Required. The text from which to extract characters on the right."],["Num_chars","Optional. The number of characters to extract, starting on the right. Optional, default = 1."]],LOWER:[["Text","Required. The text that should be converted to lower case."]],UPPER:[["Text","Required. The text thatto convert to upper case."]],PROPER:[["Text","Required. The text that should be converted to proper case."]],TRIM:[["Text","Required. The text from which to remove extra space."]],LEN:[["Text","Required. The text for which to calculate length."]],SEARCH:[["Find_text","Required. The substring to find."],["Within_text","Required. The text to search within."],["Start_num","Optional. Starting position. Optional, defaults to 1."]],FIND:[["Find_text","Required. The substring to find."],["Within_text","Required. The text to search within."],["Start_num","Optional. The starting position in the text to search. Optional, defaults to 1."]],REPLACE:[["Old_text","Required. The text to replace."],["Start_num","Required. The starting location in the text to search."],["Num_chars","Required. The number of characters to replace."],["New_text","Required. The text to replace old_text with."]],SUBSTITUTE:[["Text","Required. The text to change."],["Old_text","Required. The text to replace."],["New_text","Required. The text to replace with."],["Instance","Optional. The instance to replace. If not supplied, all instances are replaced."]],NOW:[],DATE:[["Year","Required. Number for year."],["Month","Required. Number for month."],["Day","Required. Number for day."]],TIME:[["Hour","Required. The hour for the time you wish to create."],["Minute","Required. The minute for the time you wish to create."],["Second","Required. The second for the time you wish to create."]],YEAR:[["Date","Required. A valid Excel date."]],MONTH:[["Serial_number","Required. A valid Excel date."]],DAY:[["Date","Required. A valid Excel date."]],HOUR:[["Serial_number","Required. A valid Excel time."]],MINUTE:[["Serial_number","Required. A valid date or time."]],SECOND:[["Serial_number","Required. A valid time in a format Excel recognizes."]],DATEDIF:[["Start_date","Required. Start date in Excel date serial number format."],["End_date","Required. End date in Excel date serial number format."],["Unit","Required. The time unit to use (years, months, or days)."]],LOOKUP:[["Lookup_value","Required. The value to search for."],["Lookup_vector","Required. The one-row, or one-column range to search."],["Result_vector","Optional. The one-row, or one-column range of results."]],HLOOKUP:[["Lookup_value","Required. The value to look up."],["Table_array","Required. The table from which to retrieve data."],["Row_index","Required. The row number from which to retrieve data."],["Range_lookup","Optional. A Boolean to indicate exact match or approximate match. Default = TRUE = approximate match."]],VLOOKUP:[["Lookup_value","Required. The value to look for in the first column of a table."],["Table_array","Required. The table from which to retrieve a value."],["Column_index_num","Required. The column in the table from which to retrieve a value."],["Range_lookup","Optional. TRUE = approximate match (default). FALSE = exact match."]],XLOOKUP:[["Lookup","Required. The lookup value."],["Lookup_array","Required. The array or range to search."],["Return_array","Required. The array or range to return."],["Not_found","Optional. Value to return if no match found."],["Match_mode","Optional. 0 = exact match (default), -1 = exact match or next smallest, 1 = exact match or next larger, 2 = wildcard match."],["Search_mode","Optional. 1 = search from first (default), -1 = search from last, 2 = binary search ascending, -2 = binary search descending."]],INDEX:[["Array","Required. A range of cells, or an array constant."],["Row_num","Required. The row position in the reference or array."],["Col_num","Optional. The column position in the reference or array."],["Area_num","Optional. The range in reference that should be used."]],MATCH:[["Lookup_value","Required. The value to match in lookup_array."],["Lookup_array","Required. A range of cells or an array reference."],["Match_type","Optional. 1 = exact or next smallest (default), 0 = exact match, -1 = exact or next largest."]],XMATCH:[["Lookup_value","Required. The lookup value."],["Lookup_array","Required. The array or range to search."],["Match_mode","Optional. 0 = exact match (default), -1 = exact match or next smallest, 1 = exact match or next larger, 2 = wildcard match."],["Search_mode","Optional. 1 = search from first (default), -1 = search from last, 2 = binary search ascending, -2 = binary search descending."]],CHOOSE:[["Index_num","Required. The value to choose. A number between 1 and 254."],["Value1","Required. The first value from which to choose."],["Value2","Optional. The second value from which to choose."]],ISBLANK:[["Value","Required. The value to check."]],ISBINARY:[["Value","Required. The value to check."]],ISEVEN:[["Value","Required. The numeric value to check."]],ISODD:[["Value","Required. The numeric value to check."]],ISNONTEXT:[["Value","Required. The value to check."]],ISNUMBER:[["Value","Required. The value to check."]],ISTEXT:[["Value","Required. The value to check."]],N:[["Value","Required. The value to convert to a number."]],IF:[["Logical_test","Required. A value or logical expression that can be evaluated as TRUE or FALSE."],["Value_if_true","Optional. The value to return when logical_test evaluates to TRUE."],["Value_if_false","Optional. The value to return when logical_test evaluates to FALSE."]],AND:[["Logical1","Required. The first condition or logical value to evaluate."],["Logical2","Optional. The second condition or logical value to evaluate."]],NOT:[["Logical","Required. A value or logical expression that can be evaluated as TRUE or FALSE."]],OR:[["Logical1","Required. The first condition or logical value to evaluate."],["Logical2","Optional. The second condition or logical value to evaluate."]],FALSE:[],TRUE:[],ACOS:[["Number","Required. The value to get the inverse cosine of. The number must be between -1 and 1 inclusive."]],ACOSH:[["Number","Required. Any real number equal to or greater than 1."]],ACOT:[["Number","Required. Number is the cotangent of the angle you want. This must be a real number."]],ACOTH:[["Number","Required. The absolute value of Number must be greater than 1."]],ADD:[["Number1","Required. The first value to sum."],["Number2","Required. The second value to sum."]],ARABIC:[["Roman_text","Required. The Roman numeral in text that you want to convert."]],ASIN:[["Number","Required. The value to get the inverse sine of. The number must be between -1 and 1 inclusive."]],ASINH:[["Number","Required. Any real number."]],ATAN:[["Number","Required. The value to get the inverse tangent of."]],ATAN2:[["X_num","Required. The x coordinate of the input point."],["Y_num","Required. The y coordinate of the input point."]],ATANH:[["Number","Required. Any real number between 1 and -1."]],AVEDEV:[["Number1","Required. First value or reference."],["Number2","Optional. Second value or reference."]],BASE:[["Number","Required. The number to convert to a given base."],["Radix","Required. The base to convert to."],["Min_length","Optional. The minimum string length to return, achieved by padding with zeros."]],BINOMDIST:[["Number_s","Required. The number of successes."],["Trials","Required. The number of independent trials."],["Probability_s","Required. The probability of success on each trial."],["Cumulative","Required. TRUE = cumulative distribution function, FALSE=probability mass function."]],"BINOM.INV":[["Trials","Required. The number of Bernoulli trials."],["Probability_s","Required. The probability of a success on each trial."],["Alpha","Required. The criterion value."]],"BINOM.DIST.RANGE":[["Trials","Required. The number of independent trials. Must be greater than or equal to 0."],["Probability_s","Required. The probability of success in each trial. Must be greater than or equal to 0 and less than or equal to 1."],["Number_s","Required. The number of successes in trials. Must be greater than or equal to 0 and less than or equal to Trials."],["Number_s2","Optional. If provided, returns the probability that the number of successful trials will fall between Number_s and number_s2. Must be greater than or equal to Number_s and less than or equal to Trials."]],"BINOM.DIST":[["Number_s","Required. The number of successes."],["Trials","Required. The number of independent trials."],["Probability_s","Required. The probability of success on each trial."],["Cumulative","Required. TRUE = cumulative distribution function, FALSE=probability mass function."]],BITAND:[["Number1","Required. A positive decimal number."],["Number2","Required. A positive decimal number."]],BITLSHIFT:[["Number","Required. The number to be bit shifted."],["Shift_amount","Required. The amount of bits to shift, if negative shifts bits to the right instead."]],BITOR:[["Number1","Required. A positive decimal number."],["Number2","Required. A positive decimal number."]],BITRSHIFT:[["Number","Required. The number to be bit shifted."],["Shift_amount","Required. The amount of bits to shift to the right, if negative shifts bits to the left instead."]],BITXOR:[["Number1","Required. A positive decimal number."],["Number2","Required. A positive decimal number."]],COMBIN:[["Number","Required. The total number of items."],["Number_chosen","Required. The number of items in each combination."]],COMBINA:[["Number","Required. The total number of items."],["Number_chosen","Required. The number of items in each combination."]],COMPLEX:[["Real_num","Required. The real number."],["I_num","Required. The imaginary number."],["Suffix",'Optional. The suffix, either "i" or "j".']],CORREL:[["Array1","Required. A range of cell values."],["Array2","Required. A second range of cell values."]],COS:[["Number","Required. The angle in radians for which you want the cosine."]],COSH:[["Number","Required. The hyperbolic angle."]],COT:[["Number","Required. The angle provided in radians."]],COTH:[["Number","Required."]],COUNTBLANK:[["Range","Required. The range in which to count blank cells."]],COVAR:[["Array1","Required. The first cell range of integers."],["Array2","Required. The second cell range of integers."]],"COVARIANCE.P":[["Array1","Required. The first cell range of integers."],["Array2","Required. The second cell range of integers."]],"COVARIANCE.S":[["Array1","Required. The first cell range of integers."],["Array2","Required. The second cell range of integers."]],CSC:[["Number","Required. The angle provided in radians."]],CSCH:[["Number","Required."]],DEC2BIN:[["Number","Required. The decimal number you want to convert to binary."],["Places","Optional. Pads the resulting binary number with zeros up to the specified number of digits. If omitted returns the least number of characters required to represent the number."]],DEC2HEX:[["Number","Required. The decimal number you want to convert to hexadecimal."],["Places","Optional. Pads the resulting number with zeros up to the specified number of digits. If omitted returns the least number of characters required to represent the number."]],DEC2OCT:[["Number","Required. The decimal number you want to convert to octal."],["Places","Optional. Pads the resulting octal number with zeros up to the specified number of digits. If omitted returns the least number of characters required to represent the number."]],DECIMAL:[["Number","Required. A text string representing a number."],["Radix","Required. The base of the number to be converted, an integer between 2-36."]],DEGREES:[["Angle","Required. Angle in radians that you want to convert to degrees."]],DELTA:[["Number1","Required. The first number."],["Number2","Optional. The second number."]],DEVSQ:[["Number1","Required. First value or reference."],["Number2","Optional. Second value or reference."]],DIVIDE:[["Number1","Required. The number we are dividing."],["Number2","Required. The number by which we divide."]],EQ:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],ERF:[["Lower_limit","Required. The lower bound for integrating ERF."],["Upper_limit","Optional. The upper bound for integrating ERF. If omitted, ERF integrates between zero and lower_limit."]],ERFC:[["X","Required. The lower bound for integrating ERFC."]],EVEN:[["Number","Required. The number to round up to an even integer."]],FACT:[["Number","Required. The number to get the factorial of."]],FACTDOUBLE:[["Number","Required. A number greater than or equal to -1."]],FISHER:[["X","Required. A numeric value for which you want the transformation."]],FISHERINV:[["Y","Required. The value for which you want to perform the inverse of the transformation."]],GAMMA:[["Number","Required. Returns a number."]],GCD:[["Number1","Required. The first number."],["Number2","Optional. The second number."]],GEOMEAN:[["Number1","Required. First value or reference."],["Number2","Optional. Second value or reference."]],GESTEP:[["Number","Required. The value to test against step."],["Step","Optional. The threshold value. If you omit a value for step, GESTEP uses zero."]],GT:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],GTE:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],HARMEAN:[["Number1","Required. First value or reference."],["Number2","Optional. Second value or reference."]],HEX2BIN:[["Number","Required. The hexadecimal number you want to convert to binary."],["Places","Optional. Pads the resulting binary number with zeros up to the specified number of digits. If omitted returns the least number of characters required to represent the number."]],HEX2DEC:[["Number","Required. The hexadecimal number you want to convert to decimal."]],HEX2OCT:[["Number","Required. The hexadecimal number you want to convert to octal."],["Places","Optional. Pads the resulting binary number with zeros up to the specified number of digits. If omitted returns the least number of characters required to represent the number."]],IMABS:[["Inumber","Required. A complex number."]],IMAGINARY:[["Inumber","Required. A complex number."]],IMCONJUGATE:[["Inumber","Required. A complex number for which you want the conjugate."]],IMCOS:[["Inumber","Required. A complex number for which you want the cosine."]],IMCOSH:[["Inumber","Required. A complex number for which you want the hyperbolic cosine."]],IMCOT:[],IMCSC:[["Inumber","Required. A complex number for which you want the cosecant."]],IMCSCH:[["Inumber","Required. A complex number for which you want the hyperbolic cosecant."]],IMDIV:[["Inumber1","Required. The complex numerator or dividend."],["Inumber2","Required. The complex denominator or divisor."]],IMEXP:[["Inumber","Required. A complex number for which you want the exponential."]],IMLN:[["Inumber","Required. A complex number for which you want the natural logarithm."]],IMPOWER:[["Inumber","Required. A complex number."],["Number","Required. Power to raise number."]],IMPRODUCT:[["Inumber1","Required. Complex number 1."],["Inumber2","Optional. Complex number 2."]],IMREAL:[["Inumber","Required. A complex number."]],IMSEC:[["Inumber","Required. A complex number for which you want the secant."]],IMSECH:[["Inumber","Required. A complex number for which you want the hyperbolic secant."]],IMSIN:[["Inumber","Required. A complex number for which you want the sine."]],IMSINH:[["Inumber","Required. A complex number for which you want the hyperbolic sine."]],IMSQRT:[["Inumber","Required. A complex number for which you want the square root."]],IMSUB:[["Inumber1","Required. Complex number 1."],["Inumber2","Required. Complex number 2."]],IMSUM:[["Inumber1","Required. Complex number 1."],["Inumber2","Optional. Complex number 2."]],IMTAN:[["Inumber","Required. A complex number for which you want the tangent."]],LARGE:[["Array","Required. An array or range of numeric values."],["K","Required. Position as an integer, where 1 corresponds to the largest value."]],LN:[["Number","Required. A number to take the natural logarithm of."]],LOG10:[["Number","Required. Number for which you want the logarithm."]],LT:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],LTE:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],MEDIAN:[["Number1","Required. A number or cell reference that refers to numeric values."],["Number2","Optional. A number or cell reference that refers to numeric values."]],MINUS:[["Number1","Required. The number from which we subtract."],["Number2","Required. The number by which we subtract."]],MOD:[["Number","Required. The number to be divided."],["Divisor","Required. The number to divide with."]],MROUND:[["Number","Required. The number that should be rounded."],["Significance","Required. The multiple to use when rounding."]],MULTINOMIAL:[["Number1, number2, ...","Required. Number1 is required, subsequent numbers are optional. 1 to 255 values for which you want the multinomial."]],MULTIPLY:[["Number1","Required. The number to multiply."],["Number2","Required. The number to multiply by."]],NE:[["Number1","Required. First value or reference."],["Number2","Required. Second value or reference."]],OCT2BIN:[["Number","Required. The octal number you want to convert. Number may not contain more than 10 characters. The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation."],["Places","Optional. The number of characters to use. If places is omitted, OCT2BIN uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros)."]],OCT2DEC:[["Number","Required. The octal number you want to convert. Number may not contain more than 10 octal characters (30 bits). The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation."]],OCT2HEX:[["Number","Required. The octal number you want to convert. Number may not contain more than 10 octal characters (30 bits). The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation."],["Places","Optional. The number of characters to use. If places is omitted, OCT2HEX uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros)."]],ODD:[["Number","Required. The number to round up to an odd integer."]],PERCENTILE:[["Array","Required. Data values."],["K","Required. Number representing kth percentile."]],"PERCENTILE.INC":[["Array","Required. Data values."],["K","Required. Number representing kth percentile."]],"PERCENTILE.EXC":[["Array","Required. Data values."],["K","Required. A value between 0 and 1 that represents the k:th percentile."]],PERMUT:[["Number","Required. The total number of items."],["Number_chosen","Required. The number of items in each combination."]],PI:[],POW:[["Number","Required. Number to raise to a power."],["Power","Required. Power to raise number to (the exponent)."]],QUARTILE:[["Array","Required. A reference containing data to analyze."],["Quart","Required. The quartile value to return."]],"QUARTILE.INC":[["Array","Required. A reference containing data to analyze."],["Quart","Required. The quartile value to return."]],"QUARTILE.EXC":[["Array","Required. A reference containing data to analyze."],["Quart","Required. The quartile value to return, 1-3."]],QUOTIENT:[["Numerator","Required. The number to be divided."],["Denominator","Required. The number to divide by."]],RADIANS:[["Angle","Required. Angle in degrees to convert to radians."]],ROMAN:[["Number","Required. Number (in Arabic numeral) you want to convert to Roman numeral."],["Form","Optional. The type of Roman numeral you want."]],SEC:[["Number","Required. The angle in radians for which you want the secant."]],SECH:[],SIGN:[["Number","Required. The number to get the sign of."]],SIN:[["Number","Required. The angle in radians for which you want the sine."]],SINH:[["Number","Required. The hyperbolic angle."]],SMALL:[["Array","Required. An array or range of numeric values."],["K","Required. Position as an integer, where 1 corresponds to the smallest value."]],SQRTPI:[["Number","Required. The number by which pi is multiplied."]],STDEV:[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],"STDEV.S":[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],"STDEV.P":[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],STDEVA:[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],STDEVP:[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],STDEVPA:[["Number1","Required. First number or reference in the sample."],["Number2","Optional. Second number or reference."]],STEYX:[["Known_y's","Required. An array or range of dependent data points."],["Known_x's","Required. An array or range of independent data points."]],SUBTOTAL:[["Function_num","Required. A number that specifies which function to use in calculating subtotals within a list. See table below for full list."],["Ref1","Required. A named range or reference to subtotal."],["Ref2","Optional. A named range or reference to subtotal."]],SUMSQ:[["Number1","Required. The first argument containing numeric values."],["Number2","Optional. The first argument containing numeric values."]],SUMX2MY2:[["Array_x","Required. The first range or array containing numeric values."],["Array_y","Required. The second range or array containing numeric values."]],SUMX2PY2:[["Array_x","Required. The first range or array containing numeric values."],["Array_y","Required. The second range or array containing numeric values."]],SUMXMY2:[["Array_x","Required. The first range or array containing numeric values."],["Array_y","Required. The second range or array containing numeric values."]],TAN:[["Number","Required. The angle in radians for which you want the tangent."]],TANH:[["Number","Required. Any real number."]],TRUNC:[["Number","Required. The number to truncate."],["Num_digits","Optional. The precision of the truncation (default is 0)."]],VAR:[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],"VAR.S":[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],"VAR.P":[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],VARA:[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],VARP:[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],VARPA:[["Number1","Required. First number or reference."],["Number2","Optional. Second number or reference."]],WEIBULL:[["X","Required. The value at which to evaluate the function."],["Alpha","Required. A parameter to the distribution."],["Beta","Required. A parameter to the distribution."],["Cumulative","Required. Determines the form of the function."]],"WEIBULL.DIST":[["X","Required. The value at which to evaluate the function."],["Alpha","Required. A parameter to the distribution."],["Beta","Required. A parameter to the distribution."],["Cumulative","Required. Determines the form of the function."]],CHAR:[["Number","Required. A number between 1 and 255."]],CLEAN:[["Text","Required. The text to clean."]],CODE:[["Text","Required. The text for which you want a numeric code."]],EXACT:[["Text1","Required. The first text string to compare."],["Text2","Required. The second text string to compare."]],FIXED:[["Number","Required. The number to round and format."],["Decimals","Optional. Number of decimals to use. Default is 2."],["No_commas","Optional. Suppress commas. TRUE = no commas, FALSE = commas. Default is FALSE."]],NUMBERVALUE:[["Text","Required. The text to convert to a number."],["Decimal_separator","Optional. The character for decimal values."],["Group_separator","Optional. The character for grouping by thousands."]],REGEXEXTRACT:[["Text","Required. The input text."],["Regular_expression","Required. The first part of text that matches this expression will be returned."]],REGEXMATCH:[["Text","Required. The text to be tested against the regular expression."],["Regular_expression","Required. The regular expression to test the text against."]],REGEXREPLACE:[["Text","Required. The text, a part of which will be replaced."],["Regular_expression","Required. The regular expression. All matching instances in text will be replaced."],["Replacement","Required. The text which will be inserted into the original text."]],REPT:[["Text","Required. The text to repeat."],["Number_times","Required. The number of times to repeat text."]],T:[["Value","Required. The value to return as text."]],JOIN:[["Text1, text2, ..."],["Text you want to combine"]],ARRAYTOTEXT:[["Array","Required. The array or range to convert to text."],["Format","Optional. Output format. 0 = concise (default), and 1 = strict."]],DATEVALUE:[["Date_text","Required. A valid date in text format."]],DAYS:[["End_date","Required. The end date."],["Start_date","Required. The start date."]],DAYS360:[["Start_date","Required. The start date."],["End_date","Required. The end date."],["Method","Optional. Day count method. FALSE (default) = US method, TRUE = European method."]],EDATE:[["Start_date","Required. Start date as a valid Excel date."],["Months","Required. Number of months before or after start_date."]],EOMONTH:[["Start_date","Required. A date that represents the start date in a valid Excel serial number format."],["Months","Required. The number of months before or after start_date."]],ISOWEEKNUM:[["Date","Required. A valid Excel date in serial number format."]],NETWORKDAYS:[["Start_date","Required. The start date."],["End_date","Required. The end date."],["Holidays","Optional. A list of non-work days as dates."]],"NETWORKDAYS.INTL":[["Start_date","Required. The start date."],["End_date","Required. The end date."],["Weekend","Optional. Setting for which days of the week should be considered weekends."],["Holidays","Optional. A reference to dates that should be considered non-work days."]],TIMEVALUE:[["Time_text","Required. A date and/or time in a text format recognized by Excel."]],WEEKNUM:[["Serial_num","Required. A valid Excel date in serial number format."],["Return_type","Optional. The day the week begins. Default is 1."]],WEEKDAY:[["Serial_number","Required. The date for which you want to get the day of week."],["Return_type","Optional. A number representing day of week mapping scheme. Default is 1."]],WORKDAY:[["Start_date","Required. The date from which to start."],["Days","Required. The working days before or after start_date."],["Holidays","Optional. A list dates that should be considered non-work days."]],"WORKDAY.INTL":[["Start_date","Required. The start date."],["Days","Required. The end date."],["Weekend","Optional. Setting for which days of the week should be considered weekends."],["Holidays","Optional. A list of one or more dates that should be considered non-work days."]],YEARFRAC:[["Start_date","Required. The start date."],["End_date","Required. The end date."],["Basis","Optional. The type of day count basis to use (see below)."]],ACCRINT:[["Id","Required. Issue date of the security."],["Fd","Required. First interest date of security."],["Sd","Required. Settlement date of security."],["Rate","Required. Interest rate of security."],["Par","Required. Par value of security."],["Freq","Required. Coupon payments per year (annual = 1, semiannual = 2; quarterly = 4)."],["Basis","Optional. Day count basis (see below, default =0)."],["Calc","Optional. Calculation method (see below, default = TRUE)."]],PMT:[["Rate","Required. The interest rate for the loan."],["Nper","Required. The total number of payments for the loan."],["Pv","Required. The present value, or total value of all loan payments now."],["Fv","Optional. The future value, or a cash balance you want after the last payment is made. Defaults to 0 (zero)."],["Type","Optional. When payments are due. 0 = end of period. 1 = beginning of period. Default is 0."]],FV:[["Rate","Required. The interest rate per period."],["Nper","Required. The total number of payment periods."],["Pmt","Required. The payment made each period. Must be entered as a negative number."],["Pv","Optional. The present value of future payments. If omitted, assumed to be zero. Must be entered as a negative number."],["Type","Optional. When payments are due. 0 = end of period, 1 = beginning of period. Default is 0."]],DB:[["Cost","Required. Initial cost of asset."],["Salvage","Required. Asset value at the end of the depreciation."],["Life","Required. Periods over which asset is depreciated."],["Period","Required. Period to calculation depreciation for."],["Month","Optional. Number of months in the first year. Defaults to 12."]],DDB:[["Cost","Required. Initial cost of asset."],["Salvage","Required. Asset value at the end of the depreciation."],["Life","Required. Periods over which asset is depreciated."],["Period","Required. Period to calculation depreciation for."],["Factor","Optional. Rate at which the balance declines. If omitted, defaults to 2."]],DOLLAR:[["Number","Required. The number to convert."],["Decimals","Required. The number of digits to the right of the decimal point. Default is 2."]],DOLLARDE:[["Fractional_dollar","Required. Dollar component in special fractional notation."],["Fraction","Required. The denominator in the fractional unit. 8 = 1/8, 16 = 1/16, 32 = 1/32, etc."]],DOLLARFR:[["Decimal_dollar","Required. Pricing as a normal decimal number."],["Fraction","Required. The denominator in the fractional unit. 8 = 1/8, 16 = 1/16, 32 = 1/32, etc."]],EFFECT:[["Nominal_rate","Required. The nominal or stated interest rate."],["Npery","Required. Number of compounding periods per year."]],FVSCHEDULE:[["Principal","Required. The initial investment sum."],["Schedule","Required. Schedule of interest rates, provided as range or array."]],IRR:[["Values","Required. Array or reference to cells that contain values."],["Guess","Optional. An estimate for expected IRR. Default is .1 (10%)."]],IPMT:[["Rate","Required. The interest rate per period."],["Per","Required. The payment period of interest."],["Nper","Required. The total number of payment periods."],["Pv","Required. The present value, or total value of all payments now."],["Fv","Optional. The cash balance desired after last payment is made. Defaults to 0."],["Type","Optional. When payments are due. 0 = end of period. 1 = beginning of period. Default is 0."]],ISPMT:[["Rate","Required. Interest rate."],["Per","Required. Period (starts with zero, not 1)."],["Nper","Required. Number of periods."],["Pv","Required. Present value."]],NPV:[["Rate","Required. Discount rate over one period."],["Value1","Required. First value(s) representing cash flows."],["Value2","Optional. Second value(s) representing cash flows."]],NOMINAL:[["Effect_rate","Required. The effective annual interest rate."],["Npery","Required. Number of compounding periods per year."]],NPER:[["Rate","Required. The interest rate per period."],["Pmt","Required. The payment made each period."],["Pv","Required. The present value, or total value of all payments now."],["Fv","Optional. The future value, or a cash balance you want after the last payment is made. Defaults to 0."],["Type","Optional. When payments are due. 0 = end of period. 1 = beginning of period. Default is 0."]],PDURATION:[["Rate","Required. Interest rate per period."],["Pv","Required. Present value of the investment."],["Fv","Required. Future value of the investment."]],PPMT:[["Rate","Required. The interest rate per period."],["Per","Required. The payment period of interest."],["Nper","Required. The total number of payments for the loan."],["Pv","Required. The present value, or total value of all payments now."],["Fv","Optional. The cash balance desired after last payment is made. Defaults to 0."],["Type","Optional. When payments are due. 0 = end of period. 1 = beginning of period. Default is 0."]],PV:[["Rate","Required. The interest rate per period."],["Nper","Required. The number of payment periods."],["Pmt","Required. The payment made each period."],["Fv","Optional. Future value. If omitted, defaults to zero."],["Type","Optional. Payment type, 0 = end of period, 1 = beginning of period. Default is 0."]],SYD:[["Cost","Required. Initial cost of asset."],["Salvage","Required. Asset value at the end of the depreciation."],["Life","Required. Periods over which asset is depreciated."],["Period","Required. Period to calculation depreciation for."]],TBILLPRICE:[["Settlement","Required. Settlement date of the security."],["Maturity","Required. Maturity date of the security."],["Discount","Required. The discount rate for the security."]],TBILLYIELD:[["Settlement","Required. Settlement date of the security."],["Maturity","Required. Maturity date of the security."],["Price","Required. Price per $100."]]});

	var en = {
	  labels: {
	    // formats
	    "common": "Common",
	    "currency": "Currency",
	    "number": "Number",
	    "percent": "Percent",
	    "date": "Date",
	    "string": "Text",
	    "custom-format": "Custom",
	    "decimal-places": "Decimal places",
	    "separator": "Group separator",
	    "negative": "Negative number",
	    "currency-symbol": "Сurrency",
	    "date-format": "Date format",
	    "format-docs": "How to create a format",
	    // titles
	    "undo-redo": "Undo/Redo",
	    "font": "Font",
	    "text": "Text",
	    "cell": "Cell",
	    "align": "Align",
	    "format": "Number",
	    "column": "Column",
	    "borders": "Borders",
	    "px": "px",
	    "apply": "Apply",
	    // popups and dialogs
	    "cancel": "Cancel",
	    "save": "Save",
	    // multisheets
	    "sheet": "Sheet",
	    // conditions
	    "conditional-format": "Conditional Format",
	    "conditional-common": "Common",
	    "conditional-text": "Text",
	    "condition": "Condition",
	    "conditional-style": "Style",
	    "conditional-operator": "Operator",
	    "conditional-between": "between",
	    "conditional-not-equal": "not equal",
	    // ranges
	    "range": "Range",
	    "range-title": "Named ranges",
	    "range-name": "Name",
	    "range-cells": "Range",
	    "range-scope": "Scope",
	    "range-global": "Book",
	    // images
	    "image-or": "or",
	    "image-title": "Add image",
	    "image-upload": "Select file for upload",
	    "image-url": "URL (e.g. http://*)",
	    // sparklines
	    "sparkline-title": "Add sparkline",
	    "sparkline-type": "Type",
	    "sparkline-range": "Range",
	    "sparkline-color": "Color",
	    "sparkline-positive": "Positive",
	    "sparkline-negative": "Negative",
	    // custom format
	    "format-title": "Set format",
	    "format-pattern": "Format pattern",
	    //dropdown
	    "dropdown-empty": "Empty cells",
	    "dropdown-empty-option": "Empty option",
	    "dropdown-title": "Add dropdown",
	    "dropdown-range": "Range",
	    // confirm
	    "ok": "OK",
	    // import/export
	    "import-title": "Import",
	    "import-not-support": "Sorry, your browser does not support import",
	    "export-title": "Export",
	    "export-name": "Name of xslx file",
	    "export-all-sheets": "Export all sheets",
	    // add link
	    "link-title": "Add Link",
	    "link-name": "Text",
	    "link-url": "URL",
	    //images
	    "image": "Image",
	    "add-image-cell": "Add to cell",
	    "add-image-top": "Add above cells",
	    //charts
	    "graph": "Graph",
	    "add-sparkline": "Add to cell",
	    "add-chart": "Add above cells",
	    //controls
	    "controls": "Controls",
	    "add-checkbox": "Add checkbox",
	    "add-radio": "Add radio group",
	    //conditional format labels
	    "display": "Display",
	    "value": "Value",
	    // confirm messages
	    "range-remove-confirm": "Are you sure you want to remove the range permanently?",
	    "sheet-remove-confirm": "Are you sure you want to remove the sheet permanently?",
	    "merge-cell-confirm": "Only the left top value will remain after merging. Continue?",
	    "error-range": "The range is incorrect!",
	    "error-link": "The link is incorrect!",
	    //print
	    "print": "Print",
	    "print-title": "Before you print..",
	    "print-settings": "General settings",
	    "print-paper": "Paper size",
	    "print-layout": "Layout",
	    "sheets": "Sheets:",
	    "selection": "Selected cells",
	    "borderless": "Hide gridlines",
	    "sheet-names": "Show sheet names",
	    "skip-rows": "Skip empty rows",
	    "margin": "Hide margins",
	    "page-letter": "Letter",
	    "page-a4": "A4 (210x297mm)",
	    "page-a3": "A3 (297x420mm)",
	    "page-width": "Page width",
	    "page-actual": "Actual Size",
	    "page-portrait": "Portrait",
	    "page-landscape": "Landscape",
	    "external-ui": "External UI",
	    "print-borders": "Show print borders",
	    //comment
	    "comment": "Comment",
	    //resize
	    "width": "Width",
	    "height": "Height",
	    "fit-content": "Fit to content",
	    "default-size": "Reset to default",
	    //views
	    "edit-view": "Edit",
	    "remove-view": "Remove",
	    "chart-edit": "Edit chart",
	    "chart-common": "Common",
	    "chart-series": "Series",
	    "chart-extras": "Extras",
	    "export-view": "Download",
	    "export-view-pdf": "PDF document",
	    "export-view-png": "PNG image",
	    "export-view-excel": "Excel file",
	    "line-chart": "Line",
	    "area-chart": "Area",
	    "bar-chart": "Bar",
	    "donut-chart": "Donut",
	    "pie-chart": "Pie",
	    "radar-chart": "Radar",
	    "spline-chart": "Spline",
	    "splinearea-chart": "Spline Area",
	    "scatter-chart": "Scatter",
	    "chart-scale": "Scale",
	    "chart-x-axis": "X axis",
	    "chart-y-axis": "Y axis",
	    "chart-lines": "Lines",
	    "chart-scale-color": "Scale color",
	    "chart-xAxis-title": "Title",
	    "chart-yAxis-title": "Title",
	    "chart-col-xAxis": "Use left column as xAxis",
	    "chart-col-yAxis": "Use left column as yAxis",
	    "chart-row-xAxis": "Use top row as xAxis",
	    "chart-row-yAxis": "Use top row as yAxis",
	    "chart-xAxis-range": "Range",
	    "chart-yAxis-origin": "Origin",
	    "chart-yAxis-start": "Start",
	    "chart-yAxis-end": "End",
	    "chart-yAxis-step": "Step",
	    "chart-yAxis-note": "* Set all the following parameters to see the effect",
	    "chart-legend": "Legend",
	    "chart-row-legend": "Use top row as legend",
	    "chart-col-legend": "Use left column as legend",
	    "chart-legend-range": "Legend range",
	    "chart-legend-align": "Align",
	    "chart-legend-left": "Left",
	    "chart-legend-right": "Right",
	    "chart-legend-center": "Center",
	    "chart-legend-valign": "Vertical align",
	    "chart-legend-top": "Top",
	    "chart-legend-middle": "Middle",
	    "chart-legend-bottom": "Bottom",
	    "chart-item": "Data",
	    "stacked-chart": "Stacked",
	    "horizontal-chart": "Horizontal",
	    "chart-range": "Range",
	    "chart-series-color": "Color",
	    "add-line": "Add line",
	    "chart-type": "Type",
	    "chart-tooltip": "Tooltips",
	    "chart-label": "Labels",
	    "chart-data-from": "Data series from",
	    "chart-columns": "columns",
	    "chart-rows": "rows",
	    "chart-markers": "Markers",
	    "chart-markers-square": "Square",
	    "chart-markers-triangle": "Triangle",
	    "chart-markers-diamond": "Diamond",
	    "chart-markers-round": "Round",
	    "chart-pie-3d": "3D",
	    "chart-radar-circle": "Circled lines",
	    //validation
	    "add-cell-validation": "Add data validation",
	    "remove-cell-validation": "Remove data validation",
	    "highlight-invalid-data": "Highlight invalid data",
	    "remove-highlight-invalid-data": "Remove highlighting of invalid data",
	    "validation-placeholder-text": "Some text",
	    "validation-type": "Type",
	    "validation-any": "Any",
	    "validation-date": "Date",
	    "validation-number": "Number",
	    "validation-text": "Text",
	    "validation-text-length": "Text length",
	    "validation-range": "Range",
	    "validation-integer": "Integers only",
	    "validation-ignore-empty": "Ignore empty",
	    "validation-input-message": "Input message",
	    "validation-error-title": "Error title",
	    "validation-error-message": "Error message",
	    "validation-error-handle": "Error handle",
	    "validation-error-stop": "Stop",
	    "validation-error-warning": "Warning",
	    "validation-error-information": "Information",
	    "validation-error-title-text": "Error",
	    "validation-error-message-text": "Invalid data",
	    "validation-error-save": "Save",
	    "validation-error-restore": "Restore"
	  },
	  tooltips: {
	    "color": "Font color",
	    "background": "Background color",
	    "font-family": "Font family",
	    "font-size": "Font size",
	    "text-align": "Horizontal align",
	    "vertical-align": "Vertical align",
	    "borders": "Borders",
	    "borders-no": "Clear borders",
	    "borders-left": "Left border",
	    "borders-top": "Top border",
	    "borders-right": "Right border",
	    "borders-bottom": "Bottom border",
	    "borders-all": "All borders",
	    "borders-outer": "Outer borders",
	    "borders-top-bottom": "Top and bottom borders",
	    "borders-color": "Border color",
	    "align-left": "Left align",
	    "align-center": "Center align",
	    "align-right": "Right align",
	    "align-top": "Top align",
	    "align-middle": "Middle align",
	    "align-bottom": "Bottom align",
	    "span": "Merge",
	    "wrap": "Text wrap",
	    "undo": "Undo",
	    "redo": "Redo",
	    "format": "Number format",
	    "increase-decimals": "Increase decimal places",
	    "decrease-decimals": "Decrease decimal places",
	    "font-weight": "Bold",
	    "font-style": "Italic",
	    "underline": "Underline",
	    "strike": "Strike",
	    "hide-gridlines": "Hide/show gridlines",
	    "hide-headers": "Hide/show headers",
	    "show-formulas": "Hide/show formulas",
	    "print-borders": "Hide/show print borders",
	    "create-filter": "Create/remove filters",
	    "freeze-columns": "Freeze/unfreeze columns",
	    "add-range": "Set name for the selected range",
	    "conditional": "Conditional formatting",
	    "add-sheet": "Add Sheet",
	    "lock-cell": "Lock/unlock cell",
	    "clear": "Clear",
	    "add-link": "Add link",
	    "row": "Rows",
	    "column": "Columns",
	    "sheet": "Sheet",
	    "add-image": "Image",
	    "add-sparkline": "Graph",
	    "add-comment": "Comment",
	    "increase-indent": "Increase indent",
	    "decrease-indent": "Decrease indent",
	    "scale": "Scale",
	    "show-sheet": "Show sheet",
	    "validation": "Validation",
	    "controls": "Controls",
	    "graph": "Graph",
	    "image": "Image"
	  },
	  menus: {
	    "remove-sheet": "Remove sheet",
	    "rename-sheet": "Rename sheet",
	    "hide-sheet": "Hide sheet",
	    "file": "File",
	    "new": "New",
	    "new-sheet": "New sheet",
	    "excel-import": "Import from Excel",
	    "excel-export": "Export to Excel",
	    "sheet": "Sheets",
	    "copy-sheet": "Copy to new sheet",
	    "edit": "Edit",
	    "undo": "Undo",
	    "redo": "Redo",
	    "columns": "Columns",
	    "insert-column": "Insert column",
	    "delete-column": "Delete column",
	    "show-column": "Show column",
	    "hide-column": "Hide column",
	    "resize-column": "Resize column",
	    "rows": "Rows",
	    "insert-row": "Insert row",
	    "delete-row": "Delete row",
	    "show-row": "Show row",
	    "hide-row": "Hide row",
	    "resize-row": "Resize row",
	    "insert": "Insert",
	    "conditional-format": "Conditional format",
	    "common": "common",
	    "text": "text",
	    "clear": "Clear",
	    "clear-value": "Values",
	    "clear-style": "Styles",
	    "clear-conditional-formats": "Conditional formats",
	    "clear-dropdown-editors": "Dropdowns",
	    "clear-filters": "Filters",
	    "clear-comments": "Comments",
	    "clear-all": "All",
	    "image": "Image",
	    "add-image-cell": "Add to cell",
	    "add-image-top": "Add above cells",
	    "graph": "Graph",
	    "add-sparkline": "Add to cell",
	    "add-chart": "Add above cells",
	    "controls": "Controls",
	    "add-checkbox": "Add checkbox",
	    "add-radio": "Add radio group",
	    "data": "Data",
	    "add-link": "Add link",
	    "add-range": "Named ranges",
	    "sort": "Sort",
	    "sort-asc": "Sort A to Z",
	    "sort-desc": "Sort Z to A",
	    "view": "View",
	    "freeze-columns": "Freeze/unfreeze columns",
	    "freeze-rows": "Freeze/unfreeze rows",
	    "hide-gridlines": "Hide/show gridlines",
	    "hide-headers": "Hide/show headers",
	    "show-formulas": "Hide/show formulas",
	    "create-filter": "Create/remove filters",
	    "add-dropdown": "Add dropdown",
	    "lock-cell": "Lock/unlock cell",
	    "print": "Print",
	    "print-borders": "Hide/show print borders",
	    "add-comment": "Comment",
	    "cut": "Cut",
	    "copy": "Copy",
	    "paste": "Paste",
	    "special-paste": "Special paste",
	    "paste-values": "Values",
	    "paste-formulas": "Formulas",
	    "paste-styles": "Styles",
	    "paste-conditions": "Conditional formats",
	    "paste-validation": "Validation",
	    "add-cell-validation": "Add data validation",
	    "remove-cell-validation": "Remove data validation",
	    "highlight-invalid-data": "Highlight invalid data",
	    "remove-highlight-invalid-data": "Remove highlighting of invalid data",
	    "validation": "Validation"
	  },
	  table: {
	    "math-error": "#ERROR!",
	    "math-ref-error": "#REF!",
	    "format-error": "INCORRECT FORMAT"
	  },
	  liveEditor: {
	    "edit": "Edit:",
	    "functions-syntax": Object.assign(Ar(), {
	      "IMAGE": [["Url", "Required. Image link"]],
	      "HYPERLINK": [["Link_location", "Required. The path and file name to the document to be opened. Link_location can refer to a place in a document — such as a specific cell or named range."], ["Friendly_name", "Optional. The jump text or numeric value that is displayed in the cell. Friendly_name is displayed in blue and is underlined. If friendly_name is omitted, the cell displays the link_location as the jump text."]],
	      "SPARKLINE": [["Range", "Required. Range or named range"], ["Type", "Required. Sparkline type"], ["Positive_color", "Required. Positive color"], ["Negative_color", "Required. Negative color"]],
	      "CHECKBOX": [["State", "Optional. Сheckbox state"]],
	      "RADIO": [["Y_position", "Required. Y-axis position in radio group"], ["X_position", "Required. X-axis position in radio group"], ["Row_count", "Required. Rows count in radio group"], ["Col_count", "Required. Сolumns count in radio group"], ["State", "Optional. Radio button state"]]
	    })
	  },
	  formats: {
	    "dateFormat": "mm/dd/yyyy",
	    "timeFormat": "hh:mm AM/PM",
	    "longDateFormat": "dd mmmm yyyy",
	    "fullDateFormat": "mm/dd/yyyy hh:mm AM/PM",
	    "parseDateTime": "%m/%d/%Y %G:%i:%s",
	    "parseDate": "%m/%d/%Y",
	    "currencies": ["{obj} €", "¥{obj}", "R$ {obj}", "{obj} rub."]
	  }
	};

	webix.i18n.spreadsheet = en;

	webix.protoUI({
	  name: "ssheet-align",
	  $cssName: "richselect",
	  $init: function (config) {
	    config.options = {
	      view: "datasuggest",
	      body: {
	        view: "ssheet-icons",
	        tooltip: {
	          template: "#tooltip#"
	        },
	        xCount: 3,
	        yCount: 1
	      },
	      data: config.data
	    };
	  }
	}, webix.ui.richselect);

	webix.protoUI({
	  name: "ssheet-borders-suggest",
	  defaults: {
	    width: 300
	  },
	  $init: function (config) {
	    var skin = webix.skin.$name;
	    config.body = {
	      margin: 6,
	      cols: [{
	        view: "ssheet-icons",
	        scroll: false,
	        select: true,
	        xCount: 4,
	        yCount: 2,
	        tooltip: {
	          template: function (obj) {
	            return webix.i18n.spreadsheet.tooltips["borders-" + obj.id];
	          }
	        },
	        on: {
	          onAfterSelect: function () {
	            var suggest = this.getParentView().getParentView();
	            suggest.updateMasterValue(true);
	          }
	        },
	        template: function (obj) {
	          var css = "webix_ssheet_button_icon webix_ssheet_icon ssi-borders-" + obj.value;
	          return "<span class='" + css + "'></span>";
	        },
	        data: config.data
	      }, {
	        view: "ssheet-separator"
	      }, {
	        rows: [{
	          view: "ssheet-color",
	          css: config.css,
	          name: config.name,
	          width: 68,
	          value: skin == "contrast" || skin == "dark" ? "#ffffff" : "#000000",
	          tooltip: webix.i18n.spreadsheet.tooltips["borders-color"],
	          title: "<span class='webix_icon wxi-pencil'></span>",
	          on: {
	            onChange: function () {
	              var suggest = this.getParentView().getParentView().getParentView();
	              suggest.updateMasterValue(false);
	            }
	          }
	        }, {
	          view: "richselect",
	          css: "webix_ssheet_border_type",
	          value: "thin",
	          suggest: {
	            fitMaster: false,
	            width: 130,
	            css: "webix_ssheet_suggest",
	            body: {
	              template: "<div class='webix_ssheet_border webix_ssheet_border_#id#'></div>"
	            },
	            data: [{
	              id: "thin"
	            }, {
	              id: "medium"
	            }, {
	              id: "thick"
	            }, {
	              id: "dashed"
	            }, {
	              id: "dotted"
	            }, {
	              id: "double"
	            }]
	          }
	        }, {}]
	      }]
	    };
	  },
	  updateMasterValue: function (hide) {
	    var value = this.getValue();
	    var master = webix.$$(this.config.master);
	    master.setValue(value, "user");
	    if (hide) this.hide();
	  },
	  setValue: function (value) {
	    if (value[0]) this.getList().select(value[0]);
	    if (value[1]) this.getColorView().setValue(value[1]);
	    if (value[2]) this.getTypeView().setValue(value[2]);
	  },
	  getValue: function () {
	    return [this.getList().getSelectedId(), this.getColorView().getValue() || "", this.getTypeView().getValue() || ""];
	  },
	  getList: function () {
	    return this.getBody().getChildViews()[0];
	  },
	  getColorView: function () {
	    return this.getBody().getChildViews()[2].getChildViews()[0];
	  },
	  getTypeView: function () {
	    return this.getBody().getChildViews()[2].getChildViews()[1];
	  },
	  getItemText: function () {
	    return "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-borders-all'>";
	  }
	}, webix.ui.suggest);
	webix.protoUI({
	  name: "ssheet-borders",
	  $cssName: "richselect",
	  $init: function (config) {
	    config.options = {
	      view: "ssheet-borders-suggest",
	      fitMaster: false,
	      data: config.data
	    };
	    this.$ready.push(webix.bind(function () {
	      this.getPopup().config.master = this.config.id;
	    }, this));
	  },
	  setValue: function (value, config) {
	    if (webix.isArray(value)) {
	      if (!this.config.value || value[0] != this.config.value[0] || value[1] != this.config.value[1]) {
	        this.getPopup().setValue(value);
	      }
	      var old = this.config.value;
	      this.config.value = value;
	      if (value[0]) this.callEvent("onChange", [this.getValue(), old, config]);
	    }
	    return value;
	  },
	  getValue: function () {
	    return this.getPopup().getValue().join(",");
	  },
	  getList: function () {
	    return this.getPopup().getBody().getChildViews()[0];
	  },
	  getColorView: function () {
	    return this.getPopup().getBody().getChildViews()[1].getChildViews()[0];
	  }
	}, webix.ui.richselect);

	// toolbar: color selector
	webix.protoUI({
	  $cssName: "colorboard",
	  name: "ssheet-colorboard",
	  defaults: {
	    height: 196,
	    width: 244,
	    css: "webix_ssheet_colorboard",
	    palette: [["#000000", "#434343", "#666666", "#999999", "#b7b7b7", "#cccccc", "#d9d9d9", "#efefef", "#f3f3f3", "#ffffff"], ["#980000", "#ff0000", "#ff9900", "#ffff00", "#00ff00", "#00ffff", "#4a86e8", "#0000ff", "#9900ff", "#ff00ff"], ["#e6b8af", "#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#c9daf8", "#cfe2f3", "#d9d2e9", "#ead1dc"], ["#dd7e6b", "#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#a4c2f4", "#9fc5e8", "#b4a7d6", "#d5a6bd"], ["#cc4125", "#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6d9eeb", "#6fa8dc", "#8e7cc3", "#c27ba0"], ["#a61c00", "#cc0000", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3c78d8", "#3d85c6", "#674ea7", "#a64d79"], ["#85200c", "#990000", "#b45f06", "#bf9000", "#38761d", "#134f5c", "#1155cc", "#0b5394", "#351c75", "#741b47"], ["#5b0f00", "#660000", "#783f04", "#7f6000", "#274e13", "#0c343d", "#1c4587", "#073763", "#20124d", "#4c1130"]]
	  },
	  $init: function () {
	    this.attachEvent("onSelect", function (value) {
	      this.getParentView().setMasterValue({
	        value: value
	      }, false, "user");
	    });
	  }
	}, webix.ui.colorboard);
	webix.protoUI({
	  $cssName: "richselect",
	  name: "ssheet-color",
	  defaults: {
	    css: "webix_ssheet_color",
	    icon: "wxi-menu-down",
	    suggest: {
	      borderless: true,
	      body: {
	        view: "ssheet-colorboard"
	      }
	    }
	  },
	  $init: function () {
	    this.$view.className += " webix_ssheet_color";
	  },
	  $renderInput: function (config, divStart, id) {
	    var color = this.renderColor.call(this);
	    divStart = divStart.replace(/([^>]>)(.*)(<\/div)/, function (match, p1, p2, p3) {
	      return p1 + config.title + color + p3;
	    });
	    return webix.ui.colorpicker.prototype.$renderInput.call(this, config, divStart, id);
	  },
	  $setValue: function (value) {
	    value = value || "";
	    this.getColorNode().style.backgroundColor = value;
	  },
	  renderColor: function () {
	    return "<div class='webix_ssheet_cp_color' style='background-color:" + this.config.value + ";'> </div>";
	  },
	  getColorNode: function () {
	    return this.$view.firstChild.firstChild.childNodes[1];
	  },
	  $renderIcon: function () {
	    return webix.ui.text.prototype.$renderIcon.apply(this, arguments);
	  }
	}, webix.ui.colorpicker);

	function _arrayLikeToArray(r, a) {
	  (null == a || a > r.length) && (a = r.length);
	  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
	  return n;
	}
	function _arrayWithHoles(r) {
	  if (Array.isArray(r)) return r;
	}
	function _arrayWithoutHoles(r) {
	  if (Array.isArray(r)) return _arrayLikeToArray(r);
	}
	function _assertThisInitialized(e) {
	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  return e;
	}
	function _callSuper(t, o, e) {
	  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
	}
	function _classCallCheck(a, n) {
	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties(e, r) {
	  for (var t = 0; t < r.length; t++) {
	    var o = r[t];
	    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
	  }
	}
	function _createClass(e, r, t) {
	  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
	    writable: !1
	  }), e;
	}
	function _defineProperty(e, r, t) {
	  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
	    value: t,
	    enumerable: !0,
	    configurable: !0,
	    writable: !0
	  }) : e[r] = t, e;
	}
	function _getPrototypeOf(t) {
	  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
	    return t.__proto__ || Object.getPrototypeOf(t);
	  }, _getPrototypeOf(t);
	}
	function _inherits(t, e) {
	  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
	  t.prototype = Object.create(e && e.prototype, {
	    constructor: {
	      value: t,
	      writable: !0,
	      configurable: !0
	    }
	  }), Object.defineProperty(t, "prototype", {
	    writable: !1
	  }), e && _setPrototypeOf(t, e);
	}
	function _isNativeReflectConstruct() {
	  try {
	    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	  } catch (t) {}
	  return (_isNativeReflectConstruct = function () {
	    return !!t;
	  })();
	}
	function _iterableToArray(r) {
	  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
	}
	function _iterableToArrayLimit(r, l) {
	  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
	  if (null != t) {
	    var e,
	      n,
	      i,
	      u,
	      a = [],
	      f = !0,
	      o = !1;
	    try {
	      if (i = (t = t.call(r)).next, 0 === l) {
	        if (Object(t) !== t) return;
	        f = !1;
	      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
	    } catch (r) {
	      o = !0, n = r;
	    } finally {
	      try {
	        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
	      } finally {
	        if (o) throw n;
	      }
	    }
	    return a;
	  }
	}
	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _possibleConstructorReturn(t, e) {
	  if (e && ("object" == typeof e || "function" == typeof e)) return e;
	  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
	  return _assertThisInitialized(t);
	}
	function _setPrototypeOf(t, e) {
	  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
	    return t.__proto__ = e, t;
	  }, _setPrototypeOf(t, e);
	}
	function _slicedToArray(r, e) {
	  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
	}
	function _toConsumableArray(r) {
	  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
	}
	function _toPrimitive(t, r) {
	  if ("object" != typeof t || !t) return t;
	  var e = t[Symbol.toPrimitive];
	  if (void 0 !== e) {
	    var i = e.call(t, r || "default");
	    if ("object" != typeof i) return i;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return ("string" === r ? String : Number)(t);
	}
	function _toPropertyKey(t) {
	  var i = _toPrimitive(t, "string");
	  return "symbol" == typeof i ? i : i + "";
	}
	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, _typeof(o);
	}
	function _unsupportedIterableToArray(r, a) {
	  if (r) {
	    if ("string" == typeof r) return _arrayLikeToArray(r, a);
	    var t = {}.toString.call(r).slice(8, -1);
	    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
	  }
	}

	var group = {
	  value: null,
	  set: function (method, master) {
	    if (!this.value) {
	      this.start();
	      method.call(master);
	      this.end();
	    } else method.call(master);
	  },
	  start: function () {
	    this.value = webix.uid();
	  },
	  end: function () {
	    this.value = null;
	  }
	};

	function addMathMethods() {
	  lr(z);
	  lr(J);
	  lr(Jt);
	  lr(O);
	}
	function init$F(view) {
	  var math = {
	    IMAGE: function (url) {
	      return "<img class=\"webix_ssheet_cimage\" src=\"".concat(webix.template.escape(url), "\">");
	    },
	    HYPERLINK: function (url, text) {
	      var escape = webix.template.escape;
	      var attrs;
	      if (url[0] == "#") attrs = "href=\"javascript:void(0);\" class=\"webix_ssheet_ref\" data-ref=\"".concat(escape(url.substr(1)), "\"");else attrs = "target=\"blank\" href=\"".concat(escape(url), "\"");
	      return "<a ".concat(attrs, ">").concat(escape(text || url), "</a>");
	    },
	    SPARKLINE: function (arr, type, color1, color2) {
	      var config = {
	        type: type,
	        color: color1,
	        negativeColor: color2,
	        paddingX: 2,
	        paddingY: 2
	      };
	      if (type == "donut") webix.extend(config, {
	        type: "pie",
	        donut: 1
	      }, true);else if (type == "barH") webix.extend(config, {
	        type: "bar",
	        horizontal: 1
	      }, true);
	      for (var i = 0; i < arr.length; i++) arr[i] = arr[i] || 0;
	      var tableConfig = view.$$("cells").config;

	      //[FIXME] we do not know from which cell the method was called, so this is not the real width and height
	      var isCircle = config.type == "pie" || type == "radar";
	      var width = isCircle ? 100 : tableConfig.columnWidth;
	      var height = isCircle ? 100 : tableConfig.rowHeight;
	      return webix.Sparklines.getTemplate(config)(arr, {
	        width: width,
	        height: height
	      });
	    },
	    CHECKBOX: function (state) {
	      return !!state;
	    },
	    RADIO: function (rowPos, colPos, rowCount, colCount, state) {
	      return !!state;
	    }
	  };
	  var keys = Object.keys(math);
	  keys.forEach(function (key, i) {
	    return addMath(view, key, math[key], i == keys.length - 1);
	  });
	  var grid = view.$$("cells");
	  grid.on_click["ssheet_checkbox"] = function (ev, cell) {
	    var value = view.getCellValue(cell.row, cell.column, false);
	    view.setCellValue(cell.row, cell.column, "=checkbox(".concat(value ? 0 : 1, ")"));
	    view.refresh();
	  };
	  grid.on_click["ssheet_radio"] = function (ev, cell) {
	    setRadioState(view, cell.row, cell.column);
	  };
	  view.attachEvent("onCommand", function (action) {
	    if (action.id == "add-radio") view.addRadio();else if (action.id == "add-checkbox") view.addCheckbox();
	  });
	}
	function setRadioState(view, row, column, state, page) {
	  var math = view.getCellValue(row, column, true, page);
	  if (/^=(radio)\(/i.test(math)) {
	    var _math$match$1$split$m = math.match(/\((.+?)\)/)[1].split(",").map(function (v) {
	        return v.trim();
	      }),
	      _math$match$1$split$m2 = _slicedToArray(_math$match$1$split$m, 4),
	      rowPos = _math$match$1$split$m2[0],
	      colPos = _math$match$1$split$m2[1],
	      rowCount = _math$match$1$split$m2[2],
	      colCount = _math$match$1$split$m2[3];
	    if (state === false) {
	      view.setCellValue(row, column, "=radio(".concat(rowPos, ", ").concat(colPos, ", ").concat(rowCount, ", ").concat(colPos, ", 0)"), page);
	      view.refresh();
	    } else {
	      var value = view.getCellValue(row, column, false);
	      if (!value) group.set(function () {
	        for (var r = 1; r <= rowCount; r++) for (var c = 1; c <= colCount; c++) view.setCellValue(row - rowPos + r, column - colPos + c, "=radio(".concat(r, ", ").concat(c, ", ").concat(rowCount, ", ").concat(colCount, ", ").concat(r == rowPos && c == colPos ? 1 : 0, ")"), page);
	        view.refresh();
	      });
	    }
	  }
	}
	function addMath(view, name, handler, sort) {
	  name = name.toUpperCase();
	  hr(name, handler);
	  if (view.$$("liveEditor")) {
	    [webix.$$(view.$$("liveEditor").config.suggest).getList(), webix.$$(view.$$("formulaButton").config.popup).getBody()].forEach(function (list) {
	      if (!list.exists(name)) {
	        list.add({
	          id: name,
	          value: name
	        });
	        if (sort) list.sort("value", "asc", "string");
	      }
	    });
	  }
	}
	function getJsDateFromExcel(excelDate) {
	  var date = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
	  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
	}
	function getExcelDateFromJs(jsDate) {
	  var returnDateTime = 25569 + (jsDate.getTime() - jsDate.getTimezoneOffset() * 60000) / (86400 * 1000);
	  return returnDateTime.toString();
	}
	function getMathTemplate(math, value) {
	  if (typeof math == "string") {
	    if (/^=(checkbox)\(/i.test(math)) return "<span class='webix_icon ssheet_checkbox wxi-checkbox-".concat(value ? "marked" : "blank", "'></span>");else if (/^=(radio)\(/i.test(math)) return "<span class='webix_icon ssheet_radio wxi-radiobox-".concat(value ? "marked" : "blank", "'></span>");
	  }
	  return value;
	}

	var m16a = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addMath: addMath,
		addMathMethods: addMathMethods,
		getExcelDateFromJs: getExcelDateFromJs,
		getJsDateFromExcel: getJsDateFromExcel,
		getMathTemplate: getMathTemplate,
		init: init$F,
		setRadioState: setRadioState
	});

	function getJsDate(value) {
	  if ((value || value === 0) && !(value instanceof Date) && !isNaN(value)) {
	    value = getJsDateFromExcel(value);
	  }
	  return value;
	}
	function getExcelDate(value) {
	  if (value && value instanceof Date) {
	    value = getExcelDateFromJs(value);
	  }
	  return value;
	}
	webix.protoUI({
	  $cssName: "datepicker",
	  name: "ssheet-datepicker",
	  getValue: function () {
	    var value = webix.ui.datepicker.prototype.getValue.apply(this);
	    return getExcelDate(value) || "";
	  },
	  $prepareValue: function (value) {
	    value = getJsDate(value);
	    return webix.ui.datepicker.prototype.$prepareValue.apply(this, [value]);
	  }
	}, webix.ui.datepicker);
	webix.protoUI({
	  $cssName: "daterangepicker",
	  name: "ssheet-daterangepicker",
	  getValue: function () {
	    var value = webix.ui.datepicker.prototype.getValue.apply(this);
	    if (value) {
	      value = webix.copy(value);
	      value.start = getExcelDate(value.start);
	      value.end = getExcelDate(value.end);
	    }
	    return value || "";
	  },
	  $prepareValue: function (value) {
	    if (!value) {
	      value = {
	        start: null,
	        end: null
	      };
	    } else if (!value.start && !value.end) value = {
	      start: value
	    };
	    value.start = getJsDate(value.start);
	    value.end = getJsDate(value.end);
	    return webix.ui.daterangepicker.prototype.$prepareValue.apply(this, [value]);
	  }
	}, webix.ui.daterangepicker);

	webix.protoUI({
	  $cssName: "window",
	  name: "ssheet-dialog",
	  $init: function (config) {
	    this.$view.className += " webix_ssheet_dialog";
	    this.config.buttons = config.buttons;
	    this.config.close = true;
	  },
	  getBodyConfig: function (content) {
	    content.borderless = true;
	    var elements = this.getFormElements(content);
	    var config = {
	      view: "form",
	      css: "webix_ssheet_form",
	      padding: webix.skin.$active.layoutPadding.form,
	      elements: elements
	    };
	    return config;
	  },
	  getFormElements: function (content) {
	    var elements;
	    if (webix.isArray(content)) elements = content;else {
	      elements = [];
	      elements.push(content);
	    }
	    if (this.config.buttons) {
	      elements.push({
	        height: 1
	      });
	      elements.push({
	        margin: 10,
	        cols: [{}, {
	          view: "button",
	          css: "ssheet_cancel_button",
	          label: webix.i18n.spreadsheet.labels.cancel,
	          autowidth: true,
	          click: function () {
	            var parentView = this.getTopParentView();
	            parentView.callEvent("onCancelClick", []);
	          }
	        }, {
	          view: "button",
	          label: webix.i18n.spreadsheet.labels.save,
	          hotkey: "enter",
	          autowidth: true,
	          click: function () {
	            var parentView = this.getTopParentView();
	            parentView.callEvent("onSaveClick", []);
	          }
	        }]
	      });
	    }
	    return elements;
	  },
	  body_setter: function (value) {
	    if (_typeof(value) == "object") {
	      if (webix.isUndefined(value.padding)) value.padding = webix.skin.$active.layoutPadding.form;
	      if (value.view == "form" && value.elements) {
	        value.elements = this.getFormElements(value.elements);
	        if (!value.css) value.css = "webix_ssheet_form";
	      } else value = this.getBodyConfig(value);
	    }
	    return webix.ui.window.prototype.body_setter.call(this, value);
	  },
	  defaults: {
	    move: true,
	    head: "Dialog",
	    buttons: true,
	    close: true,
	    //we need to retain focus in table area, so disabling the autofocusing feature
	    autofocus: false,
	    width: 350
	  }
	}, webix.ui.window, webix.IdSpace);
	webix.protoUI({
	  $cssName: "datatable",
	  name: "ssheet-dialog-table",
	  $init: function (config) {
	    if (!config.headerRowHeight) config.headerRowHeight = 34;
	    this.$view.className += " webix_ssheet_dialog_table";
	  }
	}, webix.ui.datatable);

	webix.protoUI({
	  name: "ssheet-suggest-labels",
	  defaults: {
	    fitMaster: false,
	    padding: 0,
	    borderless: true
	  },
	  $init: function () {
	    this.$view.className += " webix_ssheet_suggest";
	  },
	  getItemText: function (id) {
	    return this.getList().getItem(id).value;
	  }
	}, webix.ui.suggest);
	webix.protoUI({
	  name: "ssheet-form-suggest",
	  defaults: {
	    padding: 0,
	    borderless: true
	  },
	  $init: function () {
	    this.$view.className += " webix_ssheet_suggest";
	  }
	}, webix.ui.suggest);
	webix.protoUI({
	  $cssName: "colorpicker",
	  name: "ssheet-colorpicker",
	  $init: function () {
	    this.$view.className += " webix_ssheet_colorpicker";
	  },
	  defaults: {
	    suggest: {
	      borderless: true,
	      body: {
	        view: "ssheet-colorboard"
	      }
	    }
	  }
	}, webix.ui.colorpicker);

	webix.protoUI({
	  name: "formlate",
	  setValue: function (a) {
	    return this.setHTML(a);
	  },
	  getValue: function () {
	    return "";
	  }
	}, webix.ui.template);

	webix.protoUI({
	  name: "ssheet-icons",
	  $cssName: "dataview",
	  $init: function () {
	    this.$view.className += " webix_ssheet_dataview";
	  },
	  defaults: {
	    borderless: true,
	    template: "<span class='webix_ssheet_button_icon #css#' ></span>",
	    type: {
	      width: 36,
	      height: 36
	    }
	  }
	}, webix.ui.dataview);

	webix.protoUI({
	  name: "ssheet-suggest",
	  defaults: {
	    padding: 0,
	    css: "webix_ssheet_suggest"
	  }
	}, webix.ui.contextmenu);

	function init$E(view) {
	  var events = [{
	    name: "onSheetAdd",
	    type: "insert"
	  }, {
	    name: "onSheetRemove",
	    type: "remove"
	  }, {
	    name: "onSheetRename",
	    type: "rename"
	  }, {
	    name: "onSheetStateChange",
	    type: "state"
	  }, {
	    name: "onCellChange"
	  }, {
	    name: "onStyleChange"
	  }, {
	    name: "onAction"
	  }, {
	    name: "onRowOperation"
	  }, {
	    name: "onColumnOperation"
	  }, {
	    name: "onAfterConditionSet"
	  }, {
	    name: "onAfterRangeSet"
	  }, {
	    name: "onAfterSpan"
	  }, {
	    name: "onAfterSplit"
	  }, {
	    name: "onZoom"
	  }, {
	    name: "onAfterFilter",
	    view: "cells"
	  }, {
	    name: "onRowResize",
	    view: "cells"
	  }, {
	    name: "onColumnResize",
	    view: "cells"
	  }];
	  var thread;
	  var _loop = function () {
	    var handler = events[i];
	    (handler.view ? view.$$(handler.view) : view).attachEvent(handler.name, function (name, newName, _, p1, p2) {
	      if (view._loading_data || view._type_change) return;
	      var params;
	      if (handler.type) params = handler.type == "rename" ? [handler.type, newName, name] : [handler.type, name];else {
	        var activeSheet = view.getActiveSheet();
	        if (handler.name == "onAction" && newName.page && newName.page != activeSheet) activeSheet = newName.page;else if (["onAfterSplit", "onAfterSpan", "onCellChange", "onColumnOperation", "onRowOperation"].indexOf(handler.name) != -1 && p1 != activeSheet) activeSheet = p1;else if (["onStyleChange", "onAfterConditionSet"].indexOf(handler.name) != -1 && p2 != activeSheet) activeSheet = p2;else if (handler.name == "onZoom") activeSheet = _;
	        params = ["update", activeSheet];
	      }
	      clearTimeout(thread);
	      thread = webix.delay(function () {
	        return view.callEvent("onChange", params);
	      });
	    });
	  };
	  for (var i = 0; i < events.length; i++) {
	    _loop();
	  }
	  view.attachEvent("onChange", function () {
	    save(view, "all");
	  });
	}
	function save(view, name, data) {
	  var save = view.config.save;
	  var url;
	  if (!save) return;
	  if (name == "all") {
	    if (!save.all) return;
	    data = {
	      data: view.serialize({
	        sheets: true
	      })
	    };
	    url = save.all;
	  } else {
	    url = typeof save === "string" ? save + "/" + name : save[name];
	  }
	  url = webix.proxy.$parse(url);
	  if (url) {
	    if (typeof url === "function") return url(name, data);
	    if (url.$proxy && url.save) return url.save(view, data, null, null);
	    var ajax = webix.ajax();
	    if (name === "all") ajax.headers({
	      "Content-type": "application/json"
	    });
	    ajax.post(url, data);
	  }
	}

	var m27 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$E,
		save: save
	});

	var decode = {};
	var encode = {};
	var alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	function indexToHeader(index) {
	  var chars = alpha.length;
	  var quotient = Math.floor(--index / chars);
	  if (quotient > 0) return indexToHeader(quotient) + alpha[index % chars];
	  return alpha[index % chars];
	}
	function updateMaxColumn(maxColumn) {
	  var lastColumn = Object.keys(encode).length;
	  for (var i = lastColumn + 1; i <= maxColumn; i++) {
	    var str = indexToHeader(i);
	    decode[str] = i;
	    encode[i] = str;
	  }
	}
	function adress(text) {
	  var size;
	  for (var i = 0; i < text.length; i++) if (text.charCodeAt(i) < 59) {
	    size = i;
	    break;
	  }
	  var col = text.substr(0, size);
	  var row = text.substr(size);
	  return [row * 1, decode[col]];
	}
	function range(text, view, page) {
	  var nind = text.indexOf("!");
	  var sheet = page || "";

	  //parse sheet names
	  if (nind !== -1) {
	    sheet = text.substr(0, nind);
	    if (sheet[0] === "'") sheet = sheet.substr(1, sheet.length - 2);
	    text = text.substr(nind + 1);
	  }
	  var parts = text.split(":");
	  if (parts.length != 2) {
	    if (view) {
	      var code = view.ranges.getCode(text, sheet);
	      if (!code) {
	        // global named range
	        code = view.ranges.getCode(text, true);
	        if (!code) return null;
	      }
	      var rangeParts = code.split("!");
	      if (rangeParts[0] != page || view.getActiveSheet()) sheet = rangeParts[0].replace(/'/g, "");
	      code = rangeParts[1];
	      parts = code.split(":");
	    } else return null;
	  }
	  var d1 = adress(parts[0]);
	  var d2 = adress(parts[1]);
	  if (d1[0] && d1[1] && d2[0] && d2[1]) return [d1[0], d1[1], d2[0], d2[1], sheet];
	}
	function escapeSheet(sheet) {
	  return sheet.indexOf(" ") == -1 ? sheet : "'".concat(sheet, "'");
	}
	function toRange(x, y, x2, y2, sheet) {
	  return (sheet ? escapeSheet(sheet) + "!" : "") + encode[y] + x + ":" + encode[y2] + x2;
	}
	function toSheetRange(x, y, sheet) {
	  return (sheet ? escapeSheet(sheet) + "!" : "") + x + ":" + y;
	}
	function rangeObj(text, view) {
	  if (_typeof(text) === "object") return text;
	  var a = range(text, view);
	  return {
	    start: {
	      row: a[0],
	      column: a[1]
	    },
	    end: {
	      row: a[2],
	      column: a[3]
	    },
	    sheet: a[4]
	  };
	}
	function eachRange(text, view, callback, data) {
	  var range = rangeObj(text);
	  for (var row = range.start.row; row <= range.end.row; row++) {
	    for (var column = range.start.column; column <= range.end.column; column++) {
	      callback(view, {
	        row: row,
	        column: column
	      }, data);
	    }
	  }
	}
	function isRange(text) {
	  if (typeof text == "string") {
	    var cells = text.split(":");
	    if (cells.length == 2) {
	      for (var i = 0; i < cells.length; i++) {
	        var parts = cells[i].split("!");
	        if (!isCell(parts.pop())) return;
	      }
	      return true;
	    }
	  }
	}
	var cellTest = /^[A-Z]+[0-9]+$/;
	function isCell(text) {
	  return cellTest.test(text);
	}
	function changeRange(text, name, inc, start) {
	  var updated = false;
	  if (isRange(text)) {
	    var _range = range(text),
	      _range2 = _slicedToArray(_range, 5),
	      r1 = _range2[0],
	      c1 = _range2[1],
	      r2 = _range2[2],
	      c2 = _range2[3],
	      sheet = _range2[4];

	    //ranges like B2:A1
	    if (r1 > r2) {
	      var _ref = [r2, r1];
	      r1 = _ref[0];
	      r2 = _ref[1];
	    }
	    if (c1 > c2) {
	      var _ref2 = [c2, c1];
	      c1 = _ref2[0];
	      c2 = _ref2[1];
	    }
	    if (name === "row" && start.row <= r2) {
	      if (inc < 0 && start.row < r1 || inc > 0 && start.row <= r1) r1 += inc;
	      r2 += inc;
	      if (r2 < r1) return "";
	      updated = true;
	    } else if (name === "column" && start.column <= c2) {
	      if (inc < 0 && start.column < c1 || inc > 0 && start.column <= c1) c1 += inc;
	      c2 += inc;
	      if (c2 < c1) return "";
	      updated = true;
	    }
	    if (updated) text = toRange(r1, c1, r2, c2, sheet);
	  }
	  return text;
	}

	var toolbarSizes = {
	  width: 38,
	  margin: 7,
	  paddingY: 1,
	  sectorPadding: 5,
	  sectorMargin: 0
	};

	// default styles for toolbar elements
	var defaultStyles = {
	  "color": "#666666",
	  "background": "#ffffff",
	  "font-family": "'PT Sans', Tahoma",
	  "font-size": "15",
	  "text-align": "left",
	  "vertical-align": "middle",
	  "white-space": "nowrap"
	};
	var fonts = {
	  material: "'Roboto', sans-serif",
	  mini: "'Roboto', sans-serif",
	  flat: "'PT Sans', Tahoma",
	  compact: "'PT Sans', Tahoma",
	  contrast: "'PT Sans', Tahoma",
	  willow: "'Open Sans', sans-serif",
	  dark: "'Open Sans', sans-serif"
	};
	function setSkinDefaults() {
	  var skin = webix.skin.$name;
	  toolbarSizes.width = webix.skin.$active.inputHeight + 2;
	  toolbarSizes.titleHeight = skin == "mini" || skin == "compact" ? 18 : 20;
	  if (webix.skin.$active.spreadsheet) return defaultStyles = webix.skin.$active.spreadsheet;
	  defaultStyles["font-family"] = fonts[skin];
	  if (skin == "contrast") {
	    defaultStyles.background = "#393939";
	    defaultStyles.color = "#ffffff";
	  } else if (skin == "material" || skin == "mini") {
	    defaultStyles.color = "#475466";
	  } else if (skin == "willow") {
	    defaultStyles.color = "#2C2F3C";
	  } else if (skin == "dark") {
	    defaultStyles.background = "#2A2B2D";
	    defaultStyles.color = "#ffffff";
	  }
	}

	function find(arr, func) {
	  var result = findIndex(arr, func);
	  return arr[result];
	}
	function findIndex(arr, func) {
	  var result = -1;
	  for (var i = 0; result < 0 && i < arr.length; i++) {
	    if (func(arr[i])) result = i;
	  }
	  return result;
	}
	function getDimension(data, spans, rows, cols) {
	  for (var i = 0; i < data.length; i++) {
	    // data[i] - [ row, column, value, style]
	    var line = data[i];
	    if (line[0] > rows) rows = line[0];
	    if (line[1] > cols) cols = line[1];
	  }
	  if (spans) for (var _i = 0; _i < spans.length; _i++) {
	    // spans[i] - [ row, column, colCount, rowCount ]
	    var spanEndRow = spans[_i][0] + spans[_i][3] - 1;
	    var spanEndCol = spans[_i][1] + spans[_i][2] - 1;
	    if (spanEndRow > rows) rows = spanEndRow;
	    if (spanEndCol > cols) cols = spanEndCol;
	  }
	  return [rows * 1, cols * 1];
	}

	//do not change order, it will break server side compatibility
	//add new options to the end of this list
	var style_names = ["color", "background", "text-align", "font-family", "font-size", "font-style", "underline", "font-weight", "vertical-align", "wrap", "borders", "format", "border-right", "border-bottom", "border-left", "border-top", "strike", "indent"];
	var _style_map = {
	  format: function () {
	    return "";
	  },
	  "text-align": {
	    left: function () {
	      return "justify-content:flex-start;";
	    },
	    center: function () {
	      return "justify-content:center;text-align:center;";
	    },
	    right: function () {
	      return "justify-content:flex-end;text-align:right;";
	    }
	  },
	  "vertical-align": {
	    top: function () {
	      return "align-items:flex-start;";
	    },
	    middle: function () {
	      return "align-items:center;";
	    },
	    bottom: function () {
	      return "align-items:flex-end;";
	    }
	  },
	  wrap: {
	    wrap: function () {
	      return "white-space: normal !important;";
	    }
	  },
	  "border-left": function (obj, zoom) {
	    return getBorderCss("border-left", obj, zoom);
	  },
	  "border-top": function (obj, zoom) {
	    return getBorderCss("border-top", obj, zoom);
	  },
	  "border-right": function (obj, zoom) {
	    return getBorderCss("border-right", obj, zoom);
	  },
	  "border-bottom": function (obj, zoom) {
	    return getBorderCss("border-bottom", obj, zoom);
	  },
	  "font-weight": function (obj) {
	    //Roboto bold - font-weight:500 (looks better, than 700). Roboto is default font for material skins.
	    if (obj["font-weight"] == "bold") {
	      var family = obj["font-family"] || defaultStyles["font-family"];
	      return "font-weight:" + (family == "'Roboto', sans-serif" ? 500 : 700) + ";";
	    }
	    return "";
	  },
	  underline: function (obj) {
	    var underline = obj.underline == "underline" ? "underline" : "";
	    if (underline) {
	      var strike = obj.strike == "strike" ? "line-through" : "";
	      return "text-decoration: ".concat(underline, " ").concat(strike, ";");
	    }
	    return "";
	  },
	  strike: function (obj) {
	    if (obj.underline != "underline" && obj.strike == "strike") return "text-decoration: line-through;";
	    return "";
	  },
	  indent: function (obj, zoom) {
	    var count = obj.indent * 1;
	    if (count > 0) {
	      var pos = obj["text-align"] == "right" ? "right" : "left";
	      return {
	        innerCss: "margin-".concat(pos, ":").concat((count * 8 + 12) * zoom, "px;")
	      }; // 12 - default cell margin
	    }
	  },
	  "font-size": function (obj, zoom) {
	    var fontSize = obj["font-size"];
	    if (zoom != 1) fontSize = obj["font-size"].replace("px", "") * zoom + "px";
	    return "font-size:" + fontSize + ";";
	  }
	};
	function getBorderCss(pos, obj, zoom) {
	  var border = obj[pos];
	  if (border) {
	    var _border$split = border.split(","),
	      _border$split2 = _slicedToArray(_border$split, 2),
	      color = _border$split2[0],
	      type = _border$split2[1];
	    type = type || "thin";
	    var size = 1;
	    if (type == "medium") size = 2;else if (type == "thick" || type == "double") size = 3;
	    size = size * zoom + "px";
	    if (["thin", "medium", "thick"].indexOf(type) != -1) type = "solid";
	    return "".concat(pos, ": ").concat(size, " ").concat(type, " ").concat(color, " !important;");
	  }
	  return "";
	}
	var border_checks = {
	  "border-left": function (cell, area, mode) {
	    return cell.column == area.start.column || mode == "no";
	  },
	  "border-right": function (cell, area, mode) {
	    return cell.column == area.end.column || mode == "all" || mode == "no";
	  },
	  "border-top": function (cell, area, mode) {
	    return cell.row == area.start.row || mode == "no";
	  },
	  "border-bottom": function (cell, area, mode) {
	    return cell.row == area.end.row || mode == "all" || mode == "no";
	  }
	};
	var _style_handlers = {
	  "borders": function (view, style, value, cell) {
	    var area = view.$$("cells").getSelectArea();
	    value = value.split(",");
	    var type = value[0];
	    var color = value[1];
	    var lineStyle = value[2];
	    var modes = ["border-left", "border-right", "border-bottom", "border-top"];
	    if (type == "top-bottom") {
	      modes = ["border-top", "border-bottom"];
	    } else if (type != "no" && type != "all" && type != "outer") modes = ["border-" + type];
	    for (var i = 0; i < modes.length; i++) {
	      var mode = modes[i];
	      var result = view.callEvent("onAction", ["check-borders", {
	        row: cell.row,
	        column: cell.column,
	        area: area,
	        type: type,
	        mode: mode
	      }]);
	      if (result === true || border_checks[mode](cell, area, type)) {
	        var border = type == "no" ? "" : "".concat(color, ",").concat(lineStyle);
	        style = _updateStyle(view, style, mode, border, cell);
	      }
	    }
	    return style;
	  }
	};
	var sizeEl;
	function init$D(view) {
	  view.attachEvent("onStyleSet", function (name, value) {
	    return _applyStyles(view, name, value);
	  });
	  view.attachEvent("onDataParse", function (data) {
	    return _parse$3(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    return _serialize$3(view, data);
	  });
	  view.attachEvent("onReset", function () {
	    return reset$b(view);
	  });
	  view.attachEvent("onUndo", function (type, row, column, style) {
	    if (type == "style") _undoStyle(view, row, column, style);
	  });
	  reset$b(view);
	  if (!sizeEl) sizeEl = webix.html.create("DIV", {
	    style: "visibility:hidden; position:absolute; top:0px; left:0px; height:auto;"
	  }, "");
	}
	function reset$b(view) {
	  view._styles = {};
	  view._styles_cache = {};
	  view._styles_max = 1;
	  var prefix = ".wss_" + view.$index;
	  webix.html.removeStyle(prefix);
	}
	function zoomStyles(view) {
	  var data = {};
	  _serialize$3(view, data);
	  reset$b(view);
	  _parse$3(view, data, true);
	}
	function getStyle$1(view, cell, page, exportStyles) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = view._mData.getPage(page);
	    if (sheet) {
	      var obj = sheet.getCell(cell.row - 1, cell.column - 1);
	      if (obj && obj.style) {
	        var styles = find(view._sheets, function (sheet) {
	          return sheet.name == page;
	        }).content.styles || [];
	        var style = find(styles, function (stl) {
	          return stl[0] == obj.style;
	        });
	        if (style) return {
	          id: obj.style,
	          text: style[1],
	          props: styleFromText(style[1])
	        };
	      }
	    }
	  } else {
	    var _obj = view._mPage.getCell(cell.row - 1, cell.column - 1);
	    var span = view.$$("cells").getSpan(cell.row, cell.column);
	    if (span && (exportStyles || span[0] == cell.row && span[1] == cell.column)) {
	      var spanStyles = span[5].split(" ");
	      for (var i = 0; i < spanStyles.length; i++) {
	        var spanStyle = view._styles[spanStyles[i]];
	        if (spanStyle) return spanStyle;
	      }
	    }
	    if (_obj && _obj.style) return view._styles[_obj.style];
	  }
	  return null;
	}
	function getFormat$1(view, row, column) {
	  var obj = view._mPage.getCell(row - 1, column - 1);
	  return obj && obj.format || "";
	}

	// undo
	function _undoStyle(view, row, column, style) {
	  var cell = {
	    row: row,
	    column: column
	  };
	  setStyle$1(view, cell, style);
	}
	function _serialize$3(view, obj) {
	  var styles = [];
	  for (var key in view._styles_cache) styles.push([view._styles_cache[key].id, key]);
	  obj.styles = styles;
	}
	function addStyle$1(view, props, origin, page) {
	  var style = {
	    props: styleFromText(style_names.map(function () {
	      return "";
	    }).join(";"))
	  };
	  if (origin) for (var key in origin.props) style.props[key] = origin.props[key];
	  for (var _key in props) style.props[_key] = props[_key];
	  style.text = styleToText(style);
	  var sheet;
	  if (page && page != view.getActiveSheet()) {
	    sheet = find(view._sheets, function (sheet) {
	      return sheet.name == page;
	    });
	    if (!sheet) return null;
	    if (sheet.content.styles) {
	      var sameStyle = find(sheet.content.styles, function (stl) {
	        return stl[1] == style.text;
	      });
	      if (sameStyle) return webix.extend(style, {
	        id: sameStyle[0]
	      });
	    } else sheet.content.styles = [];
	  } else {
	    var cache = view._styles_cache[style.text];
	    if (cache) return cache;
	  }
	  _addStyle(view, style, false, sheet);
	  return style;
	}
	function _parse$3(view, obj, zoom) {
	  if (obj.styles) for (var i = 0; i < obj.styles.length; i++) {
	    var styleObj = obj.styles[i];
	    var style = {
	      id: styleObj[0],
	      text: styleObj[1],
	      props: styleFromText(styleObj[1])
	    };
	    _addStyle(view, style, true);
	  }
	  if (!zoom) for (var _i = 0; _i < obj.data.length; _i++) {
	    var _obj$data$_i = _slicedToArray(obj.data[_i], 4),
	      row = _obj$data$_i[0],
	      column = _obj$data$_i[1],
	      css = _obj$data$_i[3];
	    if (css) update_style_data(view, row, column, view._styles[css]);
	  }
	}
	function _applyStyles(view, name, value) {
	  group.set(function () {
	    view.eachSelectedCell(function (cell) {
	      var span = view.$$("cells").getSpan(cell.row, cell.column);
	      if (!span || span && span[0] == cell.row && span[1] == cell.column) _applyCellStyles(view, cell, name, value);
	    });
	  });
	  view.refresh();
	}
	function _applyCellStyles(view, cell, name, value) {
	  var ostyle = getStyle$1(view, cell);
	  if (name == "indent") {
	    var oldVal = (ostyle && ostyle.props[name] || 0) * 1;
	    if (!oldVal && value == -1) return;
	    value += oldVal;
	  }
	  var nstyle = _updateStyle(view, ostyle, name, value, cell);
	  if (nstyle && nstyle != ostyle) _setStyle(view, cell, nstyle);
	}
	function _updateStyle(view, style, name, value, cell) {
	  if (_style_handlers[name]) {
	    return _style_handlers[name](view, style, value, cell);
	  }
	  if (style && style.props[name] == value) return style;
	  var nstyle = {
	    text: "",
	    id: 0,
	    props: style ? webix.copy(style.props) : {}
	  };
	  nstyle.props[name] = value;
	  nstyle.text = styleToText(nstyle);
	  var cache = view._styles_cache[nstyle.text];
	  if (cache) return cache;
	  _addStyle(view, nstyle);
	  return nstyle;
	}
	function update_style_data(view, row, column, style, page) {
	  var isActiveSheet = !page || page == view.getActiveSheet();
	  var sheet = isActiveSheet ? view._mPage : view._mData.getPage(page);
	  if (sheet) {
	    var obj = sheet.getCell(row - 1, column - 1, true);
	    obj.style = style && style.id;
	    obj.format = style && style.props.format;
	    if (!isActiveSheet) {
	      var data = find(view._sheets, function (sheet) {
	        return sheet.name == page;
	      }).content.data;
	      var item = find(data, function (item) {
	        return item[0] == row && item[1] == column;
	      });
	      if (item) item[3] = obj.style;else data.push([row, column, "", obj.style]);
	    }
	  }
	}
	function setStyle$1(view, cell, style, page) {
	  return _setStyle(view, cell, style, page);
	}
	function setRangeStyle$1(view, range, style, page) {
	  eachRange(range, view, function (view, cell, data) {
	    return _setStyle(view, cell, data.style, data.page);
	  }, {
	    style: style,
	    page: page
	  });
	}
	function getTextSize(view, text, css, baseWidth) {
	  sizeEl.innerHTML = text;
	  sizeEl.style.width = baseWidth ? baseWidth + "px" : "auto";
	  sizeEl.className = "webix_table_cell webix_cell " + css;
	  view._table.$view.appendChild(sizeEl);
	  var width = Math.max(0, sizeEl.offsetWidth + 1);
	  var height = Math.max(0, sizeEl.offsetHeight + 1);
	  view._table.$view.removeChild(sizeEl);
	  sizeEl.innerHTML = "";
	  return {
	    width: width,
	    height: height
	  };
	}
	function _setStyle(view, cell, style, page) {
	  var old = getStyle$1(view, cell, page);
	  var activeSheet = view.getActiveSheet();
	  if (!page) page = activeSheet;
	  if (view.callEvent("onBeforeStyleChange", [cell.row, cell.column, style, old, page])) {
	    group.set(function () {
	      var format = style && style.props.format || null;
	      var oldFormat = old && old.props.format || null;
	      var formatChanged = format != oldFormat;
	      if (!formatChanged || formatChanged && view.callEvent("onBeforeFormatChange", [cell.row, cell.column, format, oldFormat, page])) {
	        update_style_data(view, cell.row, cell.column, style, page);
	        view.callEvent("onStyleChange", [cell.row, cell.column, style, old, page]);
	        if (formatChanged) view.callEvent("onFormatChange", [cell.row, cell.column, format, oldFormat, page]);
	        view.saveCell(cell.row, cell.column, page);
	        if (page == activeSheet) {
	          var sel = view.getSelectedId();
	          if (sel && sel.row == cell.row && sel.column == cell.column) view.callEvent("onCommand", [{
	            id: "toolbar-update"
	          }]);
	        }
	      }
	    });
	  }
	}
	function _buildCssString(view, style) {
	  var css = "";
	  var innerCss = "";
	  for (var key in style) {
	    if (style[key]) {
	      if (_style_map[key]) {
	        if (_style_map[key][style[key]]) css += _style_map[key][style[key]](style);else if (typeof _style_map[key] == "function") {
	          var outCss = _style_map[key](style, view._zoom);
	          if (_typeof(outCss) == "object") {
	            css += outCss.css || "";
	            innerCss += outCss.innerCss || "";
	          } else css += outCss;
	        }
	      } else css += key + ":" + style[key] + ";";
	    }
	  }
	  return {
	    css: css,
	    innerCss: innerCss
	  };
	}
	function _addStyle(view, style, silent, sheet) {
	  if (sheet && sheet.name != view.getActiveSheet()) {
	    var index = 1;
	    while (!style.id || find(sheet.content.styles, function (stl) {
	      return stl[0] == style.id;
	    })) style.id = "wss" + index++;
	    sheet.content.styles.push([style.id, style.text]);
	  } else {
	    view._styles_cache[style.text] = style;
	    while (!style.id || view._styles[style.id]) style.id = "wss" + view._styles_max++;
	    view._styles[style.id] = style;
	    var _buildCssString2 = _buildCssString(view, style.props),
	      css = _buildCssString2.css,
	      innerCss = _buildCssString2.innerCss;
	    var prefix = ".wss_" + view.$index;
	    webix.html.addStyle(prefix + " ." + style.id + "{" + css + "}", prefix);
	    webix.html.addStyle(prefix + " ." + style.id + " div:first-child{" + innerCss + "}", prefix);
	  }
	  if (!silent) save(view, "styles", {
	    name: style.id,
	    text: style.text,
	    page: sheet ? sheet.name : view.getActiveSheet()
	  });
	}
	function styleToText(style) {
	  var id = [];
	  for (var i = 0; i < style_names.length; i++) id.push(style.props[style_names[i]]);
	  return id.join(";");
	}
	function styleFromText(text) {
	  var parts = text.split(";");
	  var props = {};
	  for (var i = 0; i < style_names.length; i++) props[style_names[i]] = parts[i];
	  return props;
	}
	function clearRangeStyle(view, range, page) {
	  group.set(function () {
	    eachRange(range, view, function (view, cell) {
	      var style = getStyle$1(view, cell, page);
	      if (style) setStyle$1(view, cell, null, page);
	    });
	  });
	}
	function compactStyles$1(view) {
	  var serialized = view.serialize();
	  serialized.styles = removeUnusedStyles(serialized);
	  reset$b(view);
	  _parse$3(view, serialized);
	}
	function removeUnusedStyles(serialized) {
	  var data = serialized.data;
	  var styles = serialized.styles;
	  var used = {};
	  for (var i = 0; i < data.length; i++) {
	    var name = data[i][3];
	    if (name) used[name] = 1;
	  }
	  var newStyles = [];
	  for (var _i2 = 0; _i2 < styles.length; _i2++) {
	    var _name = styles[_i2][0];
	    if (used[_name]) newStyles.push(styles[_i2]);
	  }
	  return newStyles;
	}

	var m5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addStyle: addStyle$1,
		clearRangeStyle: clearRangeStyle,
		compactStyles: compactStyles$1,
		getFormat: getFormat$1,
		getStyle: getStyle$1,
		getTextSize: getTextSize,
		init: init$D,
		removeUnusedStyles: removeUnusedStyles,
		setRangeStyle: setRangeStyle$1,
		setStyle: setStyle$1,
		styleFromText: styleFromText,
		styleToText: styleToText,
		style_names: style_names,
		zoomStyles: zoomStyles
	});

	function init$C(view) {
	  view.attachEvent("onDataParse", function (data) {
	    return load$b(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data, config) {
	    return serialize$f(view, data);
	  });
	}
	var formatHelpers = {};
	var currencies = [];
	var defaultFormats = {
	  common: 1
	};
	var formatsCount;
	var formatCache;
	var formats;
	var formatSources;
	function getCurrencySymbol(format) {
	  return webix.template(format)("");
	}
	function setDefaultFormats() {
	  var formatsLocale = webix.i18n.spreadsheet.formats;
	  currencies = [webix.i18n.price];
	  currencies = currencies.concat(webix.copy(formatsLocale.currencies));
	  currencies = currencies.map(function (format) {
	    var id = getCurrencySymbol(format);
	    return {
	      format: format,
	      id: id,
	      value: id.trim()
	    };
	  });
	  formats = {};
	  formatsCount = 0;
	  formatSources = {};
	  formatCache = {};
	  formatHelpers = {
	    price: {
	      getFormat: function (value, extra) {
	        extra.css = "webix_ssheet_format_price";
	        return webix.i18n.priceFormat(value);
	      },
	      values: webix.extend({
	        zeros: webix.i18n.priceSettings.decimalSize,
	        symbol: webix.i18n.price.replace("{obj}", ""),
	        separator: 1,
	        negative: 1,
	        type: "price"
	      }, getDelimiters("price"))
	    },
	    "int": {
	      getFormat: function (value, extra) {
	        extra.css = "webix_ssheet_format_int";
	        return webix.i18n.numberFormat(value);
	      },
	      values: webix.extend({
	        zeros: webix.i18n.decimalSize,
	        separator: 1,
	        negative: 1,
	        type: "int"
	      }, getDelimiters("int"))
	    },
	    percent: {
	      getFormat: function (value, extra) {
	        extra.css = "webix_ssheet_format_percent";
	        return Math.round(value * 100) + "%";
	      },
	      values: webix.extend({
	        zeros: 0,
	        separator: 0,
	        negative: 1,
	        type: "percent"
	      }, getDelimiters("percent"))
	    },
	    date: {
	      getFormat: function (value, extra) {
	        extra.css = "webix_ssheet_format_date";
	        return format2code(formatsLocale.dateFormat, getDelimiters("date"))(value);
	      },
	      values: {
	        type: "date",
	        date: formatsLocale.dateFormat
	      }
	    },
	    string: {
	      getFormat: function (value, extra) {
	        extra.css = "webix_ssheet_format_text";
	        return value;
	      },
	      values: {
	        type: "string"
	      }
	    }
	  };
	  for (var i in formatHelpers) {
	    defaultFormats[i] = 1;
	    formatSources[i] = serializeFormat(formToValues(i, formatHelpers[i].values));
	    formatCache[formatSources[i]] = i;
	  }
	}
	function getDelimiters(type) {
	  if (type == "price") return {
	    groupSign: webix.i18n.priceSettings.groupDelimiter,
	    decimalSign: webix.i18n.priceSettings.decimalDelimiter
	  };else return {
	    groupSign: webix.i18n.groupDelimiter,
	    decimalSign: webix.i18n.decimalDelimiter
	  };
	}
	function serialize$f(view, data) {
	  var formats = [];
	  for (var i in formatSources) {
	    if (!defaultFormats[i])
	      //exclude default formats
	      formats.push([i, formatSources[i]]);
	  }
	  data.formats = formats;
	}
	function load$b(view, data) {
	  var i,
	    formats = data.formats;
	  if (formats) for (i = 0; i < formats.length; i++) createFormatName(formats[i][1], formats[i][0]);
	}
	function getFormat(name) {
	  return formatHelpers[name] ? formatHelpers[name].getFormat : formatHelpers[name];
	}
	function getFormatSource(name, toexcel) {
	  if (toexcel) {
	    var parsed = parseFormat({
	      values: formatHelpers[name].values,
	      format: formatSources[name]
	    });
	    return serializeFormat(parsed, true);
	  } else return formatSources[name];
	}
	function createFormatName(str, values) {
	  if (formatCache[str]) return formatCache[str];
	  var name = _typeof(values) == "object" ? "fmt" + formatsCount : values;
	  formatsCount++;
	  formats[name] = str;
	  if (typeof values == "string") values = formatToForm(str);
	  webix.extend(values, getDelimiters("custom"));
	  formatHelpers[name] = {
	    getFormat: format2code(str, {
	      decimalSign: values.decimalSign,
	      groupSign: values.groupSign
	    }),
	    values: values
	  };
	  formatSources[name] = str;
	  formatCache[str] = name;
	  return name;
	}
	function addFormat(view, row, column, format, type, page) {
	  if (!type) type = {
	    format: format,
	    type: "custom"
	  };
	  var old = view.getStyle(row, column, page);
	  var name = createFormatName(format, type);
	  view._sheets.map(function (sheet) {
	    if (!sheet.content.formats) sheet.content.formats = [];
	    if (!find(sheet.content.formats, function (format) {
	      return format[0] == name;
	    })) sheet.content.formats.push([name, format]);
	  });
	  var nev = addStyle$1(view, {
	    format: name
	  }, old, page);
	  view.setStyle(row, column, nev, page);
	}
	function removeFormat(view, row, column) {
	  var old = view.getStyle(row, column);
	  var nev = addStyle$1(view, {
	    format: ""
	  }, old);
	  view.setStyle(row, column, nev);
	}
	function splitFormat(str) {
	  var conditional = str.match(/.*\[[><=].*/g);
	  var parts = str.split(";");
	  if (!conditional) {
	    if (parts.length > 1) {
	      parts[0] = (parts.length > 2 ? "[>0]" : "[>=0]") + parts[0];
	      parts[1] = "[<0]" + parts[1];
	      if (parts[2]) parts[2] = "[=0]" + parts[2];
	    }
	  }
	  return parts;
	}
	function format2code(str, delimiters) {
	  var errorMessage = webix.i18n.spreadsheet.table["format-error"];
	  var parts = splitFormat(str);
	  var code = ["var spaces = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\";"];
	  for (var i = 0; i < parts.length; i++) {
	    var separated = separateFmt(parts[i]);
	    code.push(genCode(separated.condition, separated.color.toLowerCase(), separated.symbol, separated.fmt, i, parts.length > 0, delimiters));
	  }
	  var method;
	  try {
	    method = new Function("val", "extra", "try{ ".concat(code.join("\n"), " return val; } catch(err) { return \"").concat(errorMessage, "\"; }"));
	  } catch (err) {
	    method = function () {
	      return errorMessage;
	    };
	  }
	  return method;
	}
	function genCode(check, color, symbol, line, ind, isAbs, delimiters) {
	  var str = "";
	  if (check) {
	    if (!ind) str += "if";else str += "else if";
	    if (check[0] === "=") check = "=" + check;
	    str += "(val" + check + "){";
	    if (isAbs) str += "val = Math.abs(val);";
	  }
	  if (color) str += "extra.css = \"webix_ssheet_format_" + color + "\";";
	  str += genFormatCode(line, delimiters, symbol);
	  return str + (check ? "}" : "");
	}
	var dateTypes = {
	  "yy": "%y",
	  "yyyy": "%Y",
	  "m": "%n",
	  "mm": "%m",
	  "mmm": "%M",
	  "mmmm": "%F",
	  "mmmmm": "%F",
	  //not supported by webix
	  "d": "%j",
	  "dd": "%d",
	  "ddd": "%D",
	  "dddd": "%l"
	};
	var timeTypes = {
	  "h": "%G",
	  "hh": "%H",
	  "m": "%i",
	  //not supported by webix
	  "mm": "%i",
	  "s": "%s",
	  //not supported by webix
	  "ss": "%s",
	  "AM/PM": "%A"
	};
	var dateOrder = Object.keys(dateTypes).sort(function (a, b) {
	  return b.length - a.length;
	});
	var timeOrder = Object.keys(timeTypes).sort(function (a, b) {
	  return b.length - a.length;
	});
	function excelDateToWebix(text, lastDateType) {
	  var typesOrder = [{
	    name: "date",
	    order: dateOrder,
	    types: dateTypes
	  }, {
	    name: "time",
	    order: timeOrder,
	    types: timeTypes
	  }];

	  // "m"/"mm" format can be either date (%n/%m) or time (%i), so check last date type
	  var basedOnLast = /^m{1,2}(?!m)/.test(text);
	  if (basedOnLast && lastDateType != "date") typesOrder.reverse();
	  for (var i = 0; i < typesOrder.length; i++) {
	    var type = typesOrder[i];
	    for (var j = 0; j < type.order.length; j++) if (text.indexOf(type.order[j]) == 0) return {
	      format: type.types[type.order[j]],
	      length: type.order[j].length,
	      type: type.name
	    };
	  }
	}
	function genFormatCode(line, delimiters, symbol) {
	  if (!line) return "return val;";
	  var str = "return \"\"";
	  var isQuote;
	  var fmt = "";
	  var multiply = 1;
	  var comma, numberPlaceholder, textPlaceholder;
	  var date = [];
	  var lastDateType = "date";
	  var symbolPos;
	  if (symbol) {
	    var currency = find(currencies, function (val) {
	      return val.id == symbol;
	    });
	    symbolPos = "left";
	    if (currency) symbolPos = findIndex(currency.format.split("{obj}"), function (val) {
	      return val;
	    }) ? "right" : "left";
	  }
	  for (var i = 0; i < line.length; i++) {
	    var betweenPlaceholders = placeholder(line[i - 1]) && placeholder(line[i + 1]);
	    if (line[i] == "\"") {
	      if (webix.isUndefined(isQuote)) isQuote = i;else {
	        str += "+\"".concat(line.substr(isQuote + 1, i - isQuote - 1), "\"");
	        isQuote = undefined;
	      }
	      continue;
	    }
	    if (!webix.isUndefined(isQuote)) continue;
	    if (line[i] == "%") multiply = multiply * 100;
	    if (/[a-zA-Z]/.test(line[i])) {
	      var datePart = excelDateToWebix(line.substr(i), lastDateType);
	      if (datePart) {
	        if (numberPlaceholder || textPlaceholder) return "throw \"unexpected number placeholder\";";
	        date.push(datePart.format);
	        str += "/*date*/"; //update this value after date format is ready
	        lastDateType = datePart.type;
	        i += datePart.length - 1;
	        continue;
	      } else str += "+\"".concat(line[i], "\"");
	    } else if (line[i] === delimiters.decimalSign && betweenPlaceholders) {
	      fmt += delimiters.decimalSign;
	    } else if (line[i] == "@") {
	      if (numberPlaceholder || date.length) return "throw \"unexpected number placeholder\";";
	      if (!textPlaceholder) {
	        str += "+fmt";
	        textPlaceholder = true;
	      }
	      fmt += line[i];
	    } else if (placeholder(line[i])) {
	      if (textPlaceholder || date.length) return "throw \"unexpected text placeholder\";";
	      if (!numberPlaceholder) {
	        if (symbolPos == "left") str += "+\"".concat(symbol, "\"");
	        str += "+fmt";
	        if (symbolPos == "right") str += "+\"".concat(symbol, "\"");
	        numberPlaceholder = true;
	      }
	      fmt += line[i];
	    } else if (line[i] === delimiters.groupSign && betweenPlaceholders) comma = true;else str += "+\"".concat(line[i], "\"");
	  }
	  if (date.length) {
	    // 12-hour or 24-hour clock depends on AM/PM in format
	    if (date.indexOf("%A") != -1) date = date.map(function (datePart) {
	      switch (datePart) {
	        case "%G":
	          return "%g";
	        case "%H":
	          return "%h";
	        default:
	          return datePart;
	      }
	    });
	    for (var _i = 0; _i < date.length; _i++) str = str.replace("/*date*/", "+dateParts[".concat(_i, "]"));
	  }
	  return "\n\t\t".concat(date.length ? "val = (".concat(getJsDateFromExcel, ")(val); var dateParts = webix.Date.dateToStr(\"").concat(date.join(";"), "\")(val).split(\";\");") : "", "\n\t\t").concat(fmt ? "".concat(numberFormat(fmt, comma, delimiters, multiply), ";") : "", "\n\t\t").concat(str, ";");
	}
	function numberFormat(fmt, comma, delimiters, multiply) {
	  var str = "if(/^@+$/.test(\"".concat(fmt, "\") || isNaN(val)){ var fmt = val; }else {");
	  var decimal = delimiters.decimalSign;
	  var _getParts = getParts(fmt, decimal),
	    _getParts2 = _slicedToArray(_getParts, 2),
	    left = _getParts2[0],
	    right = _getParts2[1];
	  right = (right || "").split("").reverse().join("");

	  //calculate indexes in mask
	  var lzeros = left.indexOf("0");
	  if (lzeros >= 0) lzeros = left.length - lzeros;
	  var lfills = left.indexOf("?");
	  if (lfills >= 0) lfills = left.length - lfills;
	  var rzeros = right.indexOf("0");
	  if (rzeros >= 0) rzeros = right.length - rzeros;
	  var rfills = right.indexOf("?");
	  if (rfills >= 0) rfills = right.length - rfills;
	  var rmax = right.length;
	  str += "\n\tval = val*".concat(multiply, ";\n\tvar parts = val.toFixed(").concat(rmax, ").split(\".\");\n\tvar left = parts[0];\n\tvar lsize = left.length; \n\tvar right = parts[1] || \"\";\n\tif (left.length < ").concat(lzeros, ") left = \"0000000000\".substr(0, ").concat(lzeros, " - left.length)+left;\n\tif (left.length < ").concat(lfills, ") left = spaces.substr(0, 6*(").concat(lfills, " - left.length))+left;\n\tif (").concat(comma, ") {\n\t\tvar buf = [];\n\t\tvar start = 3;\n\t\twhile (lsize > start) { buf.push(left.substr(left.length-start,3)); start+=3; }\n\t\tvar last = left.substr(0,left.length-start+3);\n\t\tif (last !== \"-\")\n\t\t\tbuf.push(last);\n\t\telse\n\t\t\tbuf.push(\"-\"+buf.pop());\n\n\t\tleft = buf.reverse().join(\"").concat(delimiters.groupSign, "\");\n\t}\n\tif (right){\n\t\tvar zpoint = right.length-1;\n\t\twhile (zpoint >= ").concat(rzeros, "){\n\t\t\tif (right[zpoint] !== \"0\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tzpoint--;\n\t\t}\n\n\t\tif (zpoint <= right.length)\n\t\t\tright = right.substr(0, zpoint+1);\n\n\t\tif (right.length < ").concat(rfills, "){\n\t\t\tright += spaces.substr(0, 6*(").concat(rfills, " - right.length));\n\t\t}\n\t}\n\tvar fmt = left+(right?\"").concat(decimal, "\":\"\")+right;\n\t");
	  return str + "}\n";
	}
	function updateDecimals(fmt, inc, val) {
	  var parsed = parseFormat(fmt);
	  for (var i = 0; i < parsed.length; i++) {
	    if (parsed[i].decimals) {
	      if (inc > 0) parsed[i].right.placeholders += Array(inc + 1).join("0");else parsed[i].right.placeholders = parsed[i].right.placeholders.slice(0, inc);
	    } else {
	      var withoutText = !parsed[i].left.text && !parsed[i].right.text;
	      var withoutPlaceholders = !parsed[i].left.placeholders && !parsed[i].right.placeholders;
	      //check if cell value have decimals (not cell format)
	      if (inc < 0 && withoutText && withoutPlaceholders && webix.rules.isNumber(val) && val.indexOf(".") > -1) {
	        parsed[i].left.placeholders = "0";
	        parsed[i].right.placeholders = Array(val.split(".")[1].length).join(Array(inc + 1).join("0"));
	      }
	      //ignore text
	      else if (inc > 0 && (parsed[i].left.placeholders || withoutText)) {
	        parsed[i].left.placeholders = parsed[i].left.placeholders || "0";
	        parsed[i].right.placeholders = Array(inc + 1).join("0");
	        parsed[i].decimals = true;
	      }
	    }
	    parsed[i].decimals = parsed[i].right.placeholders.length > 0;
	  }
	  return serializeFormat(parsed);
	}
	function changeAreaDecimals(view, inc, row, column, page) {
	  var isActiveSheet = !page || page == view.getActiveSheet();
	  var sheet = isActiveSheet ? view._mPage : view._mData.getPage(page);
	  if (!sheet) return;
	  var cells = getCells$1(view, row, column);
	  if (cells.length == 0) return;
	  var obj = sheet.getCell(cells[0].row - 1, cells[0].column - 1);
	  var oldFormat = obj && obj.format;
	  var value = obj && obj.value ? obj.value.toString() : "";
	  if (webix.rules.isNumber(value) || oldFormat) {
	    group.set(function () {
	      for (var i = 0; i < cells.length; i++) changeCellDecimals(view, inc, cells[i], page, sheet);
	    });
	    if (isActiveSheet) {
	      view.refresh();
	      var format = getFormatName(view, cells[0].row, cells[0].column) || "common";
	      format = isCustom(format) ? "custom" : format;
	      view.callEvent("onCommand", [{
	        id: "toolbar-update",
	        name: "format",
	        value: format
	      }]);
	    }
	  }
	}
	function changeCellDecimals(view, inc, cell, page, sheet) {
	  var format;
	  var obj = sheet.getCell(cell.row - 1, cell.column - 1);
	  var oldFormat = obj && obj.format;
	  var value = obj && obj.value ? obj.value.toString() : "";
	  if (oldFormat) {
	    format = webix.copy({
	      values: formatHelpers[oldFormat].values,
	      format: getFormatSource(oldFormat)
	    });
	    format.format = updateDecimals(format, inc, value);
	    if (format.values && Object.prototype.hasOwnProperty.call(format.values, "zeros")) format.values.zeros = Math.max(format.values.zeros + inc, 0);
	  }
	  //add format for cell without format
	  else {
	    var zeros = webix.rules.isNumber(value) && value.split(".")[1] ? Math.max(value.split(".")[1].length + inc, 0) : Math.max(inc, 0);
	    format = {
	      values: {
	        negative: 1,
	        zeros: zeros,
	        separator: 0,
	        type: "int"
	      }
	    };
	    format.format = serializeFormat(formToValues(format.values.type, format.values));
	  }
	  addFormat(view, cell.row, cell.column, format.format, format.values, page);
	}
	function isCustom(name) {
	  return !defaultFormats[name];
	}
	function formToValues(type, formValues) {
	  if (type == "string") return [{
	    left: {
	      text: "@"
	    }
	  }];
	  if (formValues.date) return [{
	    left: {
	      text: formValues.date
	    }
	  }];
	  var values = [{
	    condition: ">=0",
	    left: {
	      text: ""
	    },
	    right: {
	      text: ""
	    }
	  }, {
	    condition: "<0",
	    left: {
	      text: ""
	    },
	    right: {
	      text: ""
	    }
	  }];
	  webix.extend(values, getDelimiters(type));
	  values[0].right.placeholders = values[1].right.placeholders = formValues.zeros ? Array(formValues.zeros + 1).join("0") : "";
	  values[0].separator = values[1].separator = formValues.separator && type != "percent";
	  values[0].left.placeholders = values[1].left.placeholders = values[0].separator ? "#" + values.groupSign + "0" : "0";
	  values[0].decimals = values[1].decimals = formValues.zeros ? true : false;
	  values[1].color = formValues.negative != 1 ? "red" : "";
	  values[1].left.text += formValues.negative < 3 ? "-" : "";
	  if (formValues.negative == 4) values[1].left.text += "(";
	  if (type === "percent") values[0].right.text = values[1].right.text += "%";else if (type === "price") {
	    var symbolId = formValues.symbol;
	    var currency = find(currencies, function (val) {
	      return val.id == symbolId;
	    });
	    var pos = findIndex(currency.format.split("{obj}"), function (val) {
	      return val;
	    }) ? "right" : "left";
	    values[0][pos].symbol = values[1][pos].symbol = symbolId;
	  }
	  if (formValues.negative == 4) values[1].right.text += ")";
	  return values;
	}
	function formatToForm(format) {
	  var formatsLocale = webix.i18n.spreadsheet.formats;
	  var dates = [formatsLocale.dateFormat, formatsLocale.timeFormat, formatsLocale.fullDateFormat, formatsLocale.longDateFormat];
	  var form = {
	    format: format,
	    type: "custom"
	  };
	  if (find(dates, function (date) {
	    return date == format;
	  })) {
	    webix.extend(form, {
	      type: "date",
	      date: format
	    }, true);
	  } else {
	    var _format$split = format.split(";"),
	      _format$split2 = _slicedToArray(_format$split, 2),
	      first = _format$split2[0],
	      second = _format$split2[1];
	    if (first && second) {
	      if (first.indexOf("[>=0]") == 0 && second.indexOf("[<0]") == 0) {
	        first = first.replace("[>=0]", "");
	        second = second.replace("[<0]", "");
	        var red;
	        if (second.indexOf("[red]") == 0) {
	          second = second.replace("[red]", "");
	          red = true;
	        }
	        if (second[0] == "-") {
	          second = second.substring(1);
	          form.negative = red ? 2 : 1;
	        } else if (red) {
	          if (second[0] == "(" && second[second.length - 1] == ")") {
	            form.negative = 4;
	            second = second.substring(1, second.length - 1);
	          } else form.negative = 3;
	        }
	        if (form.negative && first == second) {
	          var type = "int";
	          var priceBrackets = first.indexOf("[$") != -1;
	          if (first[first.length - 1] == "%") {
	            first = first.substring(0, first.length - 1);
	            type = "percent";
	          } else {
	            for (var i = 0; i < currencies.length; i++) {
	              var currency = currencies[i].id;
	              var isPrice = void 0;
	              if (priceBrackets) {
	                if (first.indexOf("[$".concat(currency, "]")) != -1) {
	                  first = first.replace("[$".concat(currency, "]"), "");
	                  isPrice = true;
	                }
	              } else if (first.indexOf(currency) != -1) {
	                first = first.replace(currency, "");
	                isPrice = true;
	              }
	              if (isPrice) {
	                type = "price";
	                form.symbol = currency;
	                break;
	              }
	            }
	          }
	          var delimiters = getDelimiters(type);
	          if (first.indexOf("#" + delimiters.groupSign) == 0) {
	            first = first.replace("#" + delimiters.groupSign, "");
	            form.separator = 1;
	          }
	          var _first$split = first.split(delimiters.decimalSign),
	            _first$split2 = _slicedToArray(_first$split, 2),
	            integer = _first$split2[0],
	            decimal = _first$split2[1];
	          if ((!integer || integer == "0") && (!decimal || /^[0]+$/.test(decimal))) {
	            form.type = type;
	            form.delimiters = delimiters;
	            form.zeros = decimal ? decimal.length : 0;
	          }
	        }
	      }
	    }
	  }
	  return form;
	}
	function serializeFormat(values, toExcel) {
	  var fmt = "";
	  for (var i = 0; i < values.length; i++) {
	    if (values[i].condition) fmt += "[" + values[i].condition + "]";
	    if (values[i].color) fmt += "[" + values[i].color + "]";
	    if (values[i].left) {
	      if (values[i].left.text) {
	        var leftText = values[i].left.text;
	        fmt += leftText;
	      }
	      if (values[i].left.symbol) fmt += "[$" + values[i].left.symbol + "]";
	      if (values[i].left.placeholders) {
	        var leftPlaceholders = values[i].left.placeholders;
	        fmt += toExcel ? leftPlaceholders.replace(values.groupSign, ",") : leftPlaceholders;
	      }
	    }
	    if (values[i].decimals) fmt += toExcel ? "." : values.decimalSign;
	    if (values[i].right) {
	      if (values[i].right.placeholders) fmt += values[i].right.placeholders;
	      if (values[i].right.symbol) fmt += "[$" + values[i].right.symbol + "]";
	      if (values[i].right.text) {
	        var rightText = values[i].right.text;
	        fmt += rightText;
	      }
	    }
	    if (i != values.length - 1) fmt += ";";
	  }
	  return fmt;
	}
	function parseFormat(fmt) {
	  var fmtParts = fmt.format.split(";");
	  var values = [];
	  var _loop = function () {
	    var separated = separateFmt(fmtParts[i]);
	    values[i] = {
	      color: separated.color,
	      condition: separated.condition,
	      left: {},
	      right: {}
	    };
	    var format = separated.fmt;
	    values.groupSign = fmt.values.groupSign;
	    values.decimalSign = fmt.values.decimalSign;
	    if (format.indexOf(values.groupSign) > -1) values[i].separator = true;
	    var sepFmtParts = getParts(format, values.decimalSign);
	    var left = sepFmtParts[0];
	    var right = sepFmtParts[1] || "";
	    if (sepFmtParts[1]) values[i].decimals = true;
	    left = getFmtPartValues(left, "left", values.groupSign);
	    right = getFmtPartValues(right, "right", values.groupSign);
	    values[i].left = {
	      text: left.leftText,
	      placeholders: left.placeholders
	    };
	    values[i].right = {
	      text: left.rightText + right.rightText,
	      placeholders: right.placeholders
	    };
	    var symbol = separated.symbol;
	    if (symbol) {
	      var currency = find(currencies, function (val) {
	        return val.id == symbol;
	      });
	      var pos = "left";
	      if (currency) pos = findIndex(currency.format.split("{obj}"), function (val) {
	        return val;
	      }) ? "right" : "left";
	      values[i][pos].symbol = symbol;
	    }
	  };
	  for (var i = 0; i < fmtParts.length; i++) {
	    _loop();
	  }
	  return values;
	}
	function getFmtPartValues(fmtPart, type, groupSign) {
	  var firstPlaceholder;
	  if (type == "left") {
	    firstPlaceholder = fmtPart.match(/[#?0]/);
	    firstPlaceholder = firstPlaceholder ? firstPlaceholder.index : Infinity;
	  }
	  var leftText = "";
	  var rightText = "";
	  var placeholders = "";
	  for (var k = 0; k < fmtPart.length; k++) {
	    if (!placeholder(fmtPart[k])) {
	      if (fmtPart[k] == groupSign && placeholder(fmtPart[k + 1]) && placeholder(fmtPart[k - 1])) {
	        placeholders += fmtPart[k];
	        continue;
	      }
	      if (type == "left") if (k < firstPlaceholder) {
	        leftText += fmtPart[k];
	        continue;
	      }
	      rightText += fmtPart[k];
	    } else placeholders += fmtPart[k];
	  }
	  return {
	    leftText: leftText,
	    rightText: rightText,
	    placeholders: placeholders
	  };
	}
	function separateFmt(line) {
	  var color = "";
	  var check = "";
	  var symbol = "";
	  var start = line.indexOf("[");
	  if (start != -1) {
	    if (line[1].match(/[><=]/)) {
	      var end = line.indexOf("]");
	      check = line.substr(start + 1, end - start - 1);
	      line = line.substr(end + 1);
	    }
	  }
	  start = line.indexOf("[$");
	  if (start != -1) {
	    var _end = start + line.substr(start).indexOf("]");
	    symbol = line.substr(start + 2, _end - start - 2);
	    line = line.substr(0, start) + line.substr(_end + 1);
	  }
	  start = line.indexOf("[");
	  if (start != -1) {
	    var _end2 = line.indexOf("]");
	    color = line.substr(start + 1, _end2 - start - 1);
	    line = line.substr(_end2 + 1);
	  }
	  return {
	    condition: check,
	    color: color,
	    symbol: symbol,
	    fmt: line
	  };
	}
	function getCells$1(view, row, column) {
	  if (row && column) {
	    if (_typeof(row) === "object" && _typeof(column) === "object") {
	      var cells = [];
	      for (var r = row.row; r <= column.row; r++) for (var c = row.column; c <= column.column; c++) cells.push({
	        row: r,
	        column: c
	      });
	      return cells;
	    } else return [{
	      row: row,
	      column: column
	    }];
	  } else return view.getSelectedId(true);
	}
	function placeholder(val) {
	  return val === "0" || val === "#" || val === "?";
	}
	function getParts(str, decimal) {
	  // it is nessesary to use "/" before decimal to escape regex special characters
	  var match = str.match("[#?0][/" + decimal + "][#?0]");
	  if (match) return [str.substring(0, match.index + 1), str.substring(match.index + 2)];else return [str];
	}

	//simple check: take into account only first condition
	function checkFormat(format, type, checkTime) {
	  format = format && format.fmt ? format.fmt : getFormatSource(format);
	  if (!format) return;
	  var parts = splitFormat(format);
	  var separated = separateFmt(parts[0]).fmt;
	  var quot;
	  if (separated) for (var i = 0; i < separated.length; i++) {
	    if (separated[i] == "\"") quot = !quot;
	    if (quot) continue;
	    if (type == "date" && /[a-zA-Z]/.test(separated)) {
	      var datePart = excelDateToWebix(separated.substr(i), "date");
	      if (datePart) {
	        if (checkTime) {
	          if (datePart.type == "time") return true;
	        } else return true;
	      }
	    }
	    if (type == "string" && separated[i] == "@") return true;
	  }
	}
	function getFormatName(view, row, col) {
	  var item = view._mPage.getCell(row - 1, col - 1);
	  return item && item.format || null;
	}
	function isDateInvalid(value) {
	  return value < -99974430.925 || value > 100025569.125;
	}
	function getDateEditFormat(view, row, col) {
	  var formatName = getFormatName(view, row, col);
	  var locale = webix.i18n.spreadsheet.formats;
	  var isTime = checkFormat(formatName, "date", true);
	  return webix.Date.dateToStr(locale[isTime ? "parseDateTime" : "parseDate"]);
	}
	function getFormatFromData(data, array) {
	  var styleName = array[3];
	  var fmt;
	  if (styleName) {
	    var style = find(data.styles, function (arr) {
	      return arr[0] == styleName;
	    });
	    if (style) {
	      style = style[1];
	      var fmtName = styleFromText(style).format;
	      if (fmtName) {
	        if (data.formats) fmt = find(data.formats, function (arr) {
	          return arr[0] == fmtName;
	        });
	        if (fmt) fmt = fmt[1];else fmt = getFormatSource(fmtName); //default formats (int, percent, etc.)
	      }
	    }
	  }
	  return fmt;
	}

	var m8 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addFormat: addFormat,
		changeAreaDecimals: changeAreaDecimals,
		checkFormat: checkFormat,
		get currencies () { return currencies; },
		formToValues: formToValues,
		format2code: format2code,
		get formatCache () { return formatCache; },
		get formatHelpers () { return formatHelpers; },
		get formatsCount () { return formatsCount; },
		getDateEditFormat: getDateEditFormat,
		getDelimiters: getDelimiters,
		getFormat: getFormat,
		getFormatFromData: getFormatFromData,
		getFormatName: getFormatName,
		getFormatSource: getFormatSource,
		init: init$C,
		isCustom: isCustom,
		isDateInvalid: isDateInvalid,
		removeFormat: removeFormat,
		serializeFormat: serializeFormat,
		setDefaultFormats: setDefaultFormats
	});

	function isChar(_char) {
	  var code = _char.charCodeAt(0);
	  return code <= 122 ? code >= 65 || code == 35 || code == 36 || code == 46 : code > 191;
	}
	function getLastCharIndex(str, includeNumbers) {
	  var lastChar = str.length;
	  for (var i = lastChar - 1; i >= 0; i--) {
	    if (!isChar(str[i])) {
	      if (includeNumbers && isNumber(str[i])) continue;
	      return lastChar;
	    } else lastChar = i;
	  }
	}
	function isNumber(_char2) {
	  var code = _char2.charCodeAt(0);
	  return code >= 48 && code <= 57;
	}
	function getWord(formula, i) {
	  var sheet = "";
	  var quotes = false;
	  var j;
	  for (j = i; j < formula.length; j++) {
	    var key = formula[j];
	    if (key === "'") {
	      quotes = !quotes;
	      continue;
	    }
	    if (!quotes) {
	      if (key == "!") {
	        if (formula[i] == "#")
	          //error
	          continue;else {
	          //multi-sheet math
	          sheet = formula.substr(i, j - i);
	          if (sheet[0] === "'") sheet = sheet.substr(1, sheet.length - 2);
	          i = j + 1;
	        }
	      } else if (!isChar(key) && !isNumber(key)) {
	        return [formula.substr(i, j - i), j, i, sheet];
	      }
	    }
	  }
	  return [formula.substr(i), j, i, sheet];
	}
	var operand = /^[A-Z$]+[0-9]+$/;
	function isPosition(text) {
	  return operand.test(text);
	}
	function position(word) {
	  var row = 0,
	    sum = 0,
	    x = 1,
	    mode = 1,
	    flags = 0;
	  var chars = false;
	  for (var j = word.length - 1; j >= 0; j--) {
	    var key = word[j].charCodeAt(0);
	    if (key === 36) {
	      flags = flags + mode;
	      continue;
	    }
	    if (key < 58) {
	      //numeric
	      sum += (key - 48) * x;
	      x *= 10;
	    } else {
	      if (!chars) {
	        x = 1;
	        row = sum;
	        sum = 0;
	        chars = true;
	        mode += 1;
	      }
	      //alpha
	      sum += (key - 64) * x;
	      x *= 26;
	    }
	  }

	  /*
	  	$X$Y => flags = 3
	  	$XY  => flags = 2
	  	X$Y  => flags = 1
	  	XY   => flags = 0
	  */
	  return [row, sum, flags];
	}
	function split(formula, view, crosssheet, fromSheet) {
	  var activeSheet = view.getActiveSheet();
	  var lines = [];
	  var index = 0;
	  var quotes = false,
	    ph = false;
	  for (var i = formula[i] === "=" ? 1 : 0; i < formula.length; i++) {
	    var key = formula[i];
	    if (key == "\"") {
	      quotes = !quotes;
	    } else if (!quotes) {
	      if (key == "{" && formula[i + 1] == "{") {
	        ph = true;
	      } else if (key == "}" && formula[i + 1] == "}") {
	        ph = false;
	      } else if (!ph) {
	        var escaped = key === "'";
	        if (escaped || isChar(key)) {
	          var _getWord = getWord(formula, i),
	            _getWord2 = _slicedToArray(_getWord, 4),
	            word = _getWord2[0],
	            end = _getWord2[1],
	            sheet = _getWord2[3];
	          var next = end - 1;
	          var value = void 0;
	          if (formula[next + 1] !== "(") {
	            if (isPosition(word)) {
	              if (!sheet || sheet == activeSheet || crosssheet) {
	                value = sheet ? [sheet, word, escaped] : word;
	                pushLine(lines, formula, i, index, value);
	                index = next + 1;
	              }
	            } else {
	              if (crosssheet) {
	                value = sheet ? [sheet, word, escaped] : word;
	                pushLine(lines, formula, i, index, value);
	                index = next + 1;
	              } else {
	                //specified sheet or active sheet (if not specified) range
	                var range = view.ranges.getCode(word, sheet || fromSheet);

	                //global range
	                if (!range) range = view.ranges.getCode(word, true);
	                if (range) {
	                  var parts = range.split("!");
	                  if (parts[0] == activeSheet) {
	                    value = [sheet, word, escaped, parts[1]];
	                    pushLine(lines, formula, i, index, value);
	                    index = next + 1;
	                  }
	                }
	              }
	            }
	          }
	          i = next;
	        }
	      }
	    }
	  }
	  if (index != formula.length) lines.push(formula.substr(index));
	  return lines;
	}
	function pushLine(lines, formula, i, index, value) {
	  if (i !== 0) lines.push(formula.substr(index, i - index));
	  lines.push(value);
	}
	function getMathFormat(view, value) {
	  var level = 0;
	  var blockLevel;
	  var parts = split(value, view);
	  for (var i = 0; i < parts.length; i++) {
	    // parts[i] can contain numbers, math operators, formulas, etc.
	    if (i % 2 === 0) {
	      // check formulas and round brackets which are not in quotes
	      var methods = parts[i].match(/(([a-zA-Z]*\()|\))(?=(?:[^"]|"[^"]*")*$)/g);
	      if (methods) methods.forEach(function (part) {
	        if (part.indexOf("(") > -1) {
	          level++;
	          // some methods block format addition (like count,odd,etc.)
	          var safeMethods = /^(SUM|AVERAGE|MAX|MIN|INT|ROUND|ROUNDDOWN|ROUNDUP|TRUNC)?\($/gi;
	          if (!blockLevel && !safeMethods.test(part)) blockLevel = level;
	        } else if (--level < blockLevel) blockLevel = null;
	      });
	    }
	    // parts[i] can be named range, cell from the active / non-active sheet
	    else if (!blockLevel) {
	      if (webix.isArray(parts[i])) {
	        if (/^[A-Za-z]+$/.test(parts[i][1])) parts[i] = parts[i][3].split(":")[0];else if (parts[i][0] == view.getActiveSheet()) parts[i] = parts[i][1];else continue; // ignore non-active sheets
	      }

	      // if range - check first cell position
	      var cell = position(parts[i]);
	      var name = getFormatName(view, cell[0], cell[1]);

	      // first cell with number format
	      if (name) return {
	        fmt: getFormatSource(name)
	      };
	    }
	  }
	}

	function getSuggestPos(editor) {
	  var text = editor.getValue();
	  var node = editor.getInputNode();
	  var sizes = webix.html.offset(node);
	  var selectionStart = node.selectionStart;
	  var textWidth = webix.html.getTextSize(text.substring(0, selectionStart), "webix_ssheet_formula").width;
	  return {
	    x: sizes.x + textWidth,
	    y: sizes.y + sizes.height
	  };
	}

	webix.protoUI({
	  name: "suggest-formula",
	  defaults: {
	    fitMaster: false,
	    filter: function (item, value) {
	      var editor = webix.$$(this.config.master);
	      var cursor = editor.getInputNode().selectionStart;
	      var val = editor.getValue();
	      if (val.charAt(0) !== "=") return;
	      var str = val.substring(0, cursor);
	      var search = str.substring(getLastCharIndex(str, true));
	      var nextSymbol = val.charAt(cursor);
	      if (search && (cursor === val.length || !(isChar(nextSymbol) || /^[0-9]/.test(nextSymbol)))) value = search;
	      return item.value.toString().toLowerCase().indexOf(value.toLowerCase()) === 0;
	    }
	  },
	  $init: function () {
	    var _this = this;
	    this.attachEvent("onBeforeShow", function (node) {
	      if (node.tagName) {
	        var editor = webix.$$(_this.config.master);
	        var text = editor.getValue();

	        //only for formulas
	        if (!text || text.charAt(0) !== "=") return false;
	        webix.ui.popup.prototype.show.apply(_this, [getSuggestPos(editor)]);
	        return false;
	      }
	    });
	  },
	  setMasterValue: function (data, refresh) {
	    var text = data.id ? this.getItemText(data.id) : data.text || data.value;
	    webix.$$(this.config.master).setValueHere(text);
	    if (!refresh) this.hide(true);
	    this.callEvent("onValueSuggest", [data, text]);
	  },
	  $enterKey: function () {
	    if (this.isVisible()) return webix.ui.suggest.prototype.$enterKey.apply(this, arguments);
	  }
	}, webix.ui.suggest);

	function init$B(view) {
	  view.attachEvent("onCellChange", function (row, col, value, page) {
	    if (page == this.getActiveSheet() && !this._setType) {
	      var formatName = getFormatName(this, row, col);
	      var cell = {
	        row: row,
	        col: col,
	        value: value,
	        fmt: formatName ? {
	          fmt: getFormatSource(formatName)
	        } : null
	      };
	      setType(this, cell);
	    }
	  });
	  view.attachEvent("onBeforeFormatChange", function (row, col, formatName, oldFormat, page) {
	    if (!this._setType) {
	      var cell = {
	        row: row,
	        col: col,
	        value: view.getCellValue(row, col, true, page),
	        fmt: {
	          fmt: getFormatSource(formatName)
	        }
	      };
	      setType(this, cell, true, page);
	    }
	  });
	  view.attachEvent("onAction", function (action, values) {
	    if (action == "dropdown" && values.newValue && values.newValue.editor == "excel_date") {
	      var format = getFormatName(this, values.row, values.column, values.page);
	      if (getFormatType(format) != "date") this.setFormat(values.row, values.column, webix.i18n.spreadsheet.formats.dateFormat, values.page);
	    }
	  });
	}
	function loadCell(view, data, item) {
	  var fmt = getFormatFromData(data, item);
	  var cell = {
	    value: item[2],
	    fmt: fmt ? {
	      fmt: fmt
	    } : null,
	    type: item[4]
	  };
	  setType(view, cell);
	  return cell;
	}
	function getExpectType(view, cell, parseDate, isFormula, formatType, style, page) {
	  //date based math
	  var type = "string";
	  if (!webix.isUndefined(cell.value)) {
	    if (isFormula) {
	      type = "number";
	      if (/^=(now|date|time)\(/i.test(cell.value)) type = "date";else if (/^=(sparkline|image)\(/i.test(cell.value)) type = "string";
	    } else if (!isNaN(cell.value)) type = "number";else if (formatType != "string" && parseDate) {
	      //if user types a date string, or it comes from Excel import
	      //set date type and convert string to Excel date
	      var parser = webix.Date.strToDate(webix.i18n.spreadsheet.formats.parseDateTime);
	      var value = parser(cell.value);
	      if (value != "" && !isNaN(value)) {
	        //change cell style - value changes once (some value -> 35767.5)
	        //change cell value - value changes twice (some value -> "12/03/97" -> 35767.5)
	        //so ignore undo for cell value change
	        if (style) dateToExcel(view, cell, value, page);else view.ignoreUndo(function () {
	          return dateToExcel(view, cell, value);
	        });
	        type = "date";
	      }
	    }
	  }
	  return type;
	}
	function dateToExcel(view, cell, date, page) {
	  date = getExcelDateFromJs(date);
	  cell.value = date;
	  if (!(view._loading_data || view._page_value_set)) view.setCellValue(cell.row, cell.col, date, page);
	}
	function checkType(type, expectType, formatType, isFormula, value) {
	  type = type || expectType;

	  //strings will always have string type regardless of format
	  if (expectType == "string") type = "string";else if (formatType) type = formatType;
	  if (type == "date" && !isFormula && isDateInvalid(value)) type = "number";
	  return type;
	}
	function getFormatType(format) {
	  var formatType = format ? "number" : null;
	  if (checkFormat(format, "string")) formatType = "string";else if (checkFormat(format, "date")) formatType = "date";
	  return formatType;
	}
	function getType(view, row, column, page) {
	  page = page ? view._mData.getPage(page) : view._mPage;
	  var item = page.getCell(row - 1, column - 1);
	  return item && item.type || null;
	}
	function setType(view, cell, style, page) {
	  var parseToStore = !(cell.row && cell.col);

	  //prevent type change during value or format change
	  view._setType = true;
	  var isFormula = typeof cell.value == "string" && cell.value[0] == "=";
	  var parseDate = (!style || cell.fmt == getFormatSource("date")) && (!view._loading_data || view._page_value_set || cell.type == "date");
	  var mathFormat;
	  if (!parseToStore && (!page || page == view.getActiveSheet())) mathFormat = isFormula && !cell.fmt ? getMathFormat(view, cell.value) : null;
	  var formatType = getFormatType(cell.fmt || mathFormat);
	  var expectType = getExpectType(view, cell, parseDate, isFormula, formatType, style, page);
	  cell.type = checkType(cell.type, expectType, formatType, isFormula, cell.value);
	  if (!parseToStore) {
	    var sheet = !page || page == view.getActiveSheet() ? view._mPage : view._mData.getPage(page);
	    var item = sheet.getCell(cell.row - 1, cell.col - 1, true);
	    item.$format = formatType == "string" ? 1 : 0;
	    updateCell(view, cell, expectType, formatType, mathFormat, page);
	    item.type = cell.type;
	  }
	  delete view._setType;
	}
	function updateCell(view, cell, expectType, formatType, mathFormat, page) {
	  var row = cell.row;
	  var col = cell.col;
	  var isString = typeof cell.value == "string";
	  var isFormula = isString && cell.value[0] == "=";
	  var cellEditor = view.getCellEditor(row, col);
	  var isActiveSheet = !page || page == view.getActiveSheet();

	  //update cell value if set number format (5e5 -> 500000, 005 -> 5)
	  if (!(view._loading_data || view._page_value_set) && cell.type === "number" && isString && !isFormula && cell.value !== "") view.setCellValue(row, col, cell.value * 1, page);
	  if (mathFormat) view.setFormat(row, col, mathFormat.fmt);else if (cell.type == "date") {
	    // add default date format
	    if (formatType != "date") {
	      var isTime = isFormula && cell.value.toUpperCase().indexOf("=TIME(") == 0;
	      var locale = webix.i18n.spreadsheet.formats;
	      var format = isTime ? locale.timeFormat : locale.dateFormat;
	      view.setFormat(row, col, format, page);
	    }

	    //set date editor for cells with date type
	    if (!isFormula && !cellEditor && isActiveSheet) view.setCellEditor(row, col, {
	      editor: "excel_date"
	    }, page);
	  } else if (formatType != "string" && cell.type == "string" && expectType != "string") {
	    //force text format for numbers typed as strings
	    view.setFormat(row, col, "@", page);
	  }

	  //remove date editor
	  if (isActiveSheet && (cell.type != "date" || isFormula) && cellEditor && cellEditor.editor == "excel_date") view.setCellEditor(row, col, null);
	}

	var m4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getType: getType,
		init: init$B,
		loadCell: loadCell
	});

	webix.protoUI({
	  name: "live-editor",
	  $cssName: "texthighlight",
	  $init: function (config) {
	    var _this2 = this;
	    var master = this.getTopParentView();
	    this.paramsPopup = webix.ui({
	      view: "popup",
	      width: 350,
	      maxHeight: 300,
	      body: {
	        scroll: "auto",
	        autoheight: true,
	        template: function (obj) {
	          var html = "<p class = \"webix_ssheet_method_name\">".concat(obj.method, "</p>");
	          var params = obj.params;
	          for (var i = 0; i < params.length; i++) {
	            var param = "<span class = \"webix_ssheet_method_param_name\">".concat(params[i][0] + ": ", "</span>");
	            html += "<p".concat(obj.number == i ? " class = 'webix_ssheet_method_param_active'" : "", ">").concat(param, "<span class=\"webix_ssheet_method_param_description\">").concat(params[i][1], "</p>");
	          }
	          return html;
	        }
	      }
	    });
	    master._destroy_with_me.push(this.paramsPopup);
	    config.suggest = {
	      width: 350,
	      height: 200,
	      view: "suggest-formula",
	      css: "webix_ssheet_math_suggest",
	      data: config.suggestData,
	      template: function (obj) {
	        return obj.pos ? obj.id : obj.value;
	      },
	      body: {
	        template: function (obj) {
	          if (obj.id.indexOf("$range_") == 0) return "<span class=\"webix_ssheet_left\">".concat(obj.value, "</span><span class=\"webix_ssheet_range webix_ssheet_right\">").concat(obj.pos, "</span>");else return obj.value;
	        }
	      },
	      on: {
	        onBeforeShow: function () {
	          var _this = this;
	          var list = this.getList();
	          var oldRanges = list.find(function (obj) {
	            return obj.id.indexOf("$range_") == 0;
	          });
	          if (oldRanges) oldRanges.forEach(function (obj) {
	            return list.remove(obj.id);
	          });
	          var allRanges = master.ranges.serialize(master.getActiveSheet()).map(function (r) {
	            return {
	              id: "$range_" + r[0],
	              value: r[0],
	              pos: r[1],
	              global: r[2]
	            };
	          });
	          var suggestRanges = allRanges.filter(function (range) {
	            return !range.global;
	          });
	          allRanges.filter(function (range) {
	            return range.global;
	          }).forEach(function (range) {
	            if (!suggestRanges.find(function (sRange) {
	              return sRange.value == range.value;
	            })) suggestRanges.push(range);
	          });
	          suggestRanges.forEach(function (range) {
	            return list.add(range);
	          });
	          list.filter(function (item) {
	            return _this.config.filter.apply(_this, [item, _this.getMasterValue()]);
	          });
	          list.sort("value", "asc", "string");
	        }
	      }
	    };
	    config.highlight = this.highlight;
	    this._highlightedCells = {};
	    this.$view.className += " webix_ssheet_formula";
	    this.attachEvent("onKeyPress", function (code, e) {
	      delete _this2._update_range;
	      if (code == 13) {
	        //ignore Enter key if it was pressed to select some value from suggest
	        if (new Date() - (_this2._last_value_set || 0) > 300) {
	          var cell = _this2.config.activeCell;
	          _this2.showActiveSheet(true);
	          _this2.updateCellValue(cell);
	          //blur to avoid calling highlight function after selection move
	          _this2.getInputNode().blur();
	          //we have 'enter' hot key to activate editor
	        }
	        webix.html.preventEvent(e);
	      }
	      //esc - cancel editing
	      else if (code == 27) {
	        _this2.showActiveSheet();
	        webix.delay(function () {
	          var cell = master.getSelectedId();
	          var oldVal = _this2.getCellValue(cell.row, cell.column);
	          if (_this2.getValue() == oldVal) master.$$("cells").refresh(cell.row);else _this2.setValue(oldVal);
	          delete master.$handleSelection;
	          webix.UIManager.setFocus(master.$$("cells"));
	        });
	      } else if (code >= 33 && code <= 40)
	        // arrow navigation
	        _this2.showParamsPopup();
	    });

	    // caret move
	    this.attachEvent("onItemClick", function () {
	      this.showParamsPopup();
	    });
	    this.attachEvent("onAfterRender", function () {
	      var _this3 = this;
	      webix.eventRemove(this.keydownEv);
	      this.keydownEv = webix.event(this.getInputNode(), "keydown", function (e) {
	        _this3.endEdit(e);
	      });
	    });
	  },
	  showParamsPopup: function () {
	    var _this4 = this;
	    webix.delay(function () {
	      var popup = _this4.paramsPopup;
	      var text = _this4.getValue();
	      if (text[0] == "=") {
	        var cursor = _this4.getInputNode().selectionStart;
	        var number = 0;
	        var brackets = 0;
	        for (var i = cursor - 1; i > 0; i--) {
	          switch (text[i]) {
	            case ",":
	              if (!brackets) number++;
	              break;
	            case ")":
	              brackets++;
	              break;
	            case "(":
	              if (!brackets) {
	                var str = text.substring(0, i);
	                var method = str.substring(getLastCharIndex(str, true));
	                if (method) {
	                  method = method.toUpperCase();
	                  var params = webix.i18n.spreadsheet.liveEditor["functions-syntax"][method];
	                  if (params && params.length) {
	                    var template = popup.getBody();
	                    template.setValues({
	                      params: params,
	                      number: number,
	                      method: method
	                    });
	                    var suggest = webix.$$(_this4.config.suggest);
	                    var pos = void 0;
	                    if (suggest.isVisible()) {
	                      var suggestConfig = suggest.config;
	                      pos = {
	                        x: suggestConfig.left,
	                        y: suggestConfig.top + suggest.$height + 10
	                      };
	                    } else pos = getSuggestPos(_this4);
	                    popup.show(pos);
	                    var activeParam = template.$view.querySelector(".webix_ssheet_method_param_active");
	                    if (activeParam) {
	                      var scrollTop = activeParam.offsetTop + activeParam.offsetHeight - template.$height;
	                      template.scrollTo(0, scrollTop > 0 ? scrollTop : 0);
	                    }
	                    _this4.focus();
	                  } else popup.hide();
	                }
	                return;
	              } else brackets--;
	          }
	        }
	      }
	      popup.hide();
	    });
	  },
	  highlight: function (value) {
	    this.showParamsPopup();
	    var html = "";
	    var master = this.getTopParentView();
	    var escapeText = webix.template.escape;
	    for (var area in this._highlightedCells) {
	      var cells = this._highlightedCells[area];
	      this.changeCellCss(cells[0], cells[1], cells[2], true);
	    }
	    this._highlightedCells = {};

	    //value can be null
	    if (value && value[0] == "=") {
	      var parts = split(value, master, null, this._activeMath);
	      var sheet = master.getActiveSheet();
	      var colorIndex = 1;
	      for (var i = 0; i < parts.length; i++) {
	        if (i % 2 === 0) html += escapeText(parts[i]);else {
	          var crossheet = webix.isArray(parts[i]);
	          var cellSheet = crossheet ? this.prepareSheet(parts[i][0], parts[i][2]) : "";
	          var activeMath = this._activeMath;
	          var activeSheet = !crossheet && (!activeMath || activeMath == sheet);
	          var cell = position(crossheet ? parts[i][1] : parts[i]);
	          var cellText = crossheet ? cellSheet + parts[i][1] : parts[i];
	          var rangeName = crossheet && !getLastCharIndex(parts[i][1]);
	          if (rangeName || activeSheet || crossheet && parts[i][0] == sheet) {
	            var repeatedColor = void 0;
	            //range
	            if (parts[i + 1] == ":" && parts[i + 2] || rangeName) {
	              var nextCell = void 0,
	                nextCellText = void 0;
	              if (rangeName) {
	                var _cells = parts[i][3].split(":");
	                cell = position(_cells[0]);
	                nextCell = position(_cells[1]);
	              } else {
	                nextCell = position(webix.isArray(parts[i + 2]) ? parts[i + 2][1] : parts[i + 2]);
	                nextCellText = webix.isArray(parts[i + 2]) ? cellSheet + parts[i + 2][1] : parts[i + 2];
	                i += 2;
	              }
	              repeatedColor = this.setColor(cell[0], cell[1], nextCell[0], nextCell[1], colorIndex);
	              html += "<span class=\"webix_ssheet_highlight_color_".concat(repeatedColor || colorIndex, "\">").concat(rangeName ? cellText : cellText + ":" + nextCellText, "</span>");
	            }
	            //OtherSheet!A1:A3 - do not highlight A3
	            else if (parts[i - 1] && parts[i - 1][parts[i - 1].length - 1] == ":") {
	              html += cellText;
	              continue;
	            }
	            //cell
	            else {
	              repeatedColor = this.setColor(cell[0], cell[1], cell[0], cell[1], colorIndex);
	              html += "<span class=\"webix_ssheet_highlight_color_".concat(repeatedColor || colorIndex, "\">").concat(cellText, "</span>");
	            }
	            var colors = 7;
	            if (!repeatedColor) colorIndex += colorIndex == colors ? -1 * (colors - 1) : 1;
	          } else html += cellText;
	        }
	      }
	    } else html = escapeText(value);
	    master.$$("cells").refresh();
	    if (document.activeElement == this.getInputNode()) this.paintValue();
	    return html;
	  },
	  showActiveSheet: function (enter) {
	    var master = this.getTopParentView();
	    var grid = master._table;
	    if (this._activeMath) {
	      if (this._activeMath != master.getActiveSheet()) {
	        var cell = this.config.activeCell;
	        this.define({
	          activeCell: null
	        });
	        master.showSheet(this._activeMath);
	        webix.delay(function () {
	          grid.select(cell.row + (enter ? 1 : 0), cell.column);
	        });
	      }
	      delete this._activeMath;
	    } else if (enter) {
	      webix.delay(function () {
	        grid.moveSelection("down");
	      });
	    }
	  },
	  changeCellCss: function (row, col, index, remove) {
	    var css = "webix_ssheet_highlight_background_".concat(index);
	    for (var r = row.start; r <= row.end; r++) for (var c = col.start; c <= col.end; c++) this.getTopParentView().$$("cells")[remove ? "removeCellCss" : "addCellCss"](r, c, css, true);
	  },
	  endEdit: function (e) {
	    var code = e.which || e.keyCode;

	    //if it is a formula - force user to finish it by click outside or 'enter'
	    if (code == 9) {
	      webix.html.preventEvent(e);
	      this.getInputNode().blur();
	      this.updateCellValue();
	      this.getTopParentView()._table.moveSelection(e.shiftKey ? "left" : "right");
	    }
	  },
	  paintValue: function () {
	    var master = this.getTopParentView();
	    if (!this._activeMath || this._activeMath == master.getActiveSheet()) {
	      var cell = this.config.activeCell;
	      var node = master._table.getItemNode(cell);
	      if (cell && node) node.innerHTML = "<div>".concat(webix.template.escape(this.getValue()), "</div>");
	    }
	  },
	  updateCellValue: function (cell) {
	    var newv = this.getValue();
	    var master = this.getTopParentView();
	    cell = cell || this.config.activeCell;
	    if (!cell) this.setValue("");else {
	      var val = master.getCellValue(cell.row, cell.column);
	      if (newv !== val) {
	        this.config.value = newv;
	        master.setCellValue(cell.row, cell.column, newv);
	        master.refresh();
	      }
	    }
	    delete master.$handleSelection;
	  },
	  $setValueHere: function (value) {
	    this.setValueHere(value);
	  },
	  setValueHere: function (value) {
	    this._last_value_set = new Date();
	    var formula = this.getValue();
	    if (formula && formula.charAt(0) === "=") {
	      var cursor = this.getInputNode().selectionStart;
	      var str1 = formula.substring(0, cursor);
	      var str2 = formula.substring(cursor);
	      if (str1[str1.length - 1] == "(") str1 = str1.substring(0, str1.length - 1);
	      str1 = str1.substring(0, getLastCharIndex(str1, true));
	      var range = value.indexOf("$range_") == 0;
	      if (range) value = value.substr(7);

	      //suggest called via up/down key
	      str1 += value + (range || str2[0] == "(" ? "" : "(");
	      this.setValue(str1 + str2);
	      this.getInputNode().setSelectionRange(str1.length, str1.length);
	    }
	  },
	  expectOperator: function (ignoreSel) {
	    var text = this.getValue();
	    if (text[0] == "=") {
	      var cursor = ignoreSel ? text.length : this.getInputNode().selectionStart;
	      while (text[cursor - 1] == " ") cursor--;
	      return text[cursor - 1] && text[cursor - 1].match(/[+&\-/*=(:,]/);
	    }
	  },
	  setRange: function (range, replace) {
	    var cursor = this.getInputNode().selectionStart;
	    var formula = this.getValue();
	    var str1, str2;

	    //check if range was added by click
	    if (replace) replace = this._update_range && cursor == this._update_range.pos + this._update_range.len;
	    var lastPos = replace ? this._update_range.pos : cursor;
	    str1 = formula.substring(0, lastPos) + range;
	    str2 = formula.substring(cursor);
	    this._update_range = {
	      pos: lastPos,
	      len: range.length
	    };
	    this.setValue(str1 + str2);
	  },
	  prepareSheet: function (sheet, escaped) {
	    if (!sheet) return "";
	    var condition = webix.isUndefined(escaped) ? sheet.indexOf(" ") != -1 : escaped;
	    return (condition ? "'".concat(sheet, "'") : sheet) + "!";
	  },
	  prepareArea: function (first, second) {
	    return {
	      start: Math.min(first, second),
	      end: Math.max(first, second)
	    };
	  },
	  setColor: function (row1, col1, row2, col2, color) {
	    var row = this.prepareArea(row1, row2);
	    var col = this.prepareArea(col1, col2);
	    var index = [row.start, row.end, col.start, col.end].join(",");
	    var coloredArea = this._highlightedCells[index];
	    if (!coloredArea) {
	      this._highlightedCells[index] = [row, col, color];
	      this.changeCellCss(row, col, color);
	    } else return coloredArea[2];
	  },
	  getCellValue: function (row, column) {
	    var master = this.getTopParentView();
	    var value = master.getCellValue(row, column);
	    if (getType(master, row, column) == "date" && value[0] != "=") {
	      var format = getDateEditFormat(master, row, column);
	      value = format(getJsDateFromExcel(value));
	    }
	    return value;
	  }
	}, webix.ui.texthighlight);

	webix.protoUI({
	  name: "ssheet-separator",
	  defaults: {
	    css: "webix_ssheet_toolbar_spacer",
	    template: " ",
	    width: 1,
	    borderless: true
	  }
	}, webix.ui.view);

	webix.protoUI({
	  name: "sheets",
	  defaults: {
	    layout: "x",
	    borderless: true,
	    css: "ssheet_list_sheets",
	    select: true,
	    drag: "order",
	    dragscroll: "x",
	    scroll: false
	  }
	}, webix.EditAbility, webix.ui.list);

	// toolbar: toogle button
	webix.protoUI({
	  $cssName: "toggle",
	  name: "ssheet-toggle",
	  toggle: function () {
	    var old = this.getValue();
	    if (!old || old == this.config.offValue) this.config.value = this.config.onValue || true;else this.config.value = this.config.offValue || false;
	    var val = this.getValue();
	    this.$setValue(val);
	    this.callEvent("onChange", [val, old, "user"]);
	  },
	  $setValue: function (value) {
	    if (value == this.config.offValue) value = false;else if (value == this.config.onValue) value = true;
	    webix.ui.toggle.prototype.$setValue.call(this, value);
	  },
	  getValue: function () {
	    var config = this.config;
	    var value = config.value;
	    return !value || value == config.offValue ? config.offValue || false : config.onValue || true;
	  },
	  defaults: {
	    template: function (obj, common) {
	      var css = obj.value === true || obj.value == obj.onValue ? " webix_pressed" : "";
	      var inp = common.$renderInput(obj, common);
	      return "<div class='webix_el_box" + css + "' style='width:" + obj.awidth + "px; height:" + obj.aheight + "px'>" + inp + "</div>";
	    }
	  }
	}, webix.ui.toggle);

	// toolbar: silent toggle button
	webix.protoUI({
	  name: "ssheet-toggle-silent",
	  $cssName: "toggle",
	  $allowsClear: false,
	  setValue: function () {
	    this.blockEvent();
	    webix.ui.toggle.prototype.setValue.apply(this, arguments);
	    this.unblockEvent();
	  }
	}, webix.ui.toggle);

	webix.protoUI({
	  name: "ssheet-bar-title",
	  defaults: {
	    borderless: true
	  },
	  $init: function () {
	    this.$view.className += " webix_ssheet_subbar_title";
	  }
	}, webix.ui.template);

	webix.protoUI({
	  name: "ssheet-button",
	  $cssName: "button",
	  defaults: {
	    type: "htmlbutton",
	    width: 40
	  },
	  $init: function (config) {
	    var arrowCss = config.arrow ? " webix_ssheet_button_menu" : "";
	    var iconCss = config.label ? "" : " webix_ssheet_icon_only";
	    this.$view.className += " webix_ssheet_button" + arrowCss + iconCss;
	    if (config.label || config.icon) {
	      var icon = config.icon || config.name,
	        text = config.label || "";
	      if (config.arrow) {
	        var right = webix.skin.$active.inputSpacing / 2;
	        text += "<span class='webix_ssheet_button_icon webix_ssheet_icon_arrow webix_icon wxi-menu-down' style='right:" + right + "px;'></span>";
	      }
	      config.label = "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-" + icon + "'></span> " + text;
	      config.tooltip = webix.i18n.spreadsheet.tooltips[config.name] || "";
	    }
	    if (config.options && !config.popup) config.popup = getPopupConfig(config.options);
	  }
	}, webix.ui.button);
	webix.protoUI({
	  name: "ssheet-button-icon-top",
	  $cssName: "button",
	  defaults: {
	    type: "htmlbutton",
	    width: 70,
	    height: 70
	  },
	  $init: function (config) {
	    this.$view.className += " ssheet_button_icon_top";
	    if (config.label) {
	      var icon = config.icon || config.name || "",
	        text = config.label;
	      config.label = "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-" + icon + "'></span><br/>";
	      config.label += "<span class='ssheet_button_icon_top_text'>" + text + "</span>";
	      if (config.arrow) config.label += "<br/><span class='ssheet_button_icon_top_arrow webix_icon wxi-menu-down'></span>";
	      config.tooltip = webix.i18n.spreadsheet.tooltips[config.name] || "";
	    }
	    if (config.options && !config.popup) config.popup = getPopupConfig(config.options);
	  }
	}, webix.ui.button);
	function getPopupConfig(options) {
	  return {
	    view: "ssheet-suggest",
	    css: "webix_ssheet_suggest",
	    autowidth: true,
	    template: function (obj) {
	      var text = "";
	      if (obj.icon) text += "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-" + obj.icon + "'></span> ";
	      text += obj.value || webix.i18n.spreadsheet.menus[obj.id] || obj.id;
	      return text;
	    },
	    data: options,
	    on: {
	      onItemClick: function (id) {
	        var button = this.config.master;
	        if (button) {
	          var view = webix.$$(button).getTopParentView();
	          var params = [this.getItem(id)];
	          if (webix.$$(button).config.area) {
	            var area = view.$$("cells").getSelectArea();
	            if (area) params = params.concat([area.start, area.end]);
	          }
	          view.callEvent("onCommand", params);
	        }
	      }
	    }
	  };
	}

	webix.protoUI({
	  name: "multicheckbox",
	  defaults: {
	    padding: 0,
	    type: "clean",
	    borderless: true,
	    elementsConfig: {
	      labelWidth: 0
	    }
	  },
	  $init: function (config) {
	    config.rows = [{
	      height: 0.000001
	    }];
	    this.$ready.push(function () {
	      this._initOnChange();
	    });
	  },
	  _initOnChange: function () {
	    this.attachEvent("onChange", function (newv) {
	      var name = this.$eventSource.config.name;
	      this.blockEvent();
	      if (name == "$all") {
	        for (var i in this.elements) this.elements[i].setValue(newv);
	        if (!newv) this._getCheckboxes()[0].setValue(1);
	      } else {
	        var value = this.getValue(true);
	        if (webix.isArray(value) && (!value.length || !find(value, function (config) {
	          return !config.$hiddenSheet;
	        }))) {
	          var checkboxes = this._getCheckboxes();
	          find(checkboxes, function (c) {
	            return !c.config.$hiddenSheet;
	          }).setValue(1);
	        }
	        this.elements.$all.setValue(this.getValue(true) === true ? 1 : 0);
	      }
	      this.unblockEvent();
	    });
	  },
	  setValue: function (value) {
	    this.elements = {};
	    this._count = value.length;
	    if (value.length > 1) {
	      var elements = [];
	      var base = [];
	      var maxHeight = 400;
	      value.forEach(function (sheet) {
	        var icon = "<span class=\"webix_icon wxi-eye".concat(sheet.hidden ? "-slash" : "", "\"></span>");
	        base.push({
	          view: "checkbox",
	          labelRight: icon + sheet.name,
	          name: sheet.name,
	          value: sheet.active,
	          $hiddenSheet: sheet.hidden
	        });
	      });
	      var baseHeight = base.length * webix.skin.$active.inputHeight;
	      var scroll = baseHeight > maxHeight;
	      elements.push({
	        view: "scrollview",
	        body: {
	          rows: base
	        },
	        scroll: scroll,
	        height: scroll ? maxHeight : baseHeight
	      });
	      elements.push({
	        template: "<div class='ss_sep_line'></div>",
	        height: 10
	      });
	      elements.push({
	        view: "checkbox",
	        labelRight: webix.i18n.spreadsheet.labels["export-all-sheets"],
	        name: "$all",
	        value: 0
	      });
	      webix.ui(elements, this);
	    } else if (this.getChildViews().length > 1) {
	      webix.ui([{
	        height: 0.000001
	      }], this);
	    }
	  },
	  getValue: function (config) {
	    var checkboxes = this._getCheckboxes();
	    var output = [];

	    //save order
	    for (var i = 0; i < checkboxes.length; i++) if (checkboxes[i].getValue()) {
	      var cfg = checkboxes[i].config;
	      output.push(config ? cfg : cfg.name);
	    }
	    if (output.length == this._count) return true;
	    return output;
	  },
	  _getCheckboxes: function () {
	    var scrollview = this.queryView("scrollview");
	    return scrollview ? scrollview.getBody().getChildViews() : [];
	  }
	}, webix.ui.form);

	webix.protoUI({
	  name: "formlist",
	  defaults: {
	    paddingY: 5,
	    height: 120
	  },
	  $init: function (config) {
	    var _this = this;
	    config.cols = [{
	      css: "webix_inp_label",
	      template: config.label,
	      width: config.labelWidth,
	      borderless: true
	    }, {
	      view: "list",
	      data: config.data,
	      css: config.css,
	      template: config.template,
	      select: true,
	      scroll: false,
	      borderless: true,
	      on: {
	        onSelectChange: function () {
	          _this.getParentView().callEvent("onChange", []);
	        }
	      }
	    }];
	  },
	  setValue: function (value) {
	    this.getChildViews()[1].select(value);
	  },
	  getValue: function () {
	    return this.getChildViews()[1].getSelectedId();
	  },
	  refresh: function () {
	    this.getChildViews()[1].refresh();
	  },
	  focus: function () {}
	}, webix.ui.layout);

	webix.protoUI({
	  name: "ssheet-ui",
	  defaults: {
	    move: true,
	    css: "webix_shadow_none webix_ssheet_ui",
	    head: false,
	    resize: true,
	    toFront: true,
	    minWidth: 50,
	    minHeight: 200,
	    escHide: false,
	    autofit: false
	  },
	  $init: function () {
	    // prevent block selection
	    this.$view.setAttribute("webixignore", "1");
	    this.$ready.push(function () {
	      webix.UIManager.addHotKey("delete", webix.bind(this._removeView, this));
	      webix.UIManager.addHotKey("backspace", webix.bind(this._removeView, this));
	      this.getMenu();
	    });
	    this.attachEvent("onDestruct", function () {
	      webix.eventRemove(this._clickEv);
	      this._menu.destructor();
	    });
	  },
	  move_setter: function (value) {
	    if (value) {
	      webix.DragControl.addDrag(this.$view, this);
	    }
	    return value;
	  },
	  $dragPos: function (pos, e) {
	    this.callEvent("onViewMove", [pos, e]);
	    return pos;
	  },
	  $dragCreate: function (object, e) {
	    var trg = e.target;
	    if (!trg.getAttribute || trg.getAttribute("webix_disable_drag") || trg.getAttribute("webixignore")) return;
	    this.getMenu().hide();
	    var elOffset = webix.html.offset(object);
	    var elPos = webix.html.pos(e);
	    var pOffset = webix.html.offset(object.parentNode);
	    var state = webix.$$(this.config.master).getScrollState();
	    webix.DragControl.top = elOffset.y - elPos.y - pOffset.y;
	    webix.DragControl.left = elOffset.x - elPos.x - pOffset.x + state.x;
	    return webix.toNode(this.$view);
	  },
	  $dragDestroy: function (node, drag) {
	    var x = this.config.left = parseInt(drag.style.left, 10);
	    var y = this.config.top = parseInt(drag.style.top, 10);
	    webix.DragControl.top = webix.DragControl.left = 0;
	    this.callEvent("onViewMoveEnd", [x, y]);
	    return;
	  },
	  getMenu: function () {
	    var _this = this;
	    var labels = webix.i18n.spreadsheet.labels;
	    if (!this._menu) {
	      var data = [{
	        value: labels["export-view"],
	        submenu: [{
	          id: "pdf",
	          value: labels["export-view-pdf"]
	        }, {
	          id: "png",
	          value: labels["export-view-png"]
	        }, {
	          id: "excel",
	          value: labels["export-view-excel"]
	        }]
	      }];
	      if (!webix.$$(this.config.master).getTopParentView().config.readonly) data = [{
	        id: "edit",
	        value: labels["edit-view"]
	      }].concat(_toConsumableArray(data), [{
	        id: "del",
	        value: labels["remove-view"]
	      }]);
	      this._menu = webix.ui({
	        view: "contextmenu",
	        submenuConfig: {
	          externalUI: this.config.id
	        },
	        data: data,
	        on: {
	          onMenuItemClick: function (id) {
	            return _this._menuActions(id);
	          },
	          onBeforeShow: function () {
	            return _this._toggleExcel();
	          }
	        }
	      });
	      var dots = webix.html.create("span", {
	        "class": "webix_ssheet_view_menu webix_icon wxi-dots"
	      });
	      this._clickEv = webix.event(dots, "click", function () {
	        if (_this._menu.isVisible()) _this._menu.hide();else _this._menu.show(dots);
	      });
	      this.$view.firstChild.appendChild(dots);
	    }
	    return this._menu;
	  },
	  _menuActions: function (id) {
	    switch (id) {
	      case "del":
	        this.callEvent("onViewRemove", []);
	        break;
	      case "edit":
	        this.callEvent("onViewEdit", []);
	        break;
	      case "pdf":
	        webix.toPDF(this.getBody(), {
	          display: "image"
	        });
	        break;
	      case "png":
	        webix.toPNG(this.getBody());
	        break;
	      case "excel":
	        webix.toExcel(this.getBody(), {
	          header: false
	        });
	        break;
	    }
	  },
	  _toggleExcel: function () {
	    var view = this.getBody();
	    if (view.data && view.data.pull) this._menu.showMenuItem("excel");else this._menu.hideMenuItem("excel");
	  },
	  _removeView: function (view) {
	    if (view && view.getTopParentView() == this) this.callEvent("onViewRemove", []);
	  }
	}, webix.ui.window);

	webix.protoUI({
	  name: "ssheet-series",
	  $init: function (config) {
	    var _this = this;
	    this.hidden = {};
	    config.rows = [{
	      view: "scrollview",
	      borderless: true,
	      body: {
	        view: "accordion",
	        css: "webix_ssheet_accordion",
	        margin: webix.skin.$active.layoutMargin.form,
	        multi: true,
	        type: "clean",
	        rows: [this.getSectionConfig()]
	      },
	      on: {
	        onAfterScroll: function () {
	          //close possibly open selector popups
	          webix.callEvent("onClick", []);
	        }
	      }
	    }, {
	      view: "button",
	      label: webix.i18n.spreadsheet.labels["add-line"],
	      click: function () {
	        _this.addSection();
	      }
	    }];
	  },
	  getSectionConfig: function (i) {
	    var _this2 = this;
	    var view = this;
	    var labels = webix.i18n.spreadsheet.labels;
	    var trashIcon = "<span class='webix_icon webix_ssheet_series_icon wxi-trash'></span>";
	    var padding = webix.skin.$active.dataPadding - 2;
	    return {
	      view: "accordionitem",
	      header: "".concat(labels["chart-item"], " ").concat(i ? i + 1 : 1, " ").concat(trashIcon),
	      body: {
	        view: "form",
	        padding: padding,
	        elementsConfig: {
	          labelWidth: 180
	        },
	        on: {
	          onChange: function () {
	            _this2.callEvent("onChange", []);
	          }
	        },
	        elements: [{
	          view: "text",
	          label: labels["chart-range"],
	          name: "range",
	          range: true,
	          on: {
	            onChange: function (val, oldVal) {
	              var upper = val.toUpperCase();
	              if (val != upper) {
	                this.blockEvent();
	                this.setValue(upper);
	                this.unblockEvent();
	              }
	              view.callEvent("onRangeChange", [upper, oldVal]);
	            }
	          }
	        }, {
	          view: "ssheet-colorpicker",
	          label: labels["chart-series-color"],
	          name: "color",
	          hidden: this.hidden.color
	        }, {
	          view: "checkbox",
	          label: labels["chart-tooltip"],
	          name: "tooltip"
	        }, {
	          view: "checkbox",
	          label: labels["chart-label"],
	          name: "label",
	          hidden: this.hidden.label
	        }, {
	          view: "richselect",
	          label: labels["chart-markers"],
	          value: "square",
	          name: "marker",
	          hidden: this.hidden.marker,
	          suggest: {
	            view: "ssheet-form-suggest",
	            data: [{
	              id: "square",
	              value: labels["chart-markers-square"]
	            }, {
	              id: "triangle",
	              value: labels["chart-markers-triangle"]
	            }, {
	              id: "diamond",
	              value: labels["chart-markers-diamond"]
	            }, {
	              id: "round",
	              value: labels["chart-markers-round"]
	            }]
	          }
	        }]
	      },
	      onClick: {
	        "wxi-trash": function () {
	          var layout = this.getParentView();
	          layout.removeView(this);
	          var childs = layout.getChildViews();
	          for (var _i = 0; _i < childs.length; _i++) {
	            childs[_i].define({
	              header: "".concat(labels["chart-item"], " ").concat(_i + 1, " ").concat(trashIcon)
	            });
	            childs[_i].refresh();
	          }
	          view.callEvent("onChange", []);
	          return false;
	        }
	      }
	    };
	  },
	  addSection: function () {
	    var layout = this.getLayout();
	    var lastIndex = layout.getChildViews().length;
	    var layoutId = layout.addView(this.getSectionConfig(lastIndex));
	    webix.$$(layoutId).queryView({
	      name: "range"
	    }).focus();
	  },
	  setValue: function (value) {
	    value = value || [];
	    var layout = this.getLayout();
	    var childs = layout.getChildViews();
	    var count = childs.length;
	    if (count > value.length) for (var i = count; i > value.length; i--) this.getLayout().removeView(childs[i - 1]);else if (value.length > count) for (var _i2 = value.length; _i2 > count; _i2--) this.addSection();
	    for (var _i3 = 0; _i3 < childs.length; _i3++) {
	      var form = childs[_i3].getChildViews()[0];
	      var range = form.queryView({
	        name: "range"
	      });

	      //block range events to ignore onRangeChange
	      range.blockEvent();
	      form.setValues(value[_i3]);
	      range.unblockEvent();
	    }
	  },
	  setSubValue: function (sub, value) {
	    sub.blockEvent();
	    sub.setValue(value);
	    sub.unblockEvent();
	  },
	  getLayout: function () {
	    return this.queryView("scrollview").getBody();
	  },
	  hideSubviews: function (name, show) {
	    this.hidden[name] = !show;
	    this.queryView({
	      name: name
	    }, "all").forEach(function (view) {
	      if (show) view.show();else view.hide();
	    });
	  },
	  getValue: function () {
	    var value = [];
	    var layout = this.getLayout();
	    layout.getChildViews().forEach(function (child) {
	      value.push(child.getChildViews()[0].getValues());
	    });
	    return value;
	  }
	}, webix.ui.layout);

	webix.protoUI({
	  name: "ssheet-toolbar-scrollview",
	  $getSize: function () {
	    var size = webix.ui.scrollview.prototype.$getSize.apply(this, arguments);
	    var bodySize = this.getBody().$getSize(0, 0);
	    var scroll = 0;
	    if (this.config.scroll) scroll = webix.env.scrollSize;else this.$view.style["overflow-x"] = "hidden";
	    size[2] = size[3] = bodySize[2] + scroll;
	    return size;
	  },
	  $setSize: function (x, y) {
	    var _this = this;
	    var bodySize = this.getBody().$getSize(0, 0);
	    var oldScroll = this.config.scroll;
	    var scroll = x < bodySize[0] ? "x" : false;
	    if (scroll != oldScroll) {
	      this.define({
	        scroll: scroll
	      });
	      return webix.delay(function () {
	        _this.resize();
	      });
	    }
	    webix.ui.scrollview.prototype.$setSize.apply(this, [x, y]);
	  }
	}, webix.ui.scrollview);

	function init$A(view) {
	  //parsing initial data
	  view.attachEvent("onDataParse", function (data) {
	    return _parse$2(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data, config) {
	    return _serialize$2(view, data, config);
	  });

	  // undo
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    if (type == "value") _undoValue(view, row, column, value);
	  });
	}
	function _serialize$2(view, obj, config) {
	  var math = !config || config.math !== false;
	  var grid = view.$$("cells");
	  var state = grid.getState();
	  var columns = state.ids.concat(state.hidden);

	  // remove "rowId" column
	  columns.splice(columns.indexOf("rowId"), 1);
	  obj.data = getSheetData$1(view, math);
	  webix.extend(obj.table, {
	    frozenColumns: view._frozenColumns || 0,
	    frozenRows: view._frozenRows || 0
	  });
	}
	function _parse$2(view, obj) {
	  var tconfig = obj.table || {
	    frozenColumns: 0,
	    frozenRows: 0
	  };
	  view._frozenColumns = view._frozenRows = 0;
	  if (tconfig) {
	    if (!webix.isUndefined(tconfig.frozenColumns)) view.freezeColumns(tconfig.frozenColumns);
	    if (!webix.isUndefined(tconfig.frozenRows)) view.freezeRows(tconfig.frozenRows);
	  }
	  if (obj.sizes) view.$$("cells").define("fixedRowHeight", false);
	}
	function _undoValue(view, row, column, value) {
	  view.setCellValue(row, column, value);
	}
	function getSheetData$1(view, math, page) {
	  page = page ? view._mData.getPage(page) : view._mPage;
	  return page.serialize(math).map(function (arr) {
	    var value = arr[2].value;
	    if (value === null) value = "";
	    return [++arr[0], ++arr[1], value, arr[2].style || "", arr[2].type];
	  }).filter(function (arr) {
	    return arr[2] || arr[2] === 0 || arr[3];
	  });
	}

	var m17 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getSheetData: getSheetData$1,
		init: init$A
	});

	var options = ["rename-sheet", "remove-sheet", "copy-sheet", "hide-sheet"];
	var actionMap$1 = {
	  "remove-sheet": function (view) {
	    return _remove(view);
	  },
	  "rename-sheet": function (view) {
	    return edit(view);
	  },
	  "new-sheet": function (view) {
	    return add$2(view);
	  },
	  "copy-sheet": function (view) {
	    return copy(view);
	  },
	  "hide-sheet": function (view) {
	    return setState$1(view, view._activeSheet, "hidden");
	  }
	};
	function init$z(view) {
	  view.attachEvent("onComponentInit", function () {
	    return ready$5(view);
	  });
	}
	var numbers = [0.5, 0.75, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 3, 4];
	function defaultBottom(view) {
	  var locale = webix.i18n.spreadsheet.tooltips;
	  var readonly = view.config.readonly;
	  var tabWidth = view.config.sheetTabWidth;
	  var minTabWidth = tabWidth == "auto" ? view.defaults.sheetTabWidth : tabWidth;
	  var toolbar = {
	    view: "toolbar",
	    id: "bottom-toolbar",
	    css: "webix_ssheet_bottom_toolbar webix_layout_toolbar",
	    paddingY: 0,
	    height: 34,
	    elements: [{
	      hidden: readonly,
	      padding: {
	        top: 2,
	        bottom: 2,
	        left: 4
	      },
	      cols: [{
	        view: "icon",
	        icon: "wxi-plus",
	        width: 30,
	        id: "add-sheet",
	        click: function () {
	          return add$2(view);
	        },
	        tooltip: webix.i18n.spreadsheet.tooltips["add-sheet"]
	      }, {
	        view: "icon",
	        icon: "wxi-dots",
	        width: 30,
	        id: "show-sheet",
	        popup: getSheetsPopup(view),
	        tooltip: webix.i18n.spreadsheet.tooltips["show-sheet"]
	      }]
	    }, {
	      id: "sheets",
	      view: "sheets",
	      maxWidth: 5 * minTabWidth,
	      minWidth: minTabWidth,
	      editable: !readonly,
	      editaction: "dblclick",
	      editor: "text",
	      editValue: "value",
	      type: {
	        width: tabWidth,
	        height: 32,
	        template: function (obj) {
	          return "<div style='" + (readonly ? "width: 100%;padding-right:9px;" : "width:calc(100% - 20px);") + "'>" + obj.value + "</div>" + (!readonly ? "<div class='webix_input_icon wxi-menu-down webix_ssheet_sheet_arrow'></div>" : "");
	        },
	        //remove skin selection css on dnd
	        css: "ssheet_order_sheets"
	      },
	      onClick: {
	        webix_ssheet_sheet_arrow: function (e, id) {
	          initSheetMenu(view, e, id);
	        }
	      },
	      on: {
	        onItemClick: function (id) {
	          if (id != view._activeSheet) view.showSheet(id);
	        }
	      }
	    }, {
	      view: "button",
	      type: "htmlbutton",
	      width: 34,
	      id: "prev-sheet",
	      disabled: true,
	      hidden: true,
	      label: "<span class='webix_icon wxi-menu-left'></span>",
	      batch: "pager",
	      click: function () {
	        scrollSheets(view, -1);
	      }
	    }, {
	      view: "button",
	      type: "htmlbutton",
	      width: 34,
	      id: "next-sheet",
	      hidden: true,
	      label: "<span class='webix_icon wxi-menu-right'></span>",
	      batch: "pager",
	      click: function () {
	        scrollSheets(view, 1);
	      }
	    }, {
	      gravity: 0.000001
	    }, {
	      view: "ssheet-zoom",
	      numbers: numbers,
	      value: 1,
	      width: 108,
	      tooltip: locale["scale"],
	      id: "zoom",
	      on: {
	        onChange: function (v, oldV, config) {
	          if (config == "user") view.zoom(v);
	        }
	      }
	    }]
	  };
	  view.callEvent("onViewInit", ["bottom-toolbar", toolbar]);
	  return toolbar;
	}
	function scrollSheets(view, direction) {
	  var sheets = view.$$("sheets");
	  var step = view.config.sheetTabWidth;
	  if (step == "auto") step = view.defaults.sheetTabWidth;
	  sheets.scrollTo(sheets.getScrollState().x + direction * step, 0);
	}
	function menuInit(view) {
	  var data = [];
	  for (var i = 0; i < options.length; i++) data.push({
	    id: options[i],
	    value: webix.i18n.spreadsheet.menus[options[i]] || options[i]
	  });
	  var menu = {
	    view: "ssheet-suggest",
	    data: data
	  };
	  view.callEvent("onViewInit", ["sheet-menu", menu]);
	  return menu;
	}
	function reset$a(view, obj) {
	  var tabs = view.$$("sheets");
	  if (tabs) {
	    tabs.clearAll();
	    var set = [];
	    obj.sheets.forEach(function (sheet) {
	      set.push({
	        id: sheet.name,
	        value: sheet.name
	      });
	    });
	    tabs.parse(set);
	    _filterTabs(view);
	  }
	}
	function ready$5(view) {
	  prepare(view);
	  view.attachEvent("onAfterSheetShow", function (name) {
	    return selectSheet(view, name);
	  });
	  view.attachEvent("onCommand", function (command) {
	    if (actionMap$1[command.id]) actionMap$1[command.id](this);
	  });
	  if (view.$$("sheets")) {
	    view.$$("sheets").data.attachEvent("onStoreUpdated", function () {
	      changePagerVisability(view);
	      changePagerStatus(view);
	    });
	    view.$$("sheets").attachEvent("onAfterRender", webix.once(function () {
	      webix.delay(function () {
	        return changePagerVisability(view);
	      });
	    }));
	    view.$$("sheets").attachEvent("onAfterScroll", function () {
	      return changePagerStatus(view);
	    });
	    view.$$("sheets").attachEvent("onAfterDrop", function (context) {
	      return dataOrder(view, context.start, context.index);
	    });
	    view.$$("sheets").attachEvent("onAfterEditStop", function (state) {
	      return rename(view, state.old, state.value);
	    });
	  }
	}
	function getSheetsPopup(view) {
	  return {
	    view: "popup",
	    css: "webix_ssheet_suggest",
	    width: 125,
	    body: {
	      view: "list",
	      select: true,
	      css: "webix_ssheet_show_list",
	      template: "<span class='webix_icon wxi-#icon#'></span>#id#",
	      on: {
	        onAfterSelect: function (id) {
	          setState$1(view, id, "visible");
	          view.showSheet(id);
	          this.getParentView().hide();
	        }
	      },
	      maxHeight: 200,
	      autoheight: true
	    },
	    on: {
	      onShow: function () {
	        this.getBody().showItem(view.getActiveSheet());
	      },
	      onBeforeShow: function () {
	        var data = view._sheets.filter(function (sheet) {
	          return sheet.state != "veryHidden";
	        }).map(function (sheet) {
	          return {
	            id: sheet.name,
	            icon: sheet.state == "hidden" ? "eye-slash" : "eye"
	          };
	        });
	        var list = this.getBody();
	        list.clearAll();
	        list.parse(data);
	        list.select(view.getActiveSheet());
	      }
	    }
	  };
	}
	function initSheetMenu(view, e, id) {
	  if (!view.$sheetMenu) {
	    view.$sheetMenu = webix.ui(menuInit(view));
	    view._destroy_with_me.push(view.$sheetMenu);
	    view.$sheetMenu.attachEvent("onItemClick", function (id) {
	      return callAction$1(view, id);
	    });
	  }
	  var oneSheet = view.$$("sheets").count() == 1;
	  if (view.$sheetMenu.getItem("remove-sheet")) view.$sheetMenu[oneSheet ? "disableItem" : "enableItem"]("remove-sheet");
	  if (view.$sheetMenu.getItem("hide-sheet")) view.$sheetMenu[oneSheet ? "disableItem" : "enableItem"]("hide-sheet");
	  if (view.callEvent("onBeforeSheetMenu", [id])) view.$sheetMenu.show(e);
	}
	function changePagerStatus(view) {
	  var sheets = view.$$("sheets");
	  var scrollPos = sheets.getScrollState().x;
	  if (scrollPos == 0) view.$$("prev-sheet").disable();else {
	    view.$$("prev-sheet").enable();
	    if (sheets.$view.scrollWidth - scrollPos == sheets.$width) return view.$$("next-sheet").disable();
	  }
	  view.$$("next-sheet").enable();
	}
	function changePagerVisability(view) {
	  var sheets = view.$$("sheets");
	  view.$$("bottom-toolbar").showBatch("pager", sheets.$width != sheets.$view.scrollWidth);
	}
	function dataOrder(view, name, num) {
	  for (var id in view._sheets) {
	    if (view._sheets[id].name == name) {
	      var item = view._sheets.splice(id, 1);
	      view._sheets.splice(num, 0, item[0]);
	      break;
	    }
	  }
	}
	function setState$1(view, sheet, state) {
	  var tab = getSheet(view, sheet);
	  if (state == tab.state || state == "visible" && !tab.state) return;
	  if (state != "visible") {
	    var visibleSheets = getVisible(view);

	    //don't hide last visible tab
	    if (visibleSheets.length == 1 && visibleSheets[0] === tab) return;

	    //select the previous sheet in case we hide the selected sheet
	    if (sheet == view._activeSheet) showPrevious(view, sheet);
	  }
	  tab.state = state;
	  _filterTabs(view);
	  view.callEvent("onSheetStateChange", [sheet, state]);
	}
	function _filterTabs(view) {
	  var tabs = view.$$("sheets");
	  if (tabs) tabs.filter(function (obj) {
	    var state = getSheet(view, obj.id).state;
	    return state != "hidden" && state != "veryHidden";
	  });
	}
	function add$2(view, content, name, show) {
	  var index, newIndex;
	  index = findIndex(view._sheets, function (x) {
	    return x.name == view._activeSheet;
	  });
	  newIndex = index > -1 ? index + 1 : view._sheets.length;
	  if (!name || find(view._sheets, function (sheet) {
	    return sheet.name == name;
	  })) name = getNewTitle(view);
	  content = content || {
	    data: []
	  };
	  view._sheets.splice(newIndex, 0, {
	    name: name,
	    content: content
	  });
	  if (view.$$("sheets")) view.$$("sheets").add({
	    id: name,
	    value: name
	  }, newIndex);
	  view._mData.addPage(name);
	  parseToStore(view, name, content, view.config.prepareData);
	  if (show !== false) view.showSheet(name);
	  view.callEvent("onSheetAdd", [name]);
	  return name;
	}
	function getNewTitle(view) {
	  var index = view._sheets.length + 1;
	  while (getSheet(view, webix.i18n.spreadsheet.labels.sheet + index)) index++;
	  var name = webix.i18n.spreadsheet.labels.sheet + index;
	  return name;
	}
	function selectSheet(view, name) {
	  if (view.$$("sheets")) {
	    view.$$("sheets").select(name);
	    view.$$("sheets").showItem(name);
	  }
	}
	function edit(view, name) {
	  if (!name) name = view._activeSheet;
	  view.$$("sheets").edit(name);
	}
	function _remove(view) {
	  view.confirm({
	    text: webix.i18n.spreadsheet.labels["sheet-remove-confirm"]
	  }).then(function () {
	    remove$2(view, view._activeSheet);
	  });
	}
	function getVisible(view) {
	  return view._sheets.filter(function (s) {
	    return s.state != "hidden" && s.state != "veryHidden";
	  });
	}
	function showPrevious(view, name) {
	  var visibleSheets = getVisible(view);
	  var index = findIndex(visibleSheets, function (x) {
	    return x.name == name;
	  });
	  var prevIndex = index - 1;
	  if (!visibleSheets[prevIndex]) prevIndex = 0;
	  visibleSheets.splice(index, 1);
	  view.showSheet(visibleSheets[prevIndex].name);
	}
	function remove$2(view, name) {
	  if (view._sheets.length > 1) {
	    var visibleSheets = getVisible(view);

	    //don't remove last visible tab
	    if (visibleSheets.length == 1 && visibleSheets[0] === getSheet(view, name)) return;

	    //select the previous sheet in case we remove the selected sheet
	    if (view._activeSheet == name) showPrevious(view, name);
	    var index = findIndex(view._sheets, function (x) {
	      return x.name == name;
	    });
	    view._sheets.splice(index, 1);
	    view._mData.removePage(name);
	    if (view.$$("sheets")) {
	      view.$$("sheets").remove(name);
	      view.$$("sheets").refresh();
	    }
	    view.callEvent("onSheetRemove", [name]);
	  }
	}
	function rename(view, name, newName) {
	  if (name == newName) return;

	  //correct sheet name
	  var i = 1;
	  while (!newName || getSheet(view, newName)) {
	    newName = webix.i18n.spreadsheet.labels.sheet + i;
	    i++;
	  }
	  newName = newName.replace(/[*?:[\]\\/]/g, "").substring(0, 31);
	  var sheet = getSheet(view, name);
	  var sheets = view.$$("sheets");
	  sheet.name = newName;
	  if (view._activeSheet == name) view._activeSheet = newName;
	  if (sheets) {
	    var item = sheets.getItem(name);
	    item.value = newName;
	    sheets.data.changeId(name, newName);
	    sheets.refresh(newName);
	  }
	  view._mData.renamePage(name, newName);
	  view.callEvent("onSheetRename", [name, newName]);
	}
	function serialize$e(view, obj, config) {
	  var active = getSheet(view, view._activeSheet);
	  active.content = obj;
	  active.state = active.state || "visible";
	  var sheets = webix.copy(view._sheets);
	  var math = !config || config.math !== false;
	  var compactStyles = config && config.compactStyles;
	  sheets.forEach(function (sheet) {
	    if (sheet.name != view._activeSheet) {
	      sheet.content.data = getSheetData$1(view, math, sheet.name);
	      sheet.state = sheet.state || "visible";
	      if (compactStyles) sheet.content.styles = removeUnusedStyles(sheet.content);
	      sheet.content.ranges = view.ranges.serialize(sheet.name);
	    }
	  });
	  return sheets;
	}
	function parseToStore(view, name, obj, prepareData) {
	  view.ranges.parse(obj.ranges, name);
	  webix.extend(obj, {
	    styles: [],
	    formats: [],
	    editors: []
	  });
	  var page = view._mData.getPage(name);
	  var data = obj.data.map(function (arr) {
	    var invalidValue = webix.isUndefined(arr[2]) || arr[2] === null;
	    if (prepareData) {
	      if (invalidValue) arr[2] = "";else {
	        var linkRegex = /^=link\(/i;
	        if (typeof arr[2] == "string" && linkRegex.test(arr[2])) {
	          // LINK is deprecated
	          arr[2] = arr[2].replace(linkRegex, "=HYPERLINK(");
	        }
	      }
	      var cell = loadCell(view, obj, arr);
	      //cell value and type can be changed via types module
	      arr[2] = cell.value;
	      arr[3] = arr[3] || "";
	      arr[4] = cell.type;
	      prepareCell(arr, obj);
	    } else if (invalidValue) throw "unsupported value in ".concat(escapeSheet(name), "!").concat(encode[arr[0]]).concat(arr[1]);
	    return [arr[0] - 1, arr[1] - 1, {
	      value: arr[2],
	      type: arr[4],
	      style: arr[3],
	      $format: checkFormat({
	        fmt: getFormatFromData(obj, arr)
	      }, "string") ? 1 : 0
	    }];
	  });
	  page.parse(data, true);
	}
	function prepareCell(cell, data, update) {
	  var isDate = cell[4] == "date";
	  if (isDate || update) {
	    var isString = typeof cell[2] == "string";
	    var link = update && isString && /^=hyperlink\(/i.test(cell[2]);
	    var styleProperties = cell[3] ? find(data.styles, function (style) {
	      return style[0] == cell[3];
	    }) : null;
	    var styleObj = styleProperties ? styleFromText(styleProperties[1]) : {};
	    var editor = isDate && data.editors ? find(data.editors, function (editor) {
	      return editor[0] == cell[0] && editor[1] == cell[1];
	    }) : null;
	    if (isDate && (!styleProperties || !styleObj.format) || link) {
	      var props = {};
	      if (link) {
	        cell[3] = "wss_link" + (styleProperties ? "_" + cell[3] : "");
	        props = {
	          color: "#0000ff",
	          underline: "underline"
	        };
	      } else if (isString && /^=time\(/i.test(cell[2])) {
	        cell[3] = "wss_load_time" + (styleProperties ? "_" + cell[3] : "");
	        props.format = cell[3] + "_fmt";
	        data.formats.push([props.format, webix.i18n.spreadsheet.formats.timeFormat]);
	      } else {
	        cell[3] = "wss_load_date" + (styleProperties ? "_" + cell[3] : "");
	        props.format = "date";
	      }
	      if (isDate && !editor) {
	        if (!data.editors) data.editors = [];
	        data.editors.push([cell[0], cell[1], {
	          editor: "excel_date"
	        }]);
	      }
	      if (!find(data.styles, function (style) {
	        return style[0] == cell[3];
	      })) data.styles.push([cell[3], styleToText({
	        props: webix.extend(styleObj, props, true)
	      })]);
	    }
	  }
	}
	function load$a(view, obj, excel) {
	  view._loading_data = true;
	  obj = webix.isArray(obj) ? {
	    sheets: obj
	  } : obj;
	  var prepareData = view.config.prepareData || excel;
	  if (!obj.sheets && view._activeSheet) {
	    //loading into active sheet
	    var name = view._activeSheet;
	    getSheet(view, name).content = obj;
	    parseToStore(view, name, obj, prepareData);
	    refresh$1(view, obj);
	  } else {
	    //creating new set of sheets
	    prepare(view, obj, prepareData);
	  }
	  view._loading_data = false;
	}
	function prepare(view, obj, prepareData) {
	  if (!obj) obj = {
	    data: []
	  };
	  if (!obj.sheets) {
	    obj = newSheet(obj);
	  }
	  view._activeSheet = "";
	  view._sheets = obj.sheets;
	  view._mData = new Er({
	    strict: view.config.strict
	  });

	  // first add all pages then parse data in them
	  obj.sheets.forEach(function (sheet) {
	    view._mData.addPage(sheet.name);
	  });
	  obj.sheets.forEach(function (sheet) {
	    var content = sheet.content;
	    var sheetName = sheet.name;
	    parseToStore(view, sheetName, content, prepareData);
	  });
	  reset$a(view, obj);
	  show(view, getVisible(view)[0].name);
	}
	function newSheet(obj) {
	  return {
	    sheets: [{
	      name: webix.i18n.spreadsheet.labels.sheet + 1,
	      content: obj
	    }]
	  };
	}
	function show(view, name) {
	  if (name == view._activeSheet) return;
	  if (view.callEvent("onBeforeSheetShow", [name])) {
	    if (view._activeSheet) getSheet(view, view._activeSheet).content = view.serialize();
	    view._activeSheet = name;
	    var obj = getSheet(view, name).content;
	    view._mPage = view._mData.getPage(name);
	    refresh$1(view, obj);
	    view.callEvent("onAfterSheetShow", [name]);
	  }
	}
	function getSheet(view, name) {
	  return find(view._sheets, function (x) {
	    return x.name == name;
	  });
	}
	function isVisible(view, sheet) {
	  sheet = getSheet(view, sheet);
	  return sheet.state != "hidden" && sheet.state != "veryHidden";
	}
	function refresh$1(view, obj) {
	  var data = getSheetData$1(view);
	  var _arr$getDimension = getDimension(data, obj.spans, view.config.rowCount, view.config.columnCount),
	    _arr$getDimension2 = _slicedToArray(_arr$getDimension, 2),
	    rows = _arr$getDimension2[0],
	    cols = _arr$getDimension2[1];
	  if (rows != view.config.rowCount || cols != view.config.columnCount) {
	    view.config.rowCount = rows;
	    view.config.columnCount = cols;
	    view._resetTable();
	  }
	  updateMaxColumn(cols);
	  view.callEvent("onReset", []);
	  view._loading_data = true;
	  view.callEvent("onDataParse", [obj]);
	  view._loading_data = false;
	  view._table.refresh();
	  if (view.config.bottombar) view.$$("sheets").refresh();
	}
	function copy(view) {
	  add$2(view, view.serialize());
	}
	function callAction$1(view, id) {
	  if (!view.$sheetMenu.data.getMark(id, "webix_disabled")) {
	    if (actionMap$1[id]) actionMap$1[id](view);else view.callEvent("onCommand", [{
	      id: id
	    }]);
	  }
	}

	function init$y(view) {
	  if (view.config.resizeCell) {
	    var grid = view.$$("cells");
	    grid.define("resizeRow", {
	      headerOnly: true,
	      size: 10
	    });
	    grid.define("resizeColumn", {
	      headerOnly: true,
	      size: 10
	    });
	    grid.define("fixedRowHeight", false);
	    grid.attachEvent("onRowResize", function (id) {
	      view.$$("cells").refreshSelectArea();
	      save(view, "sizes", {
	        row: id,
	        column: 0,
	        size: view.$$("cells").getItem(id).$height,
	        page: view.getActiveSheet()
	      });
	    });
	    grid.attachEvent("onColumnResize", function (id) {
	      view.$$("cells").refreshSelectArea();
	      save(view, "sizes", {
	        row: 0,
	        column: id,
	        size: view.getColumn(id).width,
	        page: view.getActiveSheet()
	      });
	    });

	    // undo
	    view.attachEvent("onUndo", function (type, row, column, value) {
	      if (type == "c-resize" || type == "r-resize") _undoResize(view, row, column, value);
	    });
	  }
	  view.attachEvent("onDataParse", function (data) {
	    load$9(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    serialize$d(view, data);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") updatePosition$7(view, p.name, p.inc, p.data, p.start);
	  });
	  view.attachEvent("onBeforeStyleChange", function (row, column, n, o) {
	    if (o && o.props.wrap === "wrap" && (!n || n.props.wrap != o.props.wrap)) {
	      delete view._table.getItem(row).$height;
	    }
	  });
	  view.attachEvent("onStyleChange", function (r, c) {
	    return _adjustRowHeight(view, r, c);
	  });
	  view.attachEvent("onCellChange", function (r, c, v, p) {
	    if (p == view.getActiveSheet()) _adjustRowHeight(view, r, c);
	  });
	}
	function serialize$d(view, data, oldZoom) {
	  var sizes = [];
	  var grid = view.$$("cells");
	  var columns = grid.getState().order;
	  var order = grid.data.order;
	  var zoom = oldZoom || view._zoom;
	  var defWidth = grid.config.columnWidth;
	  var defHeight = grid.config.rowHeight;
	  for (var i = 1; i < columns.length; i++) {
	    var width = Math.ceil(grid.getColumnConfig(columns[i]).width / zoom);
	    if (width && width != defWidth) sizes.push([0, i, width]);
	  }
	  for (var _i = 0; _i < order.length; _i++) {
	    var height = Math.ceil(grid.getItem(order[_i]).$height / zoom);
	    if (height && height != defHeight) sizes.push([order[_i] * 1, 0, height]);
	  }
	  data.sizes = sizes;
	}
	function load$9(view, data) {
	  var zoom = 1;
	  if (data.table && data.table.zoom) zoom = data.table.zoom;
	  var grid = view.$$("cells");
	  var defWidth = grid.config.columnWidth;
	  var defHeight = grid.config.rowHeight;
	  for (var i = 1; i <= view.config.rowCount; i++) {
	    var row = view.$$("cells").getItem(i);
	    row.$height = defHeight * zoom;
	  }
	  var rowHeight = (webix.skin.$name == "contrast" || webix.skin.$name == "flat" ? 24 : 20) * zoom;
	  var rowId = view.getColumn("rowId");
	  rowId.width = 40 * zoom;
	  rowId.header[0].height = rowHeight;
	  for (var _i2 = 1; _i2 <= view.config.columnCount; _i2++) {
	    var col = view.getColumn(_i2);
	    col.header[0].height = rowHeight;
	    col.width = defWidth * zoom;
	  }
	  if (data.sizes) {
	    for (var _i3 = 0; _i3 < data.sizes.length; _i3++) {
	      var size = data.sizes[_i3];
	      if (size[0] * 1 !== 0) {
	        var _row = view.$$("cells").getItem(size[0]);
	        if (_row) _row.$height = size[2] * zoom;
	      } else {
	        var _col = view.getColumn(size[1]);
	        if (_col) _col.width = size[2] * zoom;
	      }
	    }
	  }
	  view.refresh(true);
	}
	function zoomSizes(view, oldZoom) {
	  var data = {
	    table: {
	      zoom: view._zoom
	    }
	  };
	  serialize$d(view, data, oldZoom);
	  load$9(view, data);
	}
	function _undoResize(view, row, column, value) {
	  var table = view.$$("cells");
	  if (row) {
	    table.getItem(row).$height = value;
	    save(view, "sizes", {
	      row: row,
	      column: 0,
	      size: value,
	      page: view.getActiveSheet()
	    });
	  } else {
	    table.setColumnWidth(column, value);
	  }
	  // update area selection
	  table.refreshSelectArea();
	}
	function updatePosition$7(view, name, inc, data, start) {
	  var i,
	    sizes = data.sizes,
	    nsizes = [];
	  if (inc) {
	    for (i = sizes.length - 1; i >= 0; i--) {
	      var _sizes$i = _slicedToArray(sizes[i], 3),
	        row = _sizes$i[0],
	        column = _sizes$i[1],
	        size = _sizes$i[2];
	      if (row && name == "row" && row >= start.row) {
	        if (inc < 0 && row < start.row - inc) continue;
	        nsizes.push([row * 1 + inc, column, size]);
	      } else if (column && name == "column" && column >= start.column) {
	        if (inc < 0 && column < start.column - inc) continue;
	        nsizes.push([row, column * 1 + inc, size]);
	      } else nsizes.push(sizes[i]);
	    }
	    if (inc > 0) {
	      //col/row add: set sizes according to the selected area
	      if (name == "column") {
	        var _loop = function (_i4) {
	          var size = find(sizes, function (arr) {
	            return arr[1] == start.column + _i4;
	          });
	          if (size) nsizes.push([0, start.column + _i4, size[2]]);
	        };
	        for (var _i4 = 0; _i4 < inc; _i4++) {
	          _loop(_i4);
	        }
	      } else {
	        var _loop2 = function (_i5) {
	          var size = find(sizes, function (arr) {
	            return arr[0] == start.row + _i5;
	          });
	          if (size) nsizes.push([start.row + _i5, 0, size[2]]);
	        };
	        for (var _i5 = 0; _i5 < inc; _i5++) {
	          _loop2(_i5);
	        }
	      }
	    }
	    data.sizes = nsizes;
	  }
	}
	function _adjustRowHeight(view, row, column) {
	  if (view._loading_data) return;
	  var style = getStyle$1(view, {
	    row: row,
	    column: column
	  });

	  //changing styles or content of wrapped cell -> resize the related row
	  if (style && style.props.wrap) {
	    var grid = view._table;
	    var item = grid.getItem(row);
	    var height = item.$height || grid.config.rowHeight;
	    grid.eachColumn(function (col, config) {
	      var style = getStyle$1(view, {
	        row: row,
	        column: col
	      });
	      //include only cells with active wrap into calculation 
	      if (style && style.props && style.props.wrap === "wrap") {
	        var text = this.getText(row, col);
	        var baseWidth = config.width;
	        var span = grid.getSpan(row, col);
	        var spanHeight;
	        if (span) {
	          var node = grid.getSpanNode({
	            row: span[0],
	            column: span[1]
	          });
	          baseWidth = node.offsetWidth;
	          spanHeight = node.offsetHeight;
	        }
	        if (view.getCellEditor(row, col) || view.getCellFilter(row, col)) baseWidth += 20;
	        var textHeight = getTextSize(view, text, style.id, baseWidth).height;
	        if (spanHeight) textHeight = spanHeight >= textHeight ? 0 : textHeight - spanHeight + height;
	        height = Math.max(height, textHeight);
	      }
	    });
	    item.$height = height;
	  }
	}

	var m3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$y,
		load: load$9,
		zoomSizes: zoomSizes
	});

	var lockCss = "webix_lock";
	function init$x(view) {
	  view._locks = {};
	  view.attachEvent("onReset", function () {
	    return reset$9(view);
	  });
	  view.attachEvent("onUndo", function (type, row, column, mode) {
	    if (type === "lock") lockCell$1(view, row, column, !!mode, true);
	  });
	  view.attachEvent("onCommand", function (cm) {
	    if (cm.id === "lock-cell") lock(view);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") updatePosition$6(view, p.name, p.inc, p.data, p.start);
	  });
	}
	function reset$9(view) {
	  view._locks = {};
	}
	function lockCell$1(view, row, column, mode, silent, pageName, innerCall) {
	  var activeSheet = view.getActiveSheet();
	  if (!pageName) pageName = activeSheet;
	  var table = view.$$("cells");
	  if (_typeof(row) === "object" && _typeof(column) === "object") {
	    group.set(function () {
	      _mapCellsCalls(row, column, function (row, column) {
	        lockCell$1(view, row, column, mode, true, pageName, true);
	      });
	    });
	  } else {
	    mode = mode === false ? false : true;
	    if (pageName == activeSheet) {
	      var objrow = view._locks[row] = view._locks[row] || {};
	      objrow[column] = mode;
	      if (mode) table.addCellCss(row, column, lockCss, true);else table.removeCellCss(row, column, lockCss, true);
	    } else {
	      var page = find(view._sheets, function (sheet) {
	        return sheet.name == pageName;
	      });
	      if (page) {
	        var locked = page.content.locked;
	        if (locked) {
	          var _locked = page.content.locked;
	          var index = findIndex(_locked, function (cell) {
	            return cell[0] == row && cell[1] == column;
	          });
	          if (mode) {
	            if (index == -1) _locked.push([row, column]);
	          } else if (index != -1) _locked.splice(index, 1);
	        } else if (!locked && mode) page.content.locked = [[row, column]];
	      }
	    }
	  }
	  if (!innerCall) view.callEvent("onAction", ["lock", {
	    row: row,
	    column: column,
	    value: !mode,
	    newValue: mode
	  }]);
	  if (!silent) table.refresh();
	}
	function _mapCellsCalls(start, end, handler, master) {
	  for (var x = start.row; x <= end.row; x++) for (var y = start.column; y <= end.column; y++) handler.call(this, x, y);
	}
	function isCellLocked$1(view, row, column, page) {
	  if (!page || page == view.getActiveSheet()) return view._locks[row] ? view._locks[row][column] || false : false;else {
	    page = find(view._sheets, function (sheet) {
	      return sheet.name == page;
	    });
	    if (page && page.content.locked) return !!find(page.content.locked, function (cell) {
	      return cell[0] == row && cell[1] == column;
	    });
	    return false;
	  }
	}
	function serialize$c(view, data) {
	  var locked = [];
	  for (var row in view._locks) {
	    for (var column in view._locks[row]) if (view._locks[row][column]) locked.push([row, column]);
	  }
	  data.locked = locked;
	}
	function load$8(view, data) {
	  var locked = data.locked;
	  if (locked) for (var i = 0; i < locked.length; i++) lockCell$1(view, locked[i][0], locked[i][1], true, true);
	}
	function lock(view) {
	  var block = view.$$("cells").getSelectArea();
	  if (block) {
	    var mode = view.isCellLocked(block.start.row, block.start.column);
	    view.lockCell(block.start, block.end, !mode);
	  }
	}
	function updatePosition$6(view, name, inc, data, start) {
	  var locked = data.locked,
	    i = locked.length;
	  if (inc) {
	    while (i--) {
	      var _locked$i = _slicedToArray(locked[i], 2),
	        row = _locked$i[0],
	        column = _locked$i[1];
	      if (row && name == "row" && row >= start.row || column && name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc)
	            //delete lock mark if row was deleted
	            locked.splice(i, 1);else
	            //update mark position if upper row was deleted
	            locked[i][0] = row * 1 + inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            locked.splice(i, 1);
	          } else locked[i][1] = column * 1 + inc;
	        }
	      }
	    }
	  }
	}

	var m14 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$x,
		isCellLocked: isCellLocked$1,
		load: load$8,
		lockCell: lockCell$1,
		lockCss: lockCss,
		serialize: serialize$c
	});

	function init$w(view) {
	  view.attachEvent("onStyleChange", function (row, column, style) {
	    var span = getSpan$1(view, row, column);
	    if (span) {
	      var extraCss = getExtraCss(view, row, column);
	      span[3] = (style ? style.id : "") + (extraCss ? " " + extraCss : "");
	    }
	  });
	  view.attachEvent("onDataParse", function (data) {
	    parse$2(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    serialize$b(view, data);
	  });
	  view.attachEvent("onUndo", function (type, row, column, value, isUndo) {
	    if (type == "span" || type == "split") {
	      if (type == "span") isUndo = !isUndo;
	      undoSpan(view, row, column, value, isUndo);
	    }
	  });
	  view.attachEvent("onAction", function (name, options) {
	    if (name == "lock" && options.page == view.getActiveSheet()) setSpanCss(view, options.row, options.column, lockCss, options.newValue);else if (name == "before-grid-change") updatePosition$5(view, options.name, options.inc, options.data, options.start);else if (name == "check-borders") return checkSpanBorders(view, options.row, options.column, options.area, options.mode);
	  });
	}
	function getSpan$1(view, row, column) {
	  var item = view.$$("cells").getSpan()[row];
	  if (item) return item[column];
	}
	function parse$2(view, data) {
	  if (data.spans) for (var i = 0; i < data.spans.length; i++) {
	    var span = data.spans[i];
	    addSpan(view, {
	      row: span[0],
	      column: span[1]
	    }, span[2] * 1, span[3] * 1, true);
	  }
	}
	function serialize$b(view, data) {
	  var spans = [];
	  var pull = view.$$("cells").getSpan();
	  if (pull) {
	    for (var rid in pull) {
	      var row = pull[rid];
	      for (var cid in row) {
	        var span = row[cid];
	        spans.push([rid * 1, cid * 1, span[0], span[1]]);
	      }
	    }
	    data.spans = spans;
	  }
	  return data;
	}
	function addSpan(view, cell, x, y, silent, page) {
	  page = page || view.getActiveSheet();
	  if (x < 2 && y < 2) return;
	  if (silent || view.callEvent("onBeforeSpan", [cell.row, cell.column, [x, y], page])) {
	    if (page == view.getActiveSheet()) {
	      var obj = view._mPage.getCell(cell.row - 1, cell.column - 1);
	      var css = obj && obj.style || "";
	      var extraCss = getExtraCss(view, cell.row, cell.column);
	      if (extraCss) css += " " + extraCss;
	      view.$$("cells").addSpan(cell.row, cell.column, x, y, null, css);
	    } else {
	      var sheet = getSheet(view, page);
	      if (sheet) {
	        if (!sheet.content.spans) sheet.content.spans = [];
	        sheet.content.spans.push([cell.row, cell.column, y, x]);
	      }
	    }
	    setSpanValue(view, cell, x, y, page);
	    if (!silent) {
	      view.callEvent("onAfterSpan", [cell.row, cell.column, [x, y], page]);
	      save(view, "spans", {
	        page: page,
	        row: cell.row,
	        column: cell.column,
	        x: x,
	        y: y
	      });
	    }
	  }
	}
	function removeSpan(view, cell, page) {
	  page = page || view.getActiveSheet();
	  var span, index, sheet;
	  var isActiveSheet = page == view.getActiveSheet();
	  if (isActiveSheet) span = view.$$("cells").getSpan(cell.row, cell.column);else {
	    sheet = getSheet(view, page);
	    if (sheet && sheet.content.spans) {
	      index = findIndex(sheet.content.spans, function (span) {
	        return span[0] == cell.row && span[1] == cell.column;
	      });
	      if (index != -1) span = sheet.content.spans[index];
	    }
	  }
	  if (span && view.callEvent("onBeforeSplit", [cell.row, cell.column, [span[2], span[3]], page])) {
	    if (isActiveSheet) view.$$("cells").removeSpan(cell.row, cell.column);else sheet.content.spans.splice(index, 1);
	    view.callEvent("onAfterSplit", [cell.row, cell.column, [span[2], span[3]], page]);
	    save(view, "spans", {
	      row: cell.row,
	      column: cell.column,
	      x: 0,
	      y: 0,
	      page: page
	    });
	  }
	}
	function getRange$1(sel) {
	  var lx, ly, rx, ry;
	  rx = ry = 0;
	  lx = ly = Infinity;
	  for (var i = 0; i < sel.length; i++) {
	    var cx = sel[i].column * 1;
	    var cy = sel[i].row * 1;
	    lx = Math.min(cx, lx);
	    rx = Math.max(cx, rx);
	    ly = Math.min(cy, ly);
	    ry = Math.max(cy, ry);
	  }
	  return {
	    cell: {
	      row: ly,
	      column: lx
	    },
	    x: rx - lx + 1,
	    y: ry - ly + 1
	  };
	}
	function setSpanCss(view, row, column, css, add) {
	  var span = getSpan$1(view, row, column);
	  if (span) {
	    if (add) {
	      if (span[3].indexOf(css) == -1) span[3] += " " + css;
	    } else {
	      span[3] = span[3].replace(" " + css, "");
	    }
	  }
	}
	function getExtraCss(view, row, column) {
	  var extraCss = [];
	  if (view.getCellEditor(row, column)) extraCss.push("ss_editor");
	  if (view.getCellFilter(row, column)) extraCss.push("ss_filter");
	  return extraCss.join(" ");
	}
	function undoSpan(view, row, column, value, isUndo) {
	  if (isUndo) {
	    removeSpan(view, {
	      row: row,
	      column: column
	    });
	  } else {
	    addSpan(view, {
	      row: row,
	      column: column
	    }, value[0], value[1]);
	  }
	}
	function updatePosition$5(view, name, inc, data, start) {
	  var spans = data.spans;
	  if (inc) {
	    for (var i = spans.length - 1; i >= 0; i--) {
	      var _spans$i = _slicedToArray(spans[i], 2),
	        row = _spans$i[0],
	        column = _spans$i[1];
	      if (inc < 0) {
	        //deleting
	        if (name == "row" && row <= start.row - inc - 1) inc = start.row - spans[i][0];else if (name == "column" && column <= start.column - inc - 1) inc = start.column - spans[i][1];
	      }
	      if (name == "row" && row >= start.row || name == "column" && column >= start.column) {
	        spans[i][0] = name == "row" ? row * 1 + inc : row;
	        spans[i][1] = name == "column" ? column * 1 + inc : column;
	      }
	    }
	  }
	}
	var borderChecks = {
	  "border-right": function (row, column, span, area) {
	    return area.end.column == column + span[0] - 1;
	  },
	  "border-bottom": function (row, column, span, area) {
	    return area.end.row == row + span[1] - 1;
	  }
	};
	function checkSpanBorders(view, row, column, area, mode) {
	  var span = getSpan$1(view, row, column);
	  return span && borderChecks[mode] ? borderChecks[mode](row, column, span, area) : false;
	}

	// clear merged cells except the first one
	function setSpanValue(view, cell, x, y, page) {
	  var row = cell.row * 1;
	  var column = cell.column * 1;
	  var isEmpty = !view.getCellValue(row, column, page);
	  for (var i = row; i < row + y; i++) {
	    for (var j = column; j < column + x; j++) {
	      var value = view.getCellValue(i, j, page);
	      if (value !== "" && (j != column || i != row)) {
	        if (isEmpty) {
	          isEmpty = false;
	          view.setCellValue(row, column, value, page);
	        }
	        view.setCellValue(i, j, "", page);
	      }
	    }
	  }
	}
	function adjustSpan(span, action, start, end, view, data, spanData) {
	  var length = action.group == "row" ? span[3] : span[2];
	  var checkSpan = action.group == "row" ? [span[0] * 1, span[0] * 1 + span[3] - 1] : [span[1] * 1, span[1] * 1 + span[2] - 1];
	  var selection = action.group == "row" ? [start.row, end.row] : [start.column, end.column];

	  //if we add, the number of selected rows/cols is added to span, so we need original selection length
	  var inc = selection[1] - selection[0] + 1;
	  selection[0] = Math.max(selection[0], checkSpan[0]);
	  selection[1] = Math.min(selection[1], checkSpan[1]);
	  var isFirstCell = selection[0] == checkSpan[0];
	  if (selection[0] <= selection[1]) {
	    //selection is in span
	    if (action.id == "del")
	      //if we delete, only rows/cols included into span
	      inc = (selection[1] - selection[0] + 1) * -1;
	    //delete smth which starts as span and less than it's length
	    if (action.id == "del" && isFirstCell && length > -1 * inc) {
	      var item = find(data, function (arr) {
	        return arr[0] == span[0] && arr[1] == span[1];
	      });
	      if (item) spanData.push(item);
	    }
	    if (!(isFirstCell && action.id == "add")) {
	      span[2] = action.group == "column" ? span[2] + inc : span[2];
	      span[3] = action.group == "row" ? span[3] + inc : span[3];
	    }
	  }
	  return span;
	}
	function pasteSpan(view, extra, row, col, cutted, translate) {
	  //existing span
	  var s = view._table.getSpan(row, col);
	  if (extra && extra.span) {
	    var span = extra.span;
	    //if we are on start position for the future span
	    if (row == span[0] * 1 + translate.row && col == span[1] * 1 + translate.column) {
	      //delete spans in future paste zone 
	      view._table.mapCells(row, col, span[3], span[2], function (value, rid, cid) {
	        s = view._table.getSpan(rid, cid);
	        if (s) removeSpan(view, {
	          row: s[0],
	          column: s[1]
	        });
	      }, true);
	      addSpan(view, {
	        row: row,
	        column: col
	      }, span[2], span[3]);
	      if (cutted === 1) removeSpan(view, {
	        row: extra.row,
	        column: extra.col
	      });
	    }
	  } else if (s) removeSpan(view, {
	    row: s[0],
	    column: s[1]
	  });
	}

	var m16 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addSpan: addSpan,
		adjustSpan: adjustSpan,
		getRange: getRange$1,
		init: init$w,
		pasteSpan: pasteSpan,
		removeSpan: removeSpan,
		serialize: serialize$b,
		setSpanCss: setSpanCss
	});

	function print(view, options, htmlOnly) {
	  var views = [];
	  var order = {};
	  var active = view._activeSheet;
	  var html = _buildHtml(view, options, active, views, order);
	  view.showSheet(active);
	  var promise = webix.promise.defer();
	  webix.promise.all(views).then(function (res) {
	    var keys = Object.keys(order).sort(view.$$("cells").data.sorting.as["int"]);
	    for (var i = keys.length - 1; i >= 0; i--) {
	      var index = keys[i];
	      html.insertBefore(res[index], html.childNodes[order[index]]);
	    }
	    if (htmlOnly) return promise.resolve(html);
	    webix.html.insertBefore(html, options.docFooter, document.body);
	    window.print();
	    _cleanHtml(view, html);
	    promise.resolve();
	  });
	  return promise;
	}
	function init$v(view) {
	  view.$customPrint = function (options, htmlOnly) {
	    return print(view, options, htmlOnly);
	  };
	  view._printBorders = {
	    paper: webix.env.printSizes.find(function (s) {
	      return s.id == "a4";
	    }) ? "a4" : webix.env.printSizes[0].id,
	    fit: "page",
	    mode: "landscape",
	    margin: 1,
	    sheetnames: 1,
	    $renderedSpanBorders: {}
	  };
	  view.attachEvent("onUndo", function (action, row, column, value) {
	    if (action == "print-borders") view.showPrintBorders(value);
	  });
	  view.attachEvent("onAfterSheetShow", function () {
	    return showBorders(view, true);
	  });
	  view.attachEvent("onChange", function (type, page) {
	    if (type == "update" && page == view.getActiveSheet()) showBorders(view, true);
	  });
	  view.attachEvent("onAfterSplit", function (r, c, span, page) {
	    var renderedSpanBorders = view._printBorders.$renderedSpanBorders;
	    if (page == view.getActiveSheet() && renderedSpanBorders[r] && renderedSpanBorders[r][c]) {
	      for (var type in renderedSpanBorders[r][c]) webix.html.remove(renderedSpanBorders[r][c][type]);
	      delete renderedSpanBorders[r][c];
	    }
	  });
	}
	function _cleanHtml(view, html) {
	  webix.html.remove(html);
	  view._sheets.forEach(function (sheet, i) {
	    webix.html.removeStyle(".wss_" + view.$index + "_" + i);
	  });
	}
	function _buildHtml(view, options, active, views, order) {
	  var doc = webix.html.create("div", {
	    "class": "webix_ssheet_print"
	  });
	  options.xCorrection = 1;
	  options.header = options.header || false;
	  options.trim = webix.isUndefined(options.trim) ? true : options.trim;
	  options.sheetnames = webix.isUndefined(options.sheetnames) ? true : options.sheetnames;
	  var baseIndex = view.$index;
	  var pageSize = getPageSize(options);
	  var sheets = options.sheets;

	  // backward compatibility, options.data can be only "selection"
	  // "current" and "all" are deprecated
	  var data = options.data;
	  if (!sheets || data == "current" || data == "selection") sheets = [active];else if (typeof sheets == "string") sheets = [sheets];else if (sheets === true || data == "all") sheets = view._sheets.map(function (sheet) {
	    return sheet.name;
	  });
	  sheets = sheets.filter(function (sheet) {
	    return isVisible(view, sheet);
	  });
	  sheets.forEach(function (name, i) {
	    view.$index = baseIndex + "_" + i;
	    var grid = view.$$("cells");
	    view.showSheet(name);
	    var oldZoom = view._zoom;
	    view.ignoreUndo(function () {
	      return view.zoom(1);
	    });
	    var prefix = "wss_" + view.$index;
	    view._print = true;
	    var table = grid.$customPrint(options, true);
	    delete view._print;
	    var tbl = table.firstChild;
	    if (tbl) {
	      var _tbl$children = _slicedToArray(tbl.children, 2),
	        header = _tbl$children[0],
	        body = _tbl$children[1];
	      var topSplit = header.childElementCount;
	      var sheetName = options.sheetnames ? 20 : 0;
	      var splitHeight = sheetName;
	      for (var s = 1; s <= topSplit; s++) splitHeight += grid.getItem(s).$height || grid.config.rowHeight;
	      if (splitHeight > pageSize.height / 4) for (var _i = topSplit - 1; _i >= 0; _i--) {
	        if (body.firstChild) webix.html.insertBefore(header.children[_i], body.firstChild);else body.appendChild(header.children[_i]);
	      }
	      if (sheetName) {
	        var sheetNode = webix.html.create("tr", {
	          "class": "webix_ssheet_sheetname"
	        }, "<td>".concat(name, ":</td>"));
	        if (header.firstChild) webix.html.insertBefore(sheetNode, header.firstChild);else header.appendChild(sheetNode);
	      }
	      var node = table.firstChild;
	      if (node) {
	        if (name != active) webix.html.removeCss(node, "wss_" + baseIndex);
	        webix.html.addCss(node, prefix);
	      }
	      doc.appendChild(table);
	    }
	    if (options.external) {
	      var _loop = function () {
	        var innerView = view.views._pull[id];
	        if (innerView.type == "image") {
	          var img = webix.html.create("IMG", {
	            src: innerView.data,
	            width: (innerView.config.width || 500) + "px",
	            height: (innerView.config.height || 300) + "px"
	          });
	          var promise = webix.promise.defer();
	          views.push(promise);
	          img.onload = function () {
	            return promise.resolve();
	          };
	          doc.appendChild(img);
	        } else {
	          var externalUI = webix.$$(id).getBody();
	          if (externalUI.$customPrint) {
	            var customPrint = externalUI.$customPrint({
	              size: options.size
	            }, true);
	            if (customPrint.then) {
	              order[views.length] = doc.childElementCount;
	              views.push(customPrint);
	            } else doc.appendChild(customPrint);
	          } else doc.appendChild(printInnerView(webix.$$(id).getBody()));
	        }
	      };
	      for (var id in view.views._pull) {
	        _loop();
	      }
	    }
	    if (i + 1 < view._sheets.length && (tbl || options.external && Object.keys(view.views._pull).length)) {
	      var br = webix.html.create("DIV", {
	        "class": "webix_print_pagebreak"
	      });
	      doc.appendChild(br);
	    }
	    view.$index = baseIndex;
	    view.ignoreUndo(function () {
	      return view.zoom(oldZoom);
	    });
	  });
	  return doc;
	}
	function printInnerView(view) {
	  var body = view.$view.cloneNode(true);

	  //copy data from all canvases
	  var canvases = view.$view.getElementsByTagName("canvas");
	  if (canvases.length) for (var i = canvases.length - 1; i >= 0; i--) {
	    var destCtx = body.getElementsByTagName("canvas")[i].getContext("2d");
	    destCtx.drawImage(canvases[i], 0, 0);
	  }
	  var container = webix.html.create("div", {
	    "class": "webix_ssheet_ui"
	  });
	  container.appendChild(body);
	  return container;
	}
	function getPageSize(options) {
	  var size = webix.env.printSizes.find(function (size) {
	    return size.id == options.paper;
	  });
	  var landscape = options.mode == "landscape";
	  var margin = options.margin ? 2 * webix.env.printMargin : 0;
	  return {
	    width: size[landscape ? "height" : "width"] * webix.env.printPPI - margin,
	    height: size[landscape ? "width" : "height"] * webix.env.printPPI - margin
	  };
	}
	function showBorders(view, redraw) {
	  if (redraw && !view._printBorders.$render) return;
	  removePrintInnerBorders(view);
	  var borders = {
	    rows: {},
	    cols: {}
	  };
	  var grid = view.$$("cells");
	  var options = view._printBorders;
	  var pageSize = getPageSize(options);
	  var sheetName = options.sheetnames ? 20 : 0;
	  var topSplit = grid.config.topSplit;
	  var splitHeight = sheetName;
	  for (var s = 1; s <= topSplit; s++) splitHeight += (grid.getItem(s).$height || grid.config.rowHeight) / view._zoom;
	  if (splitHeight > pageSize.height / 4) {
	    topSplit = 0;
	    splitHeight = sheetName;
	  }
	  var rowsHeight = splitHeight;
	  for (var r = topSplit + 1; r <= view.config.rowCount; r++) {
	    var height = (grid.getItem(r).$height || grid.config.rowHeight) / view._zoom;
	    if (rowsHeight + height > pageSize.height) {
	      rowsHeight = splitHeight;
	      borders.rows[r == 1 ? r : r - 1] = 1;
	    }
	    rowsHeight += height;
	  }
	  if (options.fit != "page") {
	    var colsWidth = 0;
	    for (var c = 1; c <= view.config.columnCount; c++) {
	      var width = (grid.getColumnConfig(c).width || grid.config.columnWidth) / view._zoom;
	      if (colsWidth + width > pageSize.width) {
	        colsWidth = 0;
	        borders.cols[c == 1 ? c : c - 1] = 1;
	      }
	      colsWidth += width;
	    }
	  }
	  view._printBorders.$render = borders;
	  view.refresh();
	}
	function getPrintBordersCss(view, row, column) {
	  var css = "";
	  var borders = view._printBorders.$render;
	  var span = view.$$("cells").getSpan(row, column);
	  if (span) {
	    var lastRow = span[0] * 1 + (span[3] - 1);
	    var lastCol = span[1] * 1 + (span[2] - 1);
	    setSpanCss(view, span[0], span[1], "webix_ss_print_border_right", borders && borders.cols[lastCol]);
	    setSpanCss(view, span[0], span[1], "webix_ss_print_border_bottom", borders && borders.rows[lastRow]);
	    var renderedSpanBorders = view._printBorders.$renderedSpanBorders;
	    if (borders) {
	      var innerRightBorder = column != lastCol && borders.cols[column];
	      var innerBottomBorder = row != lastRow && borders.rows[row];
	      if (innerRightBorder || innerBottomBorder) {
	        if (!renderedSpanBorders[span[0]]) renderedSpanBorders[span[0]] = {};
	        if (!renderedSpanBorders[span[0]][span[1]]) renderedSpanBorders[span[0]][span[1]] = {};
	        if (innerRightBorder) addSpanInnerBorder(view, renderedSpanBorders[span[0]][span[1]], span, column, "right");
	        if (innerBottomBorder) addSpanInnerBorder(view, renderedSpanBorders[span[0]][span[1]], span, row, "bottom");
	      }
	    } else removePrintInnerBorders(view);
	  }
	  if (borders) {
	    if (borders.cols[column]) css += "webix_ss_print_border_right";
	    if (borders.rows[row]) css += (css ? " " : "") + "webix_ss_print_border_bottom";
	  }
	  return css;
	}
	function removePrintInnerBorders(view) {
	  var renderedSpanBorders = view._printBorders.$renderedSpanBorders;
	  for (var row in renderedSpanBorders) for (var col in renderedSpanBorders[row]) for (var type in renderedSpanBorders[row][col]) webix.html.remove(renderedSpanBorders[row][col][type]);
	  view._printBorders.$renderedSpanBorders = {};
	}
	function addSpanInnerBorder(view, rendered, span, position, type) {
	  if (!rendered[type]) rendered[type] = {};
	  var border = rendered[type][position];
	  var grid = view.$$("cells");
	  if (!border) {
	    var pos = 0;
	    for (var i = span[type == "right" ? 1 : 0] * 1; i <= position; i++) {
	      if (type == "right") pos += grid.getColumnConfig(i).width || grid.config.columnWidth;else pos += grid.getItem(i).$height || grid.config.rowHeight;
	    }
	    border = rendered[type][position] = webix.html.create("div", {
	      "class": "webix_ss_print_border_".concat(type),
	      style: "".concat(type == "right" ? "left" : "top", ":").concat(pos - 1, "px;")
	    });
	  }
	  webix.delay(function () {
	    var spanNode = grid.getSpanNode({
	      row: span[0],
	      column: span[1]
	    });
	    if (!spanNode.contains(border)) spanNode.appendChild(border);
	  });
	}

	var m22 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getPrintBordersCss: getPrintBordersCss,
		init: init$v,
		print: print,
		removePrintInnerBorders: removePrintInnerBorders,
		showBorders: showBorders
	});

	var readyZoom = {};
	function init$u(view) {
	  view.attachEvent("onUndo", function (action, row, column, value) {
	    if (action == "zoom") {
	      zoom$3(view, value);
	    }
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    return serialize$a(view, data);
	  });
	  view.attachEvent("onDataParse", function (data) {
	    return load$7(view, data);
	  });
	}
	function zoom$3(view, newValue, load, page) {
	  var value;
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    value = view._zoom || 1;
	    if (newValue == "in" || newValue == "out") newValue = getNext(value, newValue == "in" ? 1 : -1, numbers);
	    view._zoom = newValue;
	    grid.define({
	      minColumnWidth: 40 * newValue
	    });
	    if (view.$$("zoom")) view.$$("zoom").setValue(newValue);
	    if (newValue != value) {
	      var fontSize = webix.skin.$active.fontSize * newValue;
	      var rowHeight = webix.skin.$name == "contrast" || webix.skin.$name == "flat" ? 24 : 20;
	      var className = "webix_ssheet_zoom_" + newValue.toString().replace(".", "_");
	      grid.$view.className = grid.$view.className.replace(/ webix_ssheet_zoom_\w+/, "");
	      grid.define({
	        css: className
	      });
	      if (!load) {
	        removePrintInnerBorders(view);
	        zoomSizes(view, value);
	        zoomStyles(view);
	      }
	      if (!readyZoom[className] && newValue != 1) {
	        readyZoom[className] = 1;

	        // cells
	        webix.html.addStyle("\n\t\t\t\t\t.".concat(className, " .webix_hcell, .").concat(className, " .webix_cell{\n\t\t\t\t\t\tfont-size: ").concat(fontSize, "px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.").concat(className, " .sheet_column_0 .webix_cell{\n\t\t\t\t\t\tpadding: 0 ").concat(12 * newValue, "px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.").concat(className, ".webix_ssheet_table .webix_hs_left .webix_hcell.webix_first:before{\n\t\t\t\t\t\tright: ").concat(4 * newValue, "px;\n\t\t\t\t\t\tbottom: ").concat(4 * newValue, "px;\n\t\t\t\t\t\tborder-top-width: ").concat((rowHeight - 8) * newValue, "px;\n\t\t\t\t\t\tborder-right-width: ").concat((rowHeight - 8) * newValue, "px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.").concat(className, " .webix_cell{\n\t\t\t\t\t\tpadding: ").concat(2 * newValue, "px 0px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.").concat(className, " .webix_cell div:first-child{\n\t\t\t\t\t\tmargin: 0 ").concat(12 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t"));

	        // icons
	        webix.html.addStyle("\n\t\t\t\t\t.".concat(className, " .webix_cell.ss_filter, .").concat(className, " .webix_cell.ss_editor{\n\t\t\t\t\t\tpadding-right: ").concat(16 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t\t.").concat(className, " .ssheet_filter_sign, .").concat(className, " .webix_cell.ss_editor:after{\n\t\t\t\t\t\tfont-size: ").concat(20 * newValue, "px;\n\t\t\t\t\t\tright: ").concat(6 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t\t.").concat(className, " .webix_cell.ss_filter.ss_editor:after{\n\t\t\t\t\t\tright: ").concat(28 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t\t.").concat(className, " .webix_cell.ss_filter.ss_editor{\n\t\t\t\t\t\tpadding-right: ").concat(36 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t\t.").concat(className, " .webix_lock:before{\n\t\t\t\t\t\tfont-size: ").concat(fontSize, "px;\n\t\t\t\t\t}\n\t\t\t\t\t.").concat(className, " .ssheet_commented_sign:before{\n\t\t\t\t\t\tborder-top-width: ").concat(8 * newValue, "px;\n\t\t\t\t\t\tborder-left-width: ").concat(8 * newValue, "px;\n\t\t\t\t\t}\n\t\t\t\t"));
	      }
	    }
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      if (!sheet.content.table) sheet.content.table = {
	        zoom: 1
	      };
	      value = sheet.content.table.zoom;
	      if (newValue == "in" || newValue == "out") newValue = getNext(value, newValue == "in" ? 1 : -1, numbers);
	      sheet.content.table.zoom = newValue;
	    } else return;
	  }
	  if (!load && value != newValue) view.callEvent("onZoom", [newValue, value, page]);
	}
	function serialize$a(view, data) {
	  data.table = {
	    zoom: view._zoom
	  };
	}
	function load$7(view, data) {
	  var value = 1;
	  if (data.table && data.table.zoom) value = data.table.zoom;
	  zoom$3(view, value, true);
	}
	function getNext(value, step, numbers) {
	  var index = numbers.indexOf(value);
	  if (index != -1) return numbers[index + step] || value;
	  var nextValue;
	  for (var i = 0; i < numbers.length; i++) {
	    if (numbers[i] > value) {
	      if (step < 0) {
	        if (--i == -1) return value;
	      }
	      nextValue = numbers[i];
	      break;
	    }
	  }
	  if (step < 0 && !nextValue) nextValue = numbers[numbers.length - 1];
	  return nextValue || value;
	}

	var m32 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getNext: getNext,
		init: init$u,
		load: load$7,
		serialize: serialize$a,
		zoom: zoom$3
	});

	webix.protoUI({
	  name: "ssheet-zoom",
	  $cssName: "counter webix_ssheet_zoom",
	  $init: function () {
	    var _this = this;
	    this.attachEvent("onAfterRender", function () {
	      _this.$setValue(_this.config.value);
	      _this.getInputNode().readOnly = true;
	      webix.event(_this.$view.firstChild, "keydown", function (e) {
	        return webix.html.preventEvent(e);
	      });
	    });
	  },
	  $setValue: function (value) {
	    this.getInputNode().value = parseInt(value * 100, 10) + "%";
	  },
	  shift: function (step, config) {
	    var v = this.config.value;
	    var arr = this.config.numbers;
	    var value = getNext(v, step, arr);
	    this.setValue(value, config);
	  }
	}, webix.ui.counter);

	webix.editors.excel_date = webix.extend({
	  createPopup: function () {
	    var editor = webix.editors.excel_date;
	    if (!editor.popup) {
	      var popup = webix.ui({
	        view: "popup",
	        body: {
	          view: "calendar",
	          icons: true,
	          timepicker: true,
	          on: {
	            onChange: function (val) {
	              val = val[0];
	              this.getParentView()._last_input_target.value = val ? getExcelDateFromJs(val) : "";
	              webix.callEvent("onEditEnd", []);
	            }
	          }
	        },
	        on: {
	          onEnter: function () {
	            webix.callEvent("onEditEnd", []);
	          }
	        }
	      });
	      editor.popup = popup.config.id;
	    }
	    return editor.popup;
	  },
	  render: function () {
	    var _this = this;
	    var node = webix.html.create("div", {
	      "class": "webix_dt_editor"
	    }, "<input type='text'>");
	    this.popup = this.createPopup();
	    webix.event(node.firstChild, "click", function () {
	      return _this.getPopup().show(node);
	    });
	    return node;
	  },
	  getPopup: function () {
	    return webix.$$(this.popup);
	  },
	  showPopup: function () {
	    var input = this.getInputNode();
	    var popup = this.getPopup();
	    popup._last_input_target = input;
	    popup.show(input);
	    input.setAttribute("aria-expanded", "true");
	  },
	  updateCalendar: function (value) {
	    var calendar = this.getPopup().getBody();
	    calendar.blockEvent();
	    calendar.setValue(value);
	    calendar.unblockEvent();
	  },
	  afterRender: function () {
	    this.showPopup();
	  },
	  setValue: function (value) {
	    var noDate = value === "" || isNaN(value * 1);
	    value = noDate ? new Date() : getJsDateFromExcel(value);
	    this.updateCalendar(value);
	    var view = webix.$$(this.config.node).queryView(function (a) {
	      return a.name === "spreadsheet";
	    }, "parent");
	    var format = getDateEditFormat(view, this.config.row.id, this.config.id);
	    this.getInputNode().value = format(value);
	  },
	  getValue: function () {
	    var value = this.getInputNode().value;
	    this.getPopup().hide();
	    return value;
	  }
	}, webix.editors.text);

	webix.editors.ss_richselect = webix.extend({
	  getFormat: function (value) {
	    var list = this.getInputNode();
	    var item;
	    if (value && list.exists(value)) item = list.getItem(value);
	    return item && item.format;
	  },
	  popupInit: function (popup) {
	    webix.editors.richselect.popupInit.apply(this, arguments);
	    popup.getList().define("template", function (obj) {
	      return obj.$value || obj.value;
	    });
	  }
	}, webix.editors.richselect);

	var actions = {
	  span: function (view) {
	    var range = view.$$("cells").getSelectArea();
	    if (range) {
	      if (isMerged(view, range)) view.splitCell();else {
	        var values = [];
	        for (var r = range.start.row; r <= range.end.row; r++) {
	          for (var c = range.start.column; c <= range.end.column; c++) {
	            var value = view.getCellValue(r, c);
	            if (value) values.push(value);
	            if (values.length > 1) break;
	          }
	          if (values.length > 1) break;
	        }
	        if (values.length > 1) {
	          view.confirm({
	            text: webix.i18n.spreadsheet.labels["merge-cell-confirm"]
	          }).then(function () {
	            return view.combineCells();
	          });
	        } else view.combineCells();
	      }
	    }
	  },
	  undo: function (view) {
	    return view.undo();
	  },
	  redo: function (view) {
	    return view.redo();
	  },
	  "hide-gridlines": function (view) {
	    return view.hideGridlines("toggle");
	  },
	  "hide-headers": function (view) {
	    return view.hideHeaders("toggle");
	  },
	  "freeze-columns": function (view) {
	    return view.freezeColumns();
	  },
	  "freeze-rows": function (view) {
	    return view.freezeRows();
	  },
	  "increase-decimals": function (view) {
	    return changeAreaDecimals(view, 1);
	  },
	  "decrease-decimals": function (view) {
	    return changeAreaDecimals(view, -1);
	  },
	  "increase-indent": function (view) {
	    return view.callEvent("onStyleSet", ["indent", 1]);
	  },
	  "decrease-indent": function (view) {
	    return view.callEvent("onStyleSet", ["indent", -1]);
	  },
	  "show-formulas": function (view) {
	    return view.showFormulas("toggle");
	  },
	  "print-borders": function (view) {
	    return view.showPrintBorders("toggle");
	  }
	};
	function isMerged(view, range) {
	  var i,
	    j,
	    c0 = range.start,
	    c1 = range.end;
	  for (i = c0.row * 1; i <= c1.row * 1; i++) {
	    for (j = c0.column * 1; j <= c1.column * 1; j++) {
	      if (view.$$("cells").getSpan(i, j)) return true;
	    }
	  }
	  return false;
	}

	// options for 'font-family' select
	var fontFamily = [{
	  id: "Arial",
	  value: "Arial"
	}, {
	  id: "'Roboto', sans-serif",
	  value: "Roboto"
	}, {
	  id: "'PT Sans', Tahoma",
	  value: "PT Sans"
	}, {
	  id: "'Open Sans', sans-serif",
	  value: "Open Sans"
	}, {
	  id: "Tahoma",
	  value: "Tahoma"
	}, {
	  id: "Verdana",
	  value: "Verdana"
	}, {
	  id: "Calibri, Tahoma",
	  value: "Calibri"
	}];

	// options for 'format' select
	function getCellFormats() {
	  var locale = webix.i18n.spreadsheet.labels;
	  return [{
	    id: "common",
	    value: locale.common
	  }, {
	    id: "price",
	    value: locale.currency,
	    example: "98.20"
	  }, {
	    id: "int",
	    value: locale.number,
	    example: "2120.02"
	  }, {
	    id: "percent",
	    value: locale.percent,
	    example: "0.5"
	  }, {
	    id: "date",
	    value: locale.date,
	    example: "45000"
	  }, {
	    id: "string",
	    value: locale.string,
	    example: "012345"
	  }, {
	    id: "custom",
	    value: locale["custom-format"]
	  }];
	}
	function getColumnOperation(view) {
	  var locale = webix.i18n.spreadsheet.menus;
	  var colOperations = [{
	    id: "add",
	    group: "column",
	    value: locale["insert-column"]
	  }, {
	    id: "del",
	    group: "column",
	    value: locale["delete-column"]
	  }, {
	    id: "show",
	    group: "column",
	    value: locale["show-column"],
	    neighbors: true
	  }, {
	    id: "hide",
	    group: "column",
	    value: locale["hide-column"]
	  }];
	  if (view.config.resizeCell != false) colOperations.push({
	    id: "resize",
	    group: "column",
	    value: locale["resize-column"]
	  });
	  return colOperations;
	}
	function getRowOperation(view) {
	  var locale = webix.i18n.spreadsheet.menus;
	  var rowOperations = [{
	    id: "add",
	    group: "row",
	    value: locale["insert-row"]
	  }, {
	    id: "del",
	    group: "row",
	    value: locale["delete-row"]
	  }, {
	    id: "show",
	    group: "row",
	    value: locale["show-row"],
	    neighbors: true
	  }, {
	    id: "hide",
	    group: "row",
	    value: locale["hide-row"]
	  }];
	  if (view.config.resizeCell != false) rowOperations.push({
	    id: "resize",
	    group: "row",
	    value: locale["resize-row"]
	  });
	  return rowOperations;
	}

	// options for 'clear' select
	function getClearOperation() {
	  return [{
	    id: "clear-value",
	    value: getLocaleClear("value")
	  }, {
	    id: "clear-style",
	    value: getLocaleClear("style")
	  }, {
	    id: "clear-conditional-formats",
	    value: getLocaleClear("conditional-formats")
	  }, {
	    id: "clear-dropdown-editors",
	    value: getLocaleClear("dropdown-editors")
	  }, {
	    id: "clear-filters",
	    value: getLocaleClear("filters")
	  }, {
	    id: "clear-comments",
	    value: getLocaleClear("comments")
	  }, {
	    $template: "Separator"
	  }, {
	    id: "clear-all",
	    value: getLocaleClear("all")
	  }];
	}

	// options for 'borders' select
	var borders = [{
	  id: "no",
	  value: "no"
	}, {
	  id: "left",
	  value: "left"
	}, {
	  id: "top",
	  value: "top"
	}, {
	  id: "right",
	  value: "right"
	}, {
	  id: "bottom",
	  value: "bottom"
	}, {
	  id: "all",
	  value: "all"
	}, {
	  id: "outer",
	  value: "outer"
	}, {
	  id: "top-bottom",
	  value: "top-bottom"
	}];
	function getLocaleClear(value) {
	  var locale = webix.i18n.spreadsheet.menus;
	  return locale["clear"] + " " + locale["clear-" + value].toLowerCase();
	}

	// options for 'font-size' select
	function getFontSize() {
	  return ["8", "9", "10", "11", "12", "14", "15", "16", "18", "20", "22", "24", "28", "36"];
	}
	var styleFormats = {
	  "font-weight": "bold",
	  "font-style": "italic",
	  "underline": "underline",
	  "strike": "strike"
	};
	var ui$1 = {
	  button: function (config) {
	    return {
	      view: "ssheet-toggle",
	      width: config.width || toolbarSizes.width,
	      id: config.name,
	      name: config.name,
	      label: config.label,
	      css: config.css || "",
	      onValue: styleFormats[config.name],
	      offValue: "normal",
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name] || ""
	    };
	  },
	  colorButton: function (config) {
	    return {
	      view: "ssheet-color",
	      css: config.css,
	      name: config.name,
	      width: config.width || toolbarSizes.width + 24,
	      title: "<span class='webix_ssheet_button_icon webix_ssheet_color_button_icon webix_ssheet_icon ssi-" + config.name + "' ></span>",
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name] || ""
	    };
	  },
	  toggleButton: function (config) {
	    return {
	      view: "ssheet-toggle-silent",
	      width: toolbarSizes.width,
	      id: config.name,
	      name: config.name,
	      label: "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-" + (config.icon || config.name) + "'></span>",
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name] || ""
	    };
	  },
	  iconButton: function (config) {
	    var btn = webix.copy(config);
	    webix.extend(btn, {
	      view: "button",
	      width: toolbarSizes.width,
	      id: config.name,
	      label: "<span class='webix_ssheet_button_icon webix_ssheet_icon ssi-" + config.name + "'></span>",
	      css: "",
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name] || webix.i18n.spreadsheet.menus[config.name] || ""
	    });
	    if (config.onValue) {
	      webix.extend(btn, {
	        view: "ssheet-toggle",
	        onValue: config.onValue,
	        offValue: config.offValue
	      }, true);
	    }
	    return btn;
	  },
	  segmented: function (config) {
	    return {
	      view: "segmented",
	      name: config.name,
	      css: config.css || "",
	      width: config.width || toolbarSizes.width + 76,
	      options: config.options
	    };
	  },
	  select: function (config) {
	    webix.extend(config, {
	      view: "richselect",
	      id: config.name,
	      value: defaultStyles[config.name],
	      suggest: {
	        css: "webix_ssheet_suggest",
	        padding: 0,
	        data: config.options
	      }
	    });
	    config.tooltip = webix.i18n.spreadsheet.tooltips[config.name] || "";
	    if (config.popupWidth) {
	      config.suggest.fitMaster = false;
	      config.suggest.width = config.popupWidth;
	    }
	    if (config.popupTemplate) config.suggest.body = {
	      template: config.popupTemplate
	    };
	    if (config.popupEvents) {
	      config.suggest.body = config.suggest.body || {};
	      config.suggest.body.on = config.popupEvents;
	    }
	    return config;
	  },
	  separator: function () {
	    return {
	      view: "ssheet-separator"
	    };
	  },
	  title: function (config) {
	    var title = config.title;
	    if (title.indexOf("$") === 0) title = "";
	    title = webix.i18n.spreadsheet.labels[config.title] || title;
	    return {
	      template: title,
	      view: "ssheet-bar-title",
	      height: toolbarSizes.titleHeight
	    };
	  },
	  borders: function (config) {
	    return {
	      view: "ssheet-borders",
	      width: config.width || toolbarSizes.width + 24,
	      data: borders,
	      id: config.name,
	      name: config.name,
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name]
	    };
	  },
	  align: function (config) {
	    return {
	      view: "ssheet-align",
	      value: defaultStyles[config.name],
	      width: config.width || toolbarSizes.width + 24,
	      data: config.options,
	      name: config.name,
	      tooltip: webix.i18n.spreadsheet.tooltips[config.name]
	    };
	  },
	  condFormat: function (config) {
	    return {
	      view: "ssheet-cond-format",
	      width: 40,
	      id: config.name,
	      name: config.name
	    };
	  }
	};
	var buttonsMap = {
	  "font-family": function () {
	    return ui$1.select({
	      name: "font-family",
	      options: fontFamily,
	      width: 100,
	      view: "combo"
	    });
	  },
	  "font-size": function () {
	    return ui$1.select({
	      name: "font-size",
	      options: getFontSize(),
	      width: 70,
	      view: "text",
	      icon: "wxi-menu-down",
	      css: "webix_ssheet_text",
	      on: {
	        onItemClick: function () {
	          var suggest = webix.$$(this.config.suggest);
	          if (!suggest.isVisible()) suggest.show(this.getInputNode());
	        }
	      }
	    });
	  },
	  "font-weight": function () {
	    return ui$1.button({
	      name: "font-weight",
	      label: "B",
	      css: "webix_ssheet_bold"
	    });
	  },
	  "font-style": function () {
	    return ui$1.button({
	      name: "font-style",
	      label: "I",
	      css: "webix_ssheet_italic"
	    });
	  },
	  "underline": function () {
	    return ui$1.button({
	      name: "underline",
	      label: "U",
	      css: "webix_ssheet_underline"
	    });
	  },
	  "strike": function () {
	    return ui$1.button({
	      name: "strike",
	      label: "S",
	      css: "webix_ssheet_strike"
	    });
	  },
	  "color": function () {
	    return ui$1.colorButton({
	      name: "color",
	      icon: "font",
	      css: "webix_ssheet_color"
	    });
	  },
	  "background": function () {
	    return ui$1.colorButton({
	      name: "background",
	      icon: "paint-brush",
	      css: "webix_ssheet_background",
	      width: 70
	    });
	  },
	  "borders": function () {
	    return ui$1.borders({
	      name: "borders"
	    });
	  },
	  "text-align": function () {
	    var locale = webix.i18n.spreadsheet.tooltips;
	    return ui$1.align({
	      name: "text-align",
	      css: "webix_ssheet_align",
	      options: [{
	        id: "left",
	        css: "webix_ssheet_icon ssi-left",
	        tooltip: locale["align-left"]
	      }, {
	        id: "center",
	        css: "webix_ssheet_icon ssi-center",
	        tooltip: locale["align-center"]
	      }, {
	        id: "right",
	        css: "webix_ssheet_icon ssi-right",
	        tooltip: locale["align-right"]
	      }]
	    });
	  },
	  "vertical-align": function () {
	    var locale = webix.i18n.spreadsheet.tooltips;
	    return ui$1.align({
	      name: "vertical-align",
	      css: "webix_ssheet_align",
	      options: [{
	        id: "top",
	        css: "webix_ssheet_icon ssi-top",
	        tooltip: locale["align-top"]
	      }, {
	        id: "middle",
	        css: "webix_ssheet_icon ssi-middle",
	        tooltip: locale["align-middle"]
	      }, {
	        id: "bottom",
	        css: "webix_ssheet_icon ssi-bottom",
	        tooltip: locale["align-bottom"]
	      }]
	    });
	  },
	  "wrap": function () {
	    return ui$1.iconButton({
	      name: "wrap",
	      onValue: "wrap",
	      offValue: "nowrap"
	    });
	  },
	  "format": function () {
	    return ui$1.select({
	      name: "format",
	      width: 106,
	      options: getCellFormats(),
	      popupWidth: 180,
	      popupTemplate: function (obj) {
	        //make it look like an actual cell
	        var format = formatHelpers[obj.id] ? formatHelpers[obj.id].getFormat : "";
	        var cell = {
	          css: ""
	        };
	        var example = format && obj.example ? format(obj.example, cell) : "";
	        return obj.value + (format ? "<span class='webix_ssheet_right" + (cell.css ? " " + cell.css : "") + "'>" + example + "</span>" : "");
	      },
	      popupEvents: {
	        onItemClick: function (id) {
	          if (id == "custom") this.getTopParentView().callEvent("onCommand", [{
	            id: id
	          }]);
	        }
	      }
	    });
	  },
	  "column": function (view) {
	    return {
	      name: "column",
	      view: "ssheet-button",
	      icon: "column",
	      arrow: true,
	      area: true,
	      width: 58,
	      options: getColumnOperation(view)
	    };
	  },
	  "row": function (view) {
	    return {
	      name: "row",
	      view: "ssheet-button",
	      icon: "row",
	      arrow: true,
	      area: true,
	      width: 58,
	      options: getRowOperation(view)
	    };
	  },
	  "clear": function () {
	    return {
	      name: "clear",
	      view: "ssheet-button",
	      icon: "clear-styles",
	      arrow: true,
	      area: true,
	      width: 58,
	      options: getClearOperation()
	    };
	  },
	  "validation": function () {
	    return {
	      name: "validation",
	      view: "ssheet-button",
	      icon: "validation",
	      arrow: true,
	      area: true,
	      width: 58,
	      options: [{
	        id: "add-cell-validation",
	        value: webix.i18n.spreadsheet.labels["add-cell-validation"]
	      }, {
	        id: "remove-cell-validation",
	        value: webix.i18n.spreadsheet.labels["remove-cell-validation"]
	      }, {
	        id: "highlight-invalid-data",
	        value: webix.i18n.spreadsheet.labels["highlight-invalid-data"]
	      }, {
	        id: "remove-highlight-invalid-data",
	        value: webix.i18n.spreadsheet.labels["remove-highlight-invalid-data"]
	      }]
	    };
	  },
	  "image": function () {
	    return {
	      name: "image",
	      view: "ssheet-button",
	      icon: "add-image",
	      arrow: true,
	      options: [{
	        id: "add-image-cell",
	        value: webix.i18n.spreadsheet.labels["add-image-cell"]
	      }, {
	        id: "add-image-top",
	        value: webix.i18n.spreadsheet.labels["add-image-top"]
	      }]
	    };
	  },
	  "graph": function () {
	    return {
	      name: "graph",
	      view: "ssheet-button",
	      icon: "add-sparkline",
	      arrow: true,
	      options: [{
	        id: "add-sparkline",
	        value: webix.i18n.spreadsheet.labels["add-sparkline"]
	      }, {
	        id: "add-chart",
	        value: webix.i18n.spreadsheet.labels["add-chart"]
	      }]
	    };
	  },
	  "controls": function () {
	    return {
	      name: "controls",
	      view: "ssheet-button",
	      icon: "add-control",
	      arrow: true,
	      options: [{
	        id: "add-checkbox",
	        value: webix.i18n.spreadsheet.labels["add-checkbox"]
	      }, {
	        id: "add-radio",
	        value: webix.i18n.spreadsheet.labels["add-radio"]
	      }]
	    };
	  },
	  "comment": function () {
	    return {
	      name: "comment",
	      view: "ssheet-button",
	      icon: "comments",
	      arrow: true,
	      area: true,
	      width: 55
	    };
	  },
	  "create-filter": function () {
	    return ui$1.toggleButton({
	      name: "create-filter"
	    });
	  },
	  "hide-gridlines": function () {
	    return ui$1.toggleButton({
	      name: "hide-gridlines"
	    });
	  },
	  "hide-headers": function () {
	    return ui$1.toggleButton({
	      name: "hide-headers"
	    });
	  },
	  "show-formulas": function () {
	    return ui$1.toggleButton({
	      name: "show-formulas"
	    });
	  },
	  "print-borders": function () {
	    return ui$1.toggleButton({
	      name: "print-borders",
	      icon: "borders-no"
	    });
	  }
	};

	function toolbarButtons(view, structure) {
	  var checkButtons = function (cells) {
	    for (var i = 0; i < cells.length; i++) {
	      var name = cells[i].$button;
	      if (name) {
	        var base = buttonsMap[name] ? buttonsMap[name](view) : ui$1.iconButton({
	          name: name
	        });
	        webix.extend(cells[i], base);
	      }
	      if (cells[i].rows) checkButtons(cells[i].rows);
	      if (cells[i].cols) checkButtons(cells[i].cols);
	    }
	  };
	  checkButtons(structure);
	  return structure;
	}
	function getButtons(view, structure) {
	  var config = [];
	  for (var block in structure) {
	    config.push(elementsBlock(view, block, structure[block]));
	    config.push(ui$1.separator());
	  }
	  return config;
	}
	function blockColumns(view, buttons) {
	  var cols = [];
	  for (var i = 0; i < buttons.length; i++) {
	    var name = buttons[i];
	    if (_typeof(name) == "object") {
	      cols.push(name);
	    } else {
	      var base = buttonsMap[name] ? buttonsMap[name](view) : ui$1.iconButton({
	        name: name
	      });
	      cols.push(base);
	    }
	  }
	  return cols;
	}
	function elementsBlock(view, name, columns) {
	  var block = {
	    rows: [{
	      padding: 2,
	      cols: [{
	        margin: 2,
	        cols: blockColumns(view, columns)
	      }]
	    }, ui$1.title({
	      title: name
	    })]
	  };
	  return block;
	}

	function getText$1(text) {
	  var locale = webix.i18n.spreadsheet;
	  return locale.menus[text] || locale.labels[text] || locale.tooltips[text] || text;
	}
	function calcButtons() {
	  var i,
	    name,
	    width,
	    groups = {
	      "undo": ["undo", "redo"],
	      "insert": ["add-sparkline", "add-image", "add-comment"]
	    },
	    result = {};
	  for (name in groups) {
	    result[name] = 0;
	    for (i = 0; i < groups[name].length; i++) {
	      width = webix.html.getTextSize(getText$1(groups[name][i]), "webix_ssheet_button_measure").width + 7;
	      result[name] = Math.max(width, result[name]);
	    }
	  }
	  return result;
	}
	function getAllElements(readonly) {
	  var sizes = calcButtons();
	  var titleHeight = toolbarSizes.titleHeight;
	  if (readonly) return [{
	    padding: 3,
	    margin: 0,
	    rows: [{
	      margin: 2,
	      cols: [{
	        $button: "excel-export"
	      }, {
	        $button: "print"
	      }, {
	        $button: "print-borders"
	      }]
	    }, {
	      template: getText$1("file"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    margin: 0,
	    rows: [{
	      margin: 2,
	      cols: [{
	        $button: "hide-gridlines"
	      }, {
	        $button: "hide-headers"
	      }, {
	        $button: "show-formulas"
	      }]
	    }, {
	      template: getText$1("view"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {}];
	  return [{
	    padding: 3,
	    margin: 0,
	    rows: [{
	      margin: 2,
	      cols: [{
	        name: "sheet",
	        view: "ssheet-button-icon-top",
	        label: getText$1("sheet"),
	        arrow: true,
	        options: [{
	          id: "new-sheet"
	        }, {
	          id: "copy-sheet"
	        }, {
	          id: "remove-sheet"
	        }, {
	          id: "hide-sheet"
	        }]
	      }, {
	        rows: [{
	          $button: "excel-import"
	        }, {
	          $button: "excel-export"
	        }]
	      }, {
	        rows: [{
	          $button: "print"
	        }, {
	          $button: "print-borders"
	        }]
	      }]
	    }, {
	      template: getText$1("file"),
	      view: "ssheet-bar-title",
	      height: titleHeight,
	      width: 85
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      $button: "undo",
	      view: "ssheet-button",
	      label: getText$1("undo"),
	      width: sizes.undo
	    }, {
	      $button: "redo",
	      view: "ssheet-button",
	      label: getText$1("redo"),
	      width: sizes.undo
	    }, {
	      template: getText$1("undo-redo"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      margin: 2,
	      cols: [{
	        margin: 2,
	        cols: [{
	          $button: "font-family",
	          width: (webix.skin.$active.inputHeight + 2) * 4 + 6
	        }, {
	          $button: "font-size"
	        }]
	      }, {
	        $button: "borders"
	      }]
	    }, {
	      margin: 2,
	      cols: [{
	        margin: 2,
	        cols: [{
	          $button: "font-weight"
	        }, {
	          $button: "font-style"
	        }, {
	          $button: "underline"
	        }, {
	          $button: "strike"
	        }]
	      }, {
	        $button: "background"
	      }, {
	        $button: "color"
	      }]
	    }, {
	      template: getText$1("font"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      margin: 2,
	      cols: [{
	        $button: "text-align"
	      }, {
	        $button: "span"
	      }, {
	        $button: "increase-indent"
	      }]
	    }, {
	      margin: 2,
	      cols: [{
	        $button: "vertical-align"
	      }, {
	        $button: "wrap"
	      }, {
	        $button: "decrease-indent"
	      }]
	    }, {
	      template: getText$1("align"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      $button: "format"
	    }, {
	      margin: 2,
	      cols: [{
	        $button: "increase-decimals"
	      }, {
	        $button: "decrease-decimals"
	      }]
	    }, {
	      template: getText$1("number"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      cols: [{
	        $button: "sort-asc"
	      }, {
	        $button: "create-filter"
	      }, {
	        $button: "conditional-format"
	      }, {
	        $button: "add-link"
	      }, {
	        $button: "clear"
	      }]
	    }, {
	      cols: [{
	        $button: "sort-desc"
	      }, {
	        $button: "add-range"
	      }, {
	        $button: "lock-cell"
	      }, {
	        $button: "add-dropdown"
	      }, {
	        $button: "validation"
	      }]
	    }, {
	      template: getText$1("edit"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      cols: [{
	        $button: "image",
	        view: "ssheet-button",
	        label: getText$1("image"),
	        width: sizes.insert
	      }, {
	        $button: "add-comment",
	        view: "ssheet-button",
	        label: getText$1("comment"),
	        width: sizes.insert
	      }]
	    }, {
	      cols: [{
	        $button: "graph",
	        view: "ssheet-button",
	        label: getText$1("graph"),
	        width: sizes.insert
	      }, {
	        $button: "controls",
	        view: "ssheet-button",
	        label: getText$1("controls"),
	        width: sizes.insert
	      }]
	    }, {
	      template: getText$1("insert"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {
	    padding: 3,
	    rows: [{
	      cols: [{
	        rows: [{
	          $button: "row"
	        }, {
	          $button: "column"
	        }]
	      }, {
	        rows: [{
	          $button: "hide-gridlines"
	        }, {
	          $button: "hide-headers"
	        }]
	      }, {
	        rows: [{
	          $button: "freeze-rows"
	        }, {
	          $button: "freeze-columns"
	        }]
	      }, {
	        rows: [{
	          $button: "show-formulas"
	        }, {}]
	      }]
	    }, {
	      template: getText$1("view"),
	      view: "ssheet-bar-title",
	      height: titleHeight
	    }]
	  }, {
	    view: "ssheet-separator"
	  }, {}];
	}

	var buttons = {
	  "undo-redo": ["undo", "redo"],
	  "font": ["font-family", "font-size", "font-weight", "font-style", "underline", "strike", "color", "background", "borders"],
	  "align": ["text-align", "vertical-align", "wrap", "span", "increase-indent", "decrease-indent"],
	  "format": ["format"]
	};
	function init$t(view) {
	  view.attachEvent("onComponentInit", function () {
	    return ready$4(view);
	  });
	  view.attachEvent("onCommand", function (action) {
	    if (action.id == "toolbar-update") {
	      if (action.name) updateValue(view, action.name, action.value);else setValues(view, view.getSelectedId(true));
	    }
	  });
	  var elements = [];
	  if (view.config.toolbar) {
	    var allElements = view.config.toolbar;
	    if (allElements == "full") {
	      allElements = getAllElements(view.config.readonly);
	      if (webix.isUndefined(view.config.bottombar)) view.config.bottombar = true;
	    }
	    elements = toolbarButtons(view, allElements);
	  } else elements = getButtons(view, view.config.buttons || buttons);
	  var bar = {
	    view: webix.env.$customScroll ? "scrollview" : "ssheet-toolbar-scrollview",
	    scroll: "x",
	    body: {
	      view: "toolbar",
	      css: "webix_ssheet_toolbar webix_layout_toolbar",
	      id: "bar",
	      padding: 0,
	      elements: elements,
	      on: {
	        onChange: function (value, old, config) {
	          if (config == "user") {
	            var source = this.$eventSource;
	            var name = source.config.name;
	            if (name == "format" && value == "common") value = "";
	            var size = name == "font-size";
	            if ((size || name == "font-family") && (!value || size && isNaN(value))) return source.setValue(old);else if (size) {
	              var maxSize = Math.floor(400 / 0.75); // 400 pt - max excel font size; divide 0.75 - pt to px conversion
	              var limited = Math.max(1, Math.min(maxSize, value));
	              if (limited != value) {
	                value = limited;
	                source.setValue(value);
	              }
	              value += "px";
	            }
	            if (!(name == "format" && value == "custom")) view.callEvent("onStyleSet", [name, value]);
	            webix.UIManager.setFocus(view.$$("cells"));
	          }
	        },
	        onItemClick: function (id) {
	          var viewId = view.innerId(id);
	          if (actions[viewId]) actions[viewId].call(this, view);else view.callEvent("onCommand", [{
	            id: viewId
	          }]);
	        }
	      }
	    }
	  };
	  view.callEvent("onViewInit", ["toolbar", bar]);
	  return bar;
	}
	function ready$4(view) {
	  view.attachEvent("onAfterSelect", function (selected) {
	    return setValues(view, selected);
	  });
	}
	function setValues(view, selected) {
	  var barStyles = getBarStyles(view, selected);
	  view.$$("bar").setValues(barStyles);
	}
	function updateValue(view, name, value) {
	  var element = view.$$("bar").elements[name];
	  if (element) element.setValue(value);
	}
	function getBarStyles(view, selected) {
	  var dropdowns = ["font-family", "font-size", "text-align", "vertical-align", "format", "background", "color"];
	  var cell = selected[0];
	  var barStyles = getCellStyles(view, cell);
	  for (var i = 1; i < selected.length; i++) {
	    var cellStyle = getCellStyles(view, selected[i]);
	    for (var k = dropdowns.length - 1; k >= 0; k--) {
	      var property = dropdowns[k];
	      if (barStyles[property] != cellStyle[property]) {
	        delete barStyles[property];
	        dropdowns.splice(k, 1);
	      }
	    }
	    if (!dropdowns.length) break;
	  }
	  return barStyles;
	}
	function getCellStyles(view, cell) {
	  var span = view.$$("cells").getSpan(cell.row, cell.column);
	  if (span) {
	    var _span = _slicedToArray(span, 2);
	    cell.row = _span[0];
	    cell.column = _span[1];
	  }
	  var obj = getStyle$1(view, cell);
	  var styles = obj ? webix.copy(obj.props) : {};
	  for (var i in defaultStyles) if (!styles[i]) styles[i] = defaultStyles[i];
	  styles["font-size"] = styles["font-size"].replace("px", "");
	  var format = getFormat$1(view, cell.row, cell.column) || "common";
	  styles.format = isCustom(format) ? "custom" : format;
	  return styles;
	}

	function selectRow(row, view, endRow) {
	  var columns = view.$$("cells").config.columns;
	  var firstColumn = columns[0].id == "rowId" ? 1 : 0;
	  var start = {
	    row: row,
	    column: columns[firstColumn].id
	  };
	  var last = {
	    row: endRow || row,
	    column: columns[columns.length - 1].id
	  };
	  if (start.column && last.column) _selectRange(start, last, view);
	}
	function selectAll(view) {
	  var order = view.$$("cells").data.order;
	  var columns = view.$$("cells").config.columns;
	  var firstColumn = columns[0].id == "rowId" ? 1 : 0;
	  var start = {
	    row: order[0],
	    column: columns[firstColumn].id
	  };
	  var last = {
	    row: order[order.length - 1],
	    column: columns[columns.length - 1].id
	  };
	  if (start.column && last.column) _selectRange(start, last, view);
	}
	function selectColumn(column, view, endColumn) {
	  var order = view.$$("cells").data.order;
	  var startRow = order[0];
	  var lastRow = order[order.length - 1];
	  var start = {
	    row: startRow,
	    column: column
	  };
	  var last = {
	    row: lastRow,
	    column: endColumn || column
	  };
	  _selectRange(start, last, view);
	}
	function isColSelected(column, view) {
	  var selectedArea = view.$$("cells").getSelectArea();
	  if (selectedArea) {
	    if (column >= selectedArea.start.column && column <= selectedArea.end.column) return true;
	  }
	  return false;
	}
	function isCellSelected(row, column, view) {
	  return isRowSelected(row, view) && isColSelected(column, view);
	}
	function isRowSelected(row, view) {
	  var selectedArea = view.$$("cells").getSelectArea();
	  if (selectedArea) {
	    if (row >= selectedArea.start.row && row <= selectedArea.end.row) return true;
	  }
	  return false;
	}
	function selectColumns(column, view) {
	  var selectedArea = view.$$("cells").getSelectArea();
	  if (!selectedArea) selectColumn(column, view);else {
	    var col1 = Math.min(selectedArea.start.column, selectedArea.end.column, column);
	    var col2 = Math.max(selectedArea.start.column, selectedArea.end.column, column);
	    selectColumn(col1, view, col2);
	  }
	}
	function _selectRange(a, b, view) {
	  view.$$("cells").addSelectArea(a, b);
	}
	function adjustColumn(column, view) {
	  var grid = view.$$("cells");
	  var width = 0;
	  var columnWidth = grid.getColumnConfig(column).width;
	  grid.eachRow(function (row) {
	    var currentWidth = 25;
	    var span = grid.getSpan(row, column);
	    if (span && span[2] > 1) return;
	    var value = view.getCellValue(row, column);
	    var text = this.getText(row, column);
	    var style = view.getStyle(row, column);
	    var css = style ? style.id : "";
	    if (text.replace(/<\/?[^>]+(>|$)/g, "")) {
	      var size = getTextSize(view, text, css);
	      currentWidth = size.width;
	    }
	    var zoom = view._zoom;
	    if (view.getCellEditor(row, column)) currentWidth += 18 * zoom;
	    if (view.getCellFilter(row, column)) currentWidth += 18 * zoom;
	    if (/^=(checkbox|radio)\(/i.test(value)) currentWidth += 18 * zoom;
	    if (style && style.props.wrap == "wrap" && currentWidth > columnWidth) currentWidth = columnWidth;
	    if (currentWidth > width) width = currentWidth;
	  });
	  grid.setColumnWidth(column, width);
	}
	function adjustRow(row, view) {
	  var height = 25;
	  view._table.eachColumn(function (column) {
	    if (column != "rowId") {
	      var text = this.getText(row, column);

	      // if there is text wrap in cell we need to know width to get correct height
	      var width = this.getColumnConfig(column).width;
	      var span = view._table.getSpan(row, column);
	      if (span) width = view._table.getSpanNode({
	        row: span[0],
	        column: span[1]
	      }).offsetWidth;
	      var style = view.getStyle(row, column);
	      var css = style ? style.id : "";
	      if (text.replace(/<\/?[^>]+(>|$)/g, "")) {
	        var size = getTextSize(view, text, css, width);
	        if (size.height > height) height = size.height;
	      }
	    }
	  });
	  view._table.setRowHeight(row, height);
	}
	function highlightColRow(start, end, view) {
	  if (!view._table.config.header) return;
	  var grid = view._table;
	  var css = "webix_highlight";
	  var sr = start.row,
	    er = end.row,
	    sc = start.column,
	    ec = end.column;
	  var columns = grid.config.columns;
	  var firstColumn = columns[1].id;
	  if (sc == "rowId") {
	    if (sc == ec) {
	      start.column = sc = firstColumn;
	      end.column = ec = columns[columns.length - 1].id;
	    } else start.column = sc = firstColumn;
	  } else if (ec == "rowId") end.column = ec = firstColumn;
	  if (er < sr) {
	    var _ref = [er, sr];
	    sr = _ref[0];
	    er = _ref[1];
	  }
	  if (ec < sc) {
	    var _ref2 = [ec, sc];
	    sc = _ref2[0];
	    ec = _ref2[1];
	  }
	  grid.eachRow(function (row) {
	    if (row < sr || row > er) grid.removeCellCss(row, "rowId", css, true);else grid.addCellCss(row, "rowId", css, true);
	  });
	  webix.delay(function () {
	    return grid.refresh();
	  });
	  grid.eachColumn(function (col) {
	    var node = grid.getHeaderNode(col);
	    if (col == "rowId" || !node) return;
	    if (col < sc || col > ec) webix.html.removeCss(node, css);else webix.html.addCss(node, css, true);
	  });
	  if (view.$$("navigation")) {
	    var range = "";
	    if (sc && ec) {
	      if (!sr) {
	        var order = grid.data.order;
	        sr = order[0];
	        er = order[order.length - 1];
	      }
	      range = toRange(sr, sc, er, ec);
	      var cells = range.split(":");
	      if (cells[0] == cells[1]) range = cells[0];
	    }
	    view.$$("navigation").setValue(range);
	  }
	}

	var m12 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		adjustColumn: adjustColumn,
		adjustRow: adjustRow,
		highlightColRow: highlightColRow,
		isCellSelected: isCellSelected,
		isColSelected: isColSelected,
		isRowSelected: isRowSelected,
		selectAll: selectAll,
		selectColumn: selectColumn,
		selectColumns: selectColumns,
		selectRow: selectRow
	});

	function getText(text) {
	  var locale = webix.i18n.spreadsheet.labels;
	  return locale[text] || text;
	}
	function getDefaultStyles() {
	  return [{
	    name: getText("normal"),
	    css: "webix_ssheet_condition_regular"
	  }, {
	    name: getText("neutral"),
	    css: "webix_ssheet_condition_neutral"
	  }, {
	    name: getText("bad"),
	    css: "webix_ssheet_condition_bad"
	  }, {
	    name: getText("good"),
	    css: "webix_ssheet_condition_good"
	  }];
	}
	function isDate(value) {
	  return value && !isNaN(value) && !isDateInvalid(value);
	}
	var conditions = {
	  number: [{
	    id: "greater",
	    batch: "text",
	    handler: function (a, b) {
	      return a !== "" && a * 1 > b * 1;
	    }
	  }, {
	    id: "less",
	    batch: "text",
	    handler: function (a, b) {
	      return a !== "" && a * 1 < b * 1;
	    }
	  }, {
	    id: "greaterOrEqual",
	    batch: "text",
	    handler: function (a, b) {
	      return a !== "" && a * 1 >= b * 1;
	    }
	  }, {
	    id: "lessOrEqual",
	    batch: "text",
	    handler: function (a, b) {
	      return a !== "" && a * 1 <= b * 1;
	    }
	  }, {
	    id: "equal",
	    batch: "text",
	    handler: function (a, b) {
	      return a == b;
	    }
	  }, {
	    id: "notEqual",
	    batch: "text",
	    handler: function (a, b) {
	      return a != b;
	    }
	  }, {
	    id: "contains",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().indexOf(b.toString().toLowerCase()) !== -1;
	    }
	  }, {
	    id: "notContains",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().indexOf(b.toString().toLowerCase()) === -1;
	    }
	  }],
	  text: [{
	    id: "contains",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().indexOf(b.toString().toLowerCase()) !== -1;
	    }
	  }, {
	    id: "notContains",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().indexOf(b.toString().toLowerCase()) === -1;
	    }
	  }, {
	    id: "equal",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase() === b.toString().toLowerCase();
	    }
	  }, {
	    id: "notEqual",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase() !== b.toString().toLowerCase();
	    }
	  }, {
	    id: "beginsWith",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().lastIndexOf(b.toString().toLowerCase(), 0) === 0;
	    }
	  }, {
	    id: "notBeginsWith",
	    batch: "text",
	    handler: function (a, b) {
	      return a.toString().toLowerCase().lastIndexOf(b.toString().toLowerCase(), 0) !== 0;
	    }
	  }, {
	    id: "endsWith",
	    batch: "text",
	    handler: function (a, b) {
	      a = a.toString();
	      b = b.toString();
	      return a.toLowerCase().indexOf(b.toLowerCase(), a.length - b.length) !== -1;
	    }
	  }, {
	    id: "notEndsWith",
	    batch: "text",
	    handler: function (a, b) {
	      a = a.toString();
	      b = b.toString();
	      return a.toLowerCase().indexOf(b.toLowerCase(), a.length - b.length) === -1;
	    }
	  }],
	  date: [{
	    id: "greater",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return isDate(a) && a > b;
	    }
	  }, {
	    id: "less",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return isDate(a) && a < b;
	    }
	  }, {
	    id: "greaterOrEqual",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return isDate(a) && a >= b;
	    }
	  }, {
	    id: "lessOrEqual",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return isDate(a) && a <= b;
	    }
	  }, {
	    id: "equal",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return isDate(a) && a == b;
	    }
	  }, {
	    id: "notEqual",
	    batch: "datepicker",
	    handler: function (a, b) {
	      return !isDate(a) || a != b;
	    }
	  }, {
	    id: "between",
	    batch: "daterangepicker",
	    handler: function (a, b) {
	      if (!isDate(a)) return false;
	      return (!b.start || a > b.start) && (!b.end || a < b.end);
	    }
	  }, {
	    id: "notBetween",
	    batch: "daterangepicker",
	    handler: function (a, b) {
	      if (!isDate(a)) return false;
	      return !b.start || a <= b.start || !b.end || a >= b.end;
	    }
	  }]
	};
	var validationConditions = webix.copy(conditions);
	validationConditions.textLength = [{
	  id: "greater",
	  handler: function (a, b) {
	    return a.toString().length > b;
	  }
	}, {
	  id: "less",
	  handler: function (a, b) {
	    return a.toString().length < b;
	  }
	}, {
	  id: "greaterOrEqual",
	  handler: function (a, b) {
	    return a.toString().length >= b;
	  }
	}, {
	  id: "lessOrEqual",
	  handler: function (a, b) {
	    return a.toString().length <= b;
	  }
	}, {
	  id: "equal",
	  handler: function (a, b) {
	    return a.toString().length == b;
	  }
	}, {
	  id: "notEqual",
	  handler: function (a, b) {
	    return a.toString().length != b;
	  }
	}];
	validationConditions.number = validationConditions.number.concat([{
	  id: "between",
	  handler: function (a, b) {
	    return (!b.start || a > b.start) && (!b.end || a < b.end);
	  }
	}, {
	  id: "notBetween",
	  handler: function (a, b) {
	    return !b.start || a <= b.start || !b.end || a >= b.end;
	  }
	}]);

	function init$s(view) {
	  view.conditions = {
	    _empty: true,
	    _pull: {},
	    handlers: createRules(),
	    add: function (r, c, cond, val, style, page) {
	      add$1.apply(this, [view, r, c, cond, val, style, page]);
	    },
	    update: function (r, c, data, page) {
	      update.apply(this, [view, r, c, data, page]);
	    },
	    remove: function (r, c, page) {
	      remove$1.apply(this, [view, r, c, page]);
	    },
	    get: function (r, c, page) {
	      return get$1.apply(this, [view, r, c, page]);
	    },
	    parse: function (data, page) {
	      parse$1.apply(this, [view, data, page]);
	    },
	    serialize: function (page) {
	      return serialize$9.apply(this, [view, page]);
	    },
	    clear: function (page) {
	      clear.apply(this, [view, page]);
	    }
	  };
	  view.attachEvent("onConditionSet", function (data) {
	    return _setCondition(view, data);
	  });
	  view.attachEvent("onUndo", function (type_action, row, column, value) {
	    if (type_action == "condition") _undoCondition(view, row, column, value);
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    return _serialize$1(view, data);
	  });
	  view.attachEvent("onDataParse", function (data) {
	    return _parse$1(view, data);
	  });
	  view.attachEvent("onReset", function () {
	    return view.conditions.clear();
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") updatePosition$4(view, p.name, p.inc, p.data, p.start);
	  });
	  reset$8(view);
	}
	function createRules() {
	  var rules = webix.copy(conditions);
	  rules.number = rules.number.concat([{
	    id: "between",
	    handler: function (a, b) {
	      return (!b.start || a > b.start) && (!b.end || a < b.end);
	    }
	  }, {
	    id: "notBetween",
	    handler: function (a, b) {
	      return !b.start || a <= b.start || !b.end || a >= b.end;
	    }
	  }]);
	  return rules;
	}
	function getCellValue$2(view, value) {
	  if (isNaN(value * 1)) {
	    if (value.charAt(0) == "=" && value.length > 1) {
	      value = view._mData.getStore().exec(value.substring(1), view._mPage.getContext());
	      if (value === null) value = "";
	    }
	  } else {
	    value = value * 1;
	  }
	  return value;
	}
	function reset$8(view) {
	  view.conditions.clear();
	}
	function _setCondition(view, data) {
	  group.set(function () {
	    view.eachSelectedCell(function (cell) {
	      var collection = view.conditions.get(cell.row, cell.column);
	      if (collection) for (var i = 0; i < collection.length; i++) setSpanCss(view, cell.row, cell.column, collection[i][2], false);
	      _changeCondition("update", cell.row, cell.column, collection || null, data, view);
	    });
	  });
	  view.refresh();
	}
	function _undoCondition(view, row, column, value) {
	  if (view.conditions.get(row, column)) view.conditions.remove(row, column);
	  if (value) view.conditions.update(row, column, value);
	}
	function _serialize$1(view, obj) {
	  obj.conditions = view.conditions.serialize();
	}
	function _parse$1(view, obj) {
	  view.conditions.parse(obj.conditions);
	}
	function getConditionCss(view, row, column, rendered) {
	  var css = "";
	  if (!view.conditions._empty) {
	    var collection = view.conditions.get(row, column);
	    if (collection) {
	      var span = view.$$("cells").getSpan(row, column);
	      var value = view.getCellValue(row, column, false);
	      if (!value && value !== 0) value = "";
	      var type = getType(view, row, column);
	      if (!type || type == "string") type = "text";
	      var _loop = function () {
	        var currentValue = value;
	        var rule = collection[i][0];
	        var handlers = view.conditions.handlers;
	        var handler;
	        var checkOrder = ["text", type, "number", "date"];
	        checkOrder = checkOrder.filter(function (v, i) {
	          return checkOrder.indexOf(v) == i;
	        });
	        for (var k = 0; k < checkOrder.length; k++) {
	          var checkType = checkOrder[k];
	          handler = find(handlers[checkType], function (obj) {
	            return obj.id == rule;
	          });
	          if (handler) {
	            handler = handler.handler;
	            if (checkType == "text" && rule != "equal" && rule != "notEqual") currentValue = rendered;
	            break;
	          }
	        }
	        var compare = collection[i][1];
	        if (webix.isArray(compare)) compare = {
	          start: getCellValue$2(view, compare[0]),
	          end: getCellValue$2(view, compare[1])
	        };else compare = getCellValue$2(view, compare);
	        if (!css && handler && handler(currentValue, compare)) {
	          css = collection[i][2];
	          if (!span) return 1; // break
	          setSpanCss(view, row, column, collection[i][2], true);
	        } else setSpanCss(view, row, column, collection[i][2], false);
	      };
	      for (var i = collection.length - 1; i >= 0; i--) {
	        if (_loop()) break;
	      }
	    }
	  }
	  return css;
	}
	function addEmptyCollection(pull, row, column, state) {
	  state._empty = false;
	  if (!pull[row]) pull[row] = {};
	  if (!pull[row][column]) pull[row][column] = [];
	  return pull[row][column];
	}
	function parse$1(view, data, page) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) sheet.content.conditions = data;
	  } else {
	    //backward compatibility
	    var oldConditions = {
	      ">": "greater",
	      "<": "less",
	      "=": "equal",
	      "!=": "notEqual",
	      "<>": "between"
	    };
	    this._empty = true;
	    if (!data) return;
	    var i = data.length;
	    while (i--) {
	      var c = data[i];
	      var collection = addEmptyCollection(this._pull, c[0], c[1], this);
	      c[2] = oldConditions[c[2]] || c[2];
	      collection.push([c[2], c[3], c[4]]);
	    }
	  }
	}
	function clear(view, page) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) sheet.content.conditions = [];
	  } else this._pull = {};
	}
	function update(view, row, column, newData, page) {
	  newData.map(function (item) {
	    return _normalizeValue(view, item);
	  });
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      remove$1(view, row, column, page);
	      if (!sheet.content.conditions) sheet.content.conditions = [];
	      newData.forEach(function (condition) {
	        sheet.content.conditions.push([row, column].concat(_toConsumableArray(condition)));
	      });
	    }
	  } else {
	    addEmptyCollection(this._pull, row, column, this);
	    this._pull[row][column] = newData;
	  }
	}
	function get$1(view, row, column, page) {
	  var condition;
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet && sheet.content.conditions) {
	      var _conditions = webix.copy(sheet.content.conditions);
	      var index;
	      var conditionArr = [];
	      while ((index = findIndex(_conditions, function (condition) {
	        return condition[0] == row && condition[1] == column;
	      })) != -1) {
	        conditionArr.push(_conditions[index].slice(2, 5));
	        _conditions.splice(index, 1);
	      }
	      if (conditionArr.length) condition = conditionArr;
	    }
	  } else if (this._pull[row] && this._pull[row][column]) condition = this._pull[row][column] || null;
	  return condition || null;
	}
	function add$1(view, row, column, condition, value, style, page) {
	  var newCondition = _normalizeValue(view, [condition, value, style]);
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      if (!sheet.content.conditions) sheet.content.conditions = [];
	      sheet.content.conditions.push([row, column].concat(_toConsumableArray(newCondition)));
	    }
	  } else addEmptyCollection(this._pull, row, column, this).push(newCondition);
	}
	function remove$1(view, row, column, page) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet && sheet.content.conditions) {
	      var index;
	      while ((index = findIndex(sheet.content.conditions, function (condition) {
	        return condition[0] == row && condition[1] == column;
	      })) != -1) {
	        sheet.content.conditions.splice(index, 1);
	      }
	    }
	  } else {
	    var collection = this.get(row, column);
	    if (collection) delete this._pull[row][column];
	  }
	}
	function serialize$9(view, page) {
	  var data = [];
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet && sheet.content.conditions) data = sheet.content.conditions;
	  } else {
	    for (var row in this._pull) for (var column in this._pull[row]) for (var i = 0; i < this._pull[row][column].length; i++) {
	      var condition = this._pull[row][column][i];
	      data.push([row, column, condition[0], condition[1], condition[2]]);
	    }
	  }
	  return data;
	}
	function updatePosition$4(view, name, inc, data, start) {
	  var conditions = data.conditions,
	    i = conditions.length;
	  if (inc) {
	    while (i--) {
	      var _conditions$i = _slicedToArray(conditions[i], 2),
	        row = _conditions$i[0],
	        column = _conditions$i[1];
	      if (name == "row" && row >= start.row || name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc)
	            //delete lock mark if row was deleted
	            conditions.splice(i, 1);else
	            //update mark position if upper row was deleted
	            conditions[i][0] = row * 1 + inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            conditions.splice(i, 1);
	          } else conditions[i][1] = column * 1 + inc;
	        }
	      }
	    }
	  }
	}
	function clearConditionalFormats(view, range, page) {
	  group.set(function () {
	    eachRange(range, view, function (view, cell) {
	      var condition = view.conditions.get(cell.row, cell.column, page);
	      if (condition) _changeCondition("remove", cell.row, cell.column, condition, null, view, page);
	    });
	    view.refresh();
	  });
	}
	function pasteCondition(view, extra, row, col, cutted) {
	  var condition = extra.condition;
	  var collection = view.conditions.get(row, col);
	  _changeCondition("update", row, col, collection || null, condition, view);
	  if (cutted === 1) _changeCondition("remove", extra.row, extra.col, condition, null, view);
	}
	function _changeCondition(name, row, column, oldCondition, newCondition, view, page) {
	  if (view.callEvent("onBeforeConditionSet", [row, column, oldCondition, newCondition, page])) {
	    view.conditions[name].apply(view.conditions, [row, column, name == "remove" ? page : newCondition]);
	    view.callEvent("onAfterConditionSet", [row, column, oldCondition, newCondition, page]);
	  }
	}
	function _normalizeValue(view, condition) {
	  var val = condition[1];
	  if (val[0] == "=") condition[1] = view._mData.getStore().parse(val).source; //fixes formula
	  return condition;
	}

	var m2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		_changeCondition: _changeCondition,
		clearConditionalFormats: clearConditionalFormats,
		getConditionCss: getConditionCss,
		init: init$s,
		pasteCondition: pasteCondition
	});

	function init$r(view) {
	  view.validation = {
	    handlers: webix.copy(validationConditions),
	    get: function (row, column, page) {
	      return get(view, row, column, page);
	    },
	    add: function (row, column, rule, page) {
	      return add(view, row, column, rule, false, page);
	    },
	    remove: function (row, column, page) {
	      return remove(view, row, column, false, page);
	    },
	    highlight: function (state, page) {
	      return highlight(view, state, page);
	    },
	    _pull: {}
	  };
	  view.attachEvent("onReset", function () {
	    return reset$7(view);
	  });
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    if (type === "validation") undo$2(view, row, column, value);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") updatePosition$3(view, p.name, p.inc, p.data, p.start);
	  });
	  view.attachEvent("onCommand", function (action) {
	    if (action.id == "highlight-invalid-data") view.validation.highlight(true);else if (action.id == "remove-highlight-invalid-data") view.validation.highlight();else if (action.id == "remove-cell-validation") group.set(function () {
	      return view.eachSelectedCell(function (cell) {
	        return view.validation.remove(cell.row, cell.column);
	      });
	    });
	  });
	  view.attachEvent("onDataSerialize", function (data) {
	    var _serialize, _serialize2;
	    return _serialize = serialize$8(view), _serialize2 = _slicedToArray(_serialize, 2), data.validation = _serialize2[0], data.table.highlightInvalid = _serialize2[1], _serialize;
	  });
	  view.attachEvent("onDataParse", function (data) {
	    return parse(view, data);
	  });
	  view.attachEvent("onReset", function () {
	    view.validation._pull = {};
	    view.validation._highlight = false;
	  });
	  view.attachEvent("onChange", function () {
	    return showValidationPopup(view);
	  });
	  view.$$("cells").attachEvent("onSelectChange", function () {
	    return showValidationPopup(view);
	  });
	}
	function serialize$8(view) {
	  var pull = view.validation._pull;
	  var data = [];
	  for (var row in pull) for (var column in pull[row]) data.push([row, column, pull[row][column]]);
	  return [data, view.validation._highlight ? 1 : 0];
	}
	function parse(view, data) {
	  var validation = data.validation;
	  if (validation) for (var i = 0; i < validation.length; i++) {
	    var item = validation[i];
	    if (!view.validation._pull[item[0]]) view.validation._pull[item[0]] = {};
	    view.validation._pull[item[0]][item[1]] = item[2];
	  }
	  if (data.table && data.table.highlightInvalid) view.validation._highlight = true;
	}
	function get(view, row, column, page) {
	  var validation;
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet && sheet.content.validation) {
	      validation = find(sheet.content.validation, function (validation) {
	        return validation[0] == row && validation[1] == column;
	      });
	      if (validation) validation = validation[2];
	    }
	  } else if (view.validation._pull[row] && view.validation._pull[row][column]) validation = view.validation._pull[row][column];
	  return validation || null;
	}
	function add(view, row, column, validation, silent, page) {
	  page = page || view.getActiveSheet();
	  var oldValue = get(view, row, column, page);
	  if (page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (!sheet.content.validation) sheet.content.validation = [];
	    if (oldValue) find(sheet.content.validation, function (validation) {
	      return validation[0] == row && validation[1] == column;
	    })[2] = validation;else sheet.content.validation.push([row, column, validation]);
	  } else {
	    if (!view.validation._pull[row]) view.validation._pull[row] = {};
	    view.validation._pull[row][column] = validation;
	  }
	  if (!silent) view.callEvent("onAction", ["validation", {
	    row: row,
	    column: column,
	    newValue: validation,
	    value: oldValue,
	    page: page
	  }]);
	}
	function highlight(view, state, page) {
	  page = page || view.getActiveSheet();
	  if (page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (!sheet.content.table) sheet.content.table = {};
	    if (state == "toggle") state = !sheet.content.table.highlightInvalid;else state = !!state;
	    sheet.content.table.highlightInvalid = state ? 1 : 0;
	  } else {
	    if (state == "toggle") view.validation._highlight = !view.validation._highlight;else view.validation._highlight = !!state;
	    view.refresh();
	  }
	}
	function remove(view, row, column, silent, page) {
	  page = page || view.getActiveSheet();
	  var old = get(view, row, column, page);
	  if (old) {
	    if (page != view.getActiveSheet()) {
	      var validation = getSheet(view, page).content.validation;
	      var index = findIndex(validation, function (validation) {
	        return validation[0] == row && validation[1] == column;
	      });
	      validation.splice(index, 1);
	    } else {
	      delete view.validation._pull[row][column];
	      view.$$("cells").updateItem(row, column);
	    }
	    if (!silent) view.callEvent("onAction", ["validation", {
	      row: row,
	      column: column,
	      newValue: null,
	      value: old,
	      page: page
	    }]);
	  }
	}
	function updatePosition$3(view, name, inc, data, start) {
	  var validation = data.validation,
	    i = validation.length;
	  if (inc) {
	    while (i--) {
	      var _validation$i = _slicedToArray(validation[i], 2),
	        row = _validation$i[0],
	        column = _validation$i[1];
	      if (row && name == "row" && row >= start.row || column && name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc)
	            //delete rule if row was deleted
	            validation.splice(i, 1);else
	            //update position if upper row was deleted
	            validation[i][0] = row * 1 + inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            validation.splice(i, 1);
	          } else validation[i][1] = column * 1 + inc;
	        }
	      }
	    }
	  }
	}
	function undo$2(view, row, column, value) {
	  if (get(view, row, column)) remove(view, row, column, true);
	  if (value) add(view, row, column, value, true);
	}
	function reset$7(view) {
	  view.validation._pull = {};
	}
	function getCellValue$1(view, value) {
	  if (isNaN(value * 1)) {
	    if (value.charAt(0) == "=" && value.length > 1) {
	      value = view._mData.getStore().exec(value.substring(1), view._mPage.getContext());
	      if (value === null) value = "";
	    }
	  } else {
	    value = value * 1;
	  }
	  return value;
	}
	function isInvalid(view, row, column, rendered, page) {
	  var invalid = false;
	  var rule = view.validation.get(row, column, page);
	  if (rule) {
	    var type = rule.type;
	    var value;
	    if (!webix.isUndefined(rendered) && (type == "text" || type == "textLength")) value = rendered;else value = view.getCellValue(row, column, false, page);
	    if (value === "") return !!rule.ignoreEmpty;
	    var compare = rule.value;
	    if (compare) {
	      if (webix.isArray(compare)) compare = {
	        start: getCellValue$1(view, compare[0]),
	        end: getCellValue$1(view, compare[1])
	      };else compare = getCellValue$1(view, compare);
	    }
	    var handlers = view.validation.handlers[type];
	    if (handlers) {
	      var handler = find(handlers, function (obj) {
	        return obj.id == rule.condition;
	      }).handler;
	      if (!handler(value, compare)) invalid = true;
	    }
	    if (!invalid) switch (type) {
	      case "number":
	        if (rule.integer && parseInt(value) != value) invalid = true;
	        break;
	      case "date":
	        if (getType(view, row, column, page) != "date") invalid = true;
	        break;
	      case "range":
	        if (!(webix.isArray(compare) && compare.indexOf(value) != -1)) invalid = true;
	        break;
	    }
	  }
	  return invalid;
	}
	function getValidationCss(view, row, column, rendered) {
	  var css = "";
	  if (view.validation._highlight && isInvalid(view, row, column, rendered)) css = "webix_ss_invalid_data";
	  var span = view.$$("cells").getSpan(row, column);
	  if (span) setSpanCss(view, row, column, "webix_ss_invalid_data", !!css);
	  return css;
	}
	function showValidationPopup(view) {
	  if (view._commentSel) return;
	  var sel = view.getSelectedId(true);
	  var popup = view.validation._inputMessage;
	  if (!view._context && sel && sel.length == 1) {
	    sel = sel[0];
	    var row = sel.row;
	    var col = sel.column;
	    var validation = view.validation.get(row, col);
	    if (validation && validation.inputMessage) {
	      if (!popup) {
	        popup = view.validation._inputMessage = webix.ui({
	          view: "popup",
	          css: "ssheet_validation_input_message",
	          minWidth: 150,
	          minHeight: 50,
	          height: 100,
	          width: 250,
	          resize: true,
	          body: {
	            scroll: "auto",
	            template: " "
	          }
	        });
	        view._destroy_with_me.push(popup);
	      }
	      popup.getBody().setHTML(validation.inputMessage);
	      var grid = view.$$("cells");
	      var span = grid.getSpan(row, col);
	      var item = span ? {
	        row: row,
	        column: span[1] * 1 + span[2] - 1
	      } : sel;
	      return popup.show(grid.getItemNode(item), {
	        pos: "bottom"
	      });
	    }
	  }
	  if (popup) popup.hide();
	}
	function pasteValidation(view, extra, row, col, cutted) {
	  var validation = extra.validation;
	  view.validation.add(row, col, validation);
	  if (cutted === 1) view.validation.remove(extra.row, extra.col);
	}

	var m33 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getValidationCss: getValidationCss,
		init: init$r,
		isInvalid: isInvalid,
		pasteValidation: pasteValidation
	});

	function error(view, silent) {
	  if (!silent) view.alert({
	    type: "alert-error",
	    text: webix.i18n.spreadsheet.labels["error-link"]
	  });
	  return false;
	}
	function showCells(view, ref, silent) {
	  try {
	    var r1, r2, c1, c2, sheet;
	    var cellRef = ref.split("!");
	    switch (cellRef.length) {
	      case 1:
	        var _cellRef = cellRef;
	        var _cellRef2 = _slicedToArray(_cellRef, 1);
	        cellRef = _cellRef2[0];
	        break;
	      case 2:
	        var _cellRef3 = cellRef;
	        var _cellRef4 = _slicedToArray(_cellRef3, 2);
	        sheet = _cellRef4[0];
	        cellRef = _cellRef4[1];
	        if (sheet.indexOf(" ") != -1 && (sheet[0] != "'" || sheet[sheet.length - 1] != "'")) return error(view, silent);
	        break;
	      default:
	        return error(view, silent);
	    }
	    if (isCell(cellRef)) {
	      var _adress = adress(cellRef);
	      var _adress2 = _slicedToArray(_adress, 2);
	      r1 = _adress2[0];
	      c1 = _adress2[1];
	    } else {
	      var rangePos = range(ref, view);
	      if (rangePos) {
	        var _rangePos = _slicedToArray(rangePos, 5);
	        r1 = _rangePos[0];
	        c1 = _rangePos[1];
	        r2 = _rangePos[2];
	        c2 = _rangePos[3];
	        sheet = _rangePos[4];
	      } else return error(view, silent);
	    }
	    if (sheet) {
	      sheet = sheet.replaceAll("'", "");
	      if (!getSheet(view, sheet)) return error(view, silent);
	      if (sheet != view.getActiveSheet()) view.showSheet(sheet);
	    }
	    var grid = view.$$("cells");
	    grid.showCell(r1, c1);
	    grid.addSelectArea({
	      row: r1,
	      column: c1
	    }, {
	      row: r2 || r1,
	      column: c2 || c1
	    });
	    return true;
	  } catch (err) {
	    return error(view, silent);
	  }
	}

	function init$q(view, extra) {
	  view.attachEvent("onComponentInit", function () {
	    return ready$3(view);
	  });
	  var datatable = {
	    view: "datatable",
	    id: "cells",
	    css: "webix_ssheet_table webix_data_border wss_" + view.$index,
	    headerRowHeight: webix.skin.$name == "contrast" || webix.skin.$name == "flat" ? 24 : 20,
	    spans: true,
	    leftSplit: 1,
	    areaselect: true,
	    minColumnWidth: 40,
	    editable: true,
	    editaction: extra.liveEditor ? "custom" : "dblclick",
	    minRowHeight: 1,
	    navigation: true,
	    onClick: {
	      "webix_ssheet_ref": function (event) {
	        var ref = event.target.getAttribute("data-ref").replaceAll("&#x27;", "'");
	        if (showCells(view, ref)) return false;
	      }
	    }
	  };
	  if (extra) datatable = webix.extend(datatable, extra, true);
	  return datatable;
	}
	function ready$3(view) {
	  var grid = view._table;
	  var showCommentHandler = webix.event(document.body, "pointermove", function () {
	    var thread;
	    return function (e) {
	      if (e.pointerType !== "mouse") return;
	      clearTimeout(thread);
	      thread = webix.delay(function (e) {
	        if (view.comments._activeComment.editStatus) return;
	        var cell = grid.locate(e);
	        var visible = view.comments.commentsView && view.comments.commentsView.isVisible();
	        if (cell && view.comments.get(cell.row, cell.column)) {
	          var activeCell = view.comments._activeComment.cell;
	          if (activeCell && (activeCell.row != cell.row || activeCell.column != cell.column) || !visible) view.callEvent("onCommand", [{
	            id: "add-comment",
	            cell: cell,
	            viewonly: true
	          }]);
	        } else if (visible && !view.comments.commentsView.$view.contains(e.target)) view.callEvent("onCommentHide", []);
	      }, true, [e], 250);
	    };
	  }());

	  //in grid math
	  if (view.config.math) {
	    grid.config.editMath = true;
	  }

	  //saving value after edit
	  grid.attachEvent("onBeforeEditStop", function (st, ed) {
	    grid.$anyKey = false;
	    var old = view.getCellValue(ed.row, ed.column);
	    //ignore empty cells
	    if (old === "" && st.value === "") return;
	    if (st.value != old) {
	      view.setCellValue(ed.row, ed.column, st.value);
	      grid.refresh();
	    }
	    st.value = st.old;
	  });
	  grid.attachEvent("onEnter", function (ev) {
	    if (grid.getEditor()) {
	      webix.delay(function () {
	        grid.moveSelection("down");
	      });
	    }
	    webix.html.preventEvent(ev);
	  });

	  //prevent editing of locked cells
	  view.attachEvent("onBeforeEditStart", function (row, column) {
	    return !view.isCellLocked(row, column);
	  });
	  grid.attachEvent("onAfterEditStart", function (_ref) {
	    var row = _ref.row,
	      column = _ref.column;
	    var v = view.getCellValue(row, column);
	    if (grid.$anyKey) {
	      grid.$anyKey = false;
	      v = "";
	    }
	    grid.getEditor().setValue(v);
	  });
	  grid.attachEvent("onBeforeEditStart", function (editor) {
	    return view.callEvent("onBeforeEditStart", [editor.row, editor.column]);
	  });

	  //column drag event checking
	  var dragStartColumn;
	  var dragEndColumn;

	  //column and row selection
	  grid.attachEvent("onBeforeSelect", function (id) {
	    return id.column != "rowId";
	  });
	  grid.attachEvent("onBeforeBlockSelect", function (start, end, finalStep) {
	    highlightColRow(finalStep ? start : webix.copy(start), finalStep ? end : webix.copy(end), view);
	  });
	  function highlightHeaders() {
	    var ids = grid.getSelectedId(true);
	    if (ids.length) {
	      var start = ids[0];
	      var end = ids[ids.length - 1] ? ids[ids.length - 1] : ids[0];
	      highlightColRow(start, end, view);
	    } else {
	      var data = {
	        row: 0,
	        column: 0
	      };
	      highlightColRow(data, data, view);
	    }
	  }
	  grid.attachEvent("onSelectChange", function () {
	    return highlightHeaders();
	  });
	  grid.attachEvent("onAfterColumnShow", function () {
	    webix.delay(function () {
	      return highlightHeaders();
	    });
	  });
	  grid.attachEvent("onColumnResize", function () {
	    webix.delay(function () {
	      return highlightHeaders();
	    });
	  });
	  webix.event(grid.$view.firstChild, "mousedown", function (e) {
	    var resizeColumn = grid.config.resizeColumn;
	    var col = grid.locate(e);
	    if (col && col.cind) {
	      if (resizeColumn) {
	        var dx = grid.getColumnConfig(col.column).width;
	        var pos = webix.html.posRelative(e);
	        if (pos.x < resizeColumn.size || dx - pos.x < resizeColumn.size + 1) return;
	      }
	      dragStartColumn = col.cind;
	    }
	  });
	  webix.event(grid.$view.firstChild, "mousemove", function (e) {
	    if (dragStartColumn) {
	      var col = grid.locate(e);
	      if (col) {
	        dragEndColumn = col.cind;
	        highlightColRow({
	          column: grid.columnId(dragStartColumn)
	        }, {
	          column: grid.columnId(dragEndColumn || 1)
	        }, view);
	      }
	    }
	  });
	  var selectColumnHandler = webix.event(document.body, "mouseup", function () {
	    if (dragStartColumn) {
	      if (dragEndColumn != null) {
	        selectColumn(grid.columnId(dragStartColumn), view, grid.columnId(dragEndColumn || 1));
	        dragEndColumn = null;
	      }
	      dragStartColumn = null;
	    }
	  });
	  grid.attachEvent("onItemDblClick", function (id) {
	    if (id.column === "rowId") adjustRow(id.row, view);
	  });
	  var lastHeaderClick = 0;
	  grid.attachEvent("onHeaderClick", function (id, e) {
	    if (id.column == "rowId") {
	      selectAll(view);
	      return;
	    }
	    var headerClick = new Date();
	    var dblClick = headerClick - lastHeaderClick <= 300;
	    if (dblClick) {
	      adjustColumn(id.column, view);
	    } else {
	      lastHeaderClick = headerClick;
	      if (e.shiftKey) {
	        selectColumns(id.column, view);
	      } else {
	        selectColumn(id.column, view);
	      }
	    }
	  });

	  //select rows by shift click
	  var lastClickedRow = null;
	  grid.attachEvent("onItemClick", function (cell, e) {
	    if (cell.column === "rowId") {
	      if (!e.shiftKey) selectRow(cell.row, view);else {
	        if (!lastClickedRow) selectRow(cell.row, view);else selectRow(lastClickedRow, view, cell.row);
	      }
	      lastClickedRow = cell.row;
	    }
	  });

	  //reset API
	  view.attachEvent("onReset", function () {
	    return reset$6(view);
	  });
	  view.attachEvent("onBeforeSheetShow", function () {
	    return grid.editStop();
	  });
	  grid.attachEvent("onBlur", function () {
	    //after focus moved out, check and if it is somewhere
	    //on the spreadsheet controls them move focus back to datatable
	    webix.delay(function () {
	      var target = document.activeElement;
	      if (target && target.tagName == "INPUT") return;
	      var focus = webix.UIManager.getFocus();
	      var need_focus = focus && !focus.config.saveFocus && focus != grid && focus.getTopParentView && focus.getTopParentView() === view;
	      if (need_focus) webix.UIManager.setFocus(grid);
	    }, this, [], 100);
	  });
	  grid.attachEvent("onMoveSelection", function (cell, mode, details) {
	    if (cell.column == "rowId" && mode == "left" && details.ctrl) cell.column = 1;
	  });
	  setDefaultCss(view);
	  view.attachEvent("onDestruct", function () {
	    webix.eventRemove(showCommentHandler);
	    webix.eventRemove(selectColumnHandler);
	  });
	}
	function cell_template(view, obj, common, _v, column, valueOnly) {
	  var formulasMode = view.$$("cells").config.showFormulas && !valueOnly;
	  var col = column.id;
	  var row = obj.id;
	  if (!view._mPage) return "";
	  var cell = view._mPage.getCell(row - 1, col - 1);
	  var value = cell ? cell.value : "";
	  var format = cell ? cell.format : "";
	  var math = view.getCellValue(row, col);
	  if (formulasMode) value = math;
	  if (math != value) {
	    var locale = webix.i18n.spreadsheet.table;
	    if (value == "#REF!") value = locale["math-ref-error"];else if (value == "#ERROR") value = locale["math-error"];else value = getMathTemplate(math, value);
	  }
	  var css = "";
	  var text = typeof value == "string" && value.trim()[0] == "+" || !value && value !== 0 || isNaN(value);
	  var invalidDate = !formulasMode && checkFormat(format, "date") && isDateInvalid(value);
	  var extra = "";
	  if (!valueOnly) {
	    extra += view.comments.get(row, col) ? "<div class='ssheet_commented_sign'></div>" : "";
	    extra += view.getCellFilter(row, col) ? "<div class='ssheet_filter_sign'></div>" : "";
	  }

	  //text can be formatted only in case of string number format
	  if (!invalidDate && (typeof value == "boolean" || !text || checkFormat(format, "string"))) {
	    if (format) {
	      var _cell = {
	        css: ""
	      };
	      var helper = getFormat(format);
	      if (helper) {
	        var newValue = helper(value, _cell);
	        if (newValue != webix.i18n.spreadsheet.table["format-error"]) {
	          if (_cell.css) css = "class=\"".concat(_cell.css, "\"");
	          value = newValue;
	        } else if (!text) value *= 1;
	      }
	    } else value *= 1;
	  }

	  //print only cell values (td with position:relative ignores borders while printing)
	  if (view._print && !(value || value === 0)) return "";
	  if (webix.isUndefined(value) || value === null) value = "";
	  return "<div ".concat(css, ">").concat(value, "</div>").concat(view._print ? "" : extra);
	}
	function reset$6(view) {
	  var grid = view.$$("cells");
	  grid.clearAll();
	  var columns = view.config.columnCount;
	  var rows = view.config.rowCount;
	  var cols = [{
	    id: "rowId",
	    header: "",
	    width: 40,
	    css: "sheet_column_0",
	    template: function (el) {
	      return el.id;
	    }
	  }];
	  for (var i = 1; i <= columns; i++) {
	    cols.push({
	      id: i,
	      editor: "text",
	      header: {
	        text: encode[i]
	      },
	      template: function (obj, common, value, column) {
	        return cell_template(view, obj, common, value, column);
	      },
	      cssFormat: function (value, obj, row, column) {
	        var rendered = getRenderedValue(view, row, column);
	        var cell = view._mPage.getCell(row - 1, column - 1);
	        var css = cell ? cell.style || "" : "";
	        var conditional = getConditionCss(view, row, column, rendered);
	        if (conditional) css += (css ? " " : "") + conditional;
	        var print = getPrintBordersCss(view, row, column);
	        if (print) css += (css ? " " : "") + print;
	        var validation = getValidationCss(view, row, column, rendered);
	        if (validation) css += (css ? " " : "") + validation;
	        return css;
	      }
	    });
	    view.callEvent("onColumnInit", [cols[i]]);
	  }
	  grid.refreshColumns(cols);
	  var data = [];
	  for (var _i = 1; _i <= rows; _i++) data.push({
	    id: _i
	  });
	  grid.parse(data);
	}
	function getRenderedValue(view, row, col) {
	  var htmlFilter = /<[^>]*>/gi;
	  return cell_template(view, {
	    id: row
	  }, null, null, {
	    id: col
	  }, true).replace(htmlFilter, "");
	}

	// nowrap by default
	function setDefaultCss(view) {
	  webix.html.addStyle("#" + view._table.$view.id + ".webix_dtable .webix_cell { white-space:nowrap;}");
	}

	function init$p(view) {
	  var grid = view.$$("cells");
	  var key = webix.env.isMac ? "command" : "ctrl";
	  webix.UIManager.addHotKey(key + "-a", function () {
	    if (!grid.getEditor()) selectAll(view);
	  }, grid);
	  webix.UIManager.addHotKey(key + "-p", function (v, e) {
	    return dialog("print", view, e);
	  }, grid);
	  if (!view.config.readonly) {
	    webix.UIManager.addHotKey("any", function (view, ev) {
	      var code = ev.which || ev.keyCode;
	      var f2 = code == 113;

	      //ignore shift key, f1, f3 - f12 (f2 - edit)
	      if (code == 16 || code >= 112 && code <= 123 && !f2) return;
	      var sel = view.getSelectedId(true);
	      if (sel.length) {
	        if (!(view.config.liveEditor && f2)) grid.$anyKey = true;
	        grid.edit(sel[0]);
	      }
	    }, grid);
	    webix.UIManager.addHotKey("enter", function (view) {
	      var sel = view.getSelectedId(true);
	      if (sel.length) {
	        if (!(view.config.liveEditor && !grid.callEvent("onBeforeLiveEditor", [sel[0]]))) grid.edit(sel[0]);
	      }
	    }, grid);
	    webix.UIManager.addHotKey("backspace", function () {
	      return del(view);
	    }, grid);
	    webix.UIManager.addHotKey("delete", function () {
	      return del(view);
	    }, grid);
	    var redo = webix.env.isMac ? "command-shift-z" : "ctrl-y";
	    webix.UIManager.addHotKey(redo, function () {
	      return view.redo();
	    }, grid);
	    webix.UIManager.addHotKey(key + "-z", function () {
	      return view.undo();
	    }, grid);
	    webix.UIManager.addHotKey(key + "-b", function () {
	      return styleHotKey(view, "font-weight");
	    }, grid);
	    webix.UIManager.addHotKey(key + "-i", function () {
	      return styleHotKey(view, "font-style");
	    }, grid);
	    webix.UIManager.addHotKey(key + "-u", function (v, e) {
	      return ctrlU(view, e);
	    }, grid);
	    var strike = webix.env.isMac ? "command-shift-x" : "ctrl-alt-s";
	    webix.UIManager.addHotKey(strike, function () {
	      return styleHotKey(view, "strike");
	    }, grid);
	    webix.UIManager.addHotKey(key + "-add", function (v, e) {
	      return zoom$2(view, "in", e);
	    }, grid);
	    webix.UIManager.addHotKey(key + "-=", function (v, e) {
	      return zoom$2(view, "in", e);
	    }, grid);
	    webix.UIManager.addHotKey(key + "-subtract", function (v, e) {
	      return zoom$2(view, "out", e);
	    }, grid);
	    webix.UIManager.addHotKey(key + "-0", function (v, e) {
	      return zoom$2(view, 1, e);
	    }, grid);
	    webix.UIManager.addHotKey(key + "-`", function () {
	      return view.showFormulas("toggle");
	    }, grid);
	  }
	}
	function del(view) {
	  if (!view.$$("cells").getEditor()) group.set(function () {
	    view.eachSelectedCell(function (cell) {
	      return view.setCellValue(cell.row, cell.column, "");
	    });
	    view.refresh();
	  });
	}
	function zoom$2(view, value, e) {
	  view.zoom(value);
	  return webix.html.preventEvent(e);
	}
	function ctrlU(view, e) {
	  styleHotKey(view, "underline");
	  return webix.html.preventEvent(e);
	}
	function dialog(id, view, e) {
	  view.callEvent("onCommand", [{
	    id: id
	  }]);
	  return webix.html.preventEvent(e);
	}
	function styleHotKey(view, attr) {
	  var cell = view.getSelectedId();
	  if (cell) {
	    var style = view.getStyle(cell.row, cell.column);
	    var elementOn = styleFormats[attr] || attr;
	    var elementOff = "normal";
	    var state = style && style.props[attr] === elementOn ? elementOff : elementOn;
	    view.callEvent("onStyleSet", [attr, state]);
	  }
	}

	function init$o(view) {
	  view.attachEvent("onComponentInit", function () {
	    return ready$2(view);
	  });
	  return {
	    view: "toolbar",
	    css: "webix_ssheet_toolbar",
	    elements: [{
	      view: "text",
	      icon: "wxi-menu-down",
	      on: {
	        onItemClick: function () {
	          var suggest = webix.$$(this.config.suggest);
	          if (!suggest.isVisible()) suggest.show(this.getInputNode());
	        },
	        onChange: function (val, oldVal, config) {
	          if (config == "user" && val !== "") view.showCell(val);
	        }
	      },
	      suggest: {
	        view: "ssheet-suggest-labels",
	        css: "webix_ssheet_nav_suggest",
	        body: {
	          template: "<span class='webix_ssheet_left'>#name#</span><span class='webix_ssheet_right'>#value#</span>",
	          width: 250
	        },
	        on: {
	          onBeforeShow: function () {
	            var data = view.ranges.serialize(view.getActiveSheet()).map(function (r) {
	              return {
	                name: r[0],
	                value: r[1]
	              };
	            });
	            if (!data.length) return false;
	            var list = this.getList();
	            list.clearAll();
	            list.parse(data);
	          }
	        },
	        data: []
	      },
	      width: 150,
	      id: "navigation"
	    }, {
	      view: "ssheet-separator"
	    }, {
	      view: "label",
	      label: webix.i18n.spreadsheet.liveEditor["edit"],
	      width: 65
	    }, {
	      view: "button",
	      id: "formulaButton",
	      label: "f(x)",
	      autowidth: true,
	      popup: {
	        view: "popup",
	        on: {
	          onBeforeShow: function () {
	            var _this = this;
	            if (!view.getSelectedId()) return false;
	            webix.delay(function () {
	              var table = _this.getBody();
	              if (table.unselect) table.unselect();
	              table.scrollTo(0, 0);
	              var filter = table.getFilter("value");
	              filter.value = "";
	              filter.focus();
	              table.filterByAll();
	            });
	          },
	          onHide: function () {
	            view.$$("liveEditor").focus();
	          }
	        },
	        width: 200,
	        body: {
	          view: "datatable",
	          saveFocus: true,
	          //don't move focus to spreadsheet table
	          scroll: "y",
	          data: cr(),
	          columns: [{
	            id: "value",
	            header: [{
	              content: "textFilter"
	            }],
	            fillspace: true
	          }],
	          on: {
	            onItemClick: function (id) {
	              insertFormula(view, this, id);
	            },
	            onKeyPress: function (code) {
	              if (code == 27) this.hide();else if (code == 13) {
	                var sel = this.getSelectedId();
	                if (sel) insertFormula(view, this, sel.row);
	              }
	            }
	          }
	        }
	      }
	    }, {
	      view: "live-editor",
	      disabled: true,
	      id: "liveEditor",
	      suggestData: cr()
	    }]
	  };
	}
	function fillEditor(view, cell, clear) {
	  var editor = view.$$("liveEditor");
	  if (!(editor && cell)) return;
	  var disabled = disableEditor(view, cell.row, cell.column);
	  editor.config.activeCell = cell;
	  editor.setValue(clear ? "" : editor.getCellValue(cell.row, cell.column));
	  if (!view._rangeDialog) view.$handleSelection = disabled ? null : function (a, b, st, en) {
	    return pasteRange(view, st, en, a);
	  };
	  return !disabled;
	}
	function disableEditor(view, row, column) {
	  var editor = view.$$("liveEditor");
	  var disabled = view.getCellEditor(row, column) || view.isCellLocked(row, column);
	  if (disabled) editor.disable();else editor.enable();
	  return disabled;
	}
	function pasteRange(view, st, en, cell) {
	  var editor = view.$$("liveEditor");
	  var updateRange = editor._update_range;
	  var cursor = editor.getInputNode().selectionStart;
	  var sheet = "";
	  if (editor._activeMath) {
	    var activeSheet = view.getActiveSheet();
	    if (editor._activeMath != activeSheet) sheet = editor.prepareSheet(activeSheet);
	  }
	  var range;
	  if (st == en) {
	    var colon = editor.getValue()[(updateRange ? updateRange.pos : cursor) - 1] == ":";
	    range = colon ? st : sheet + st;
	  } else range = "".concat(sheet + st, ":").concat(en);
	  if (updateRange && updateRange.pos == cursor - updateRange.len) {
	    editor.setRange(range, true);
	    cursor = editor._update_range.pos + range.length;
	  } else if (editor.expectOperator()) {
	    editor.setRange(range);
	    cursor += range.length;
	  } else return endEdit(view, cell);
	  editor.focus();
	  editor.getInputNode().setSelectionRange(cursor, cursor);
	  editor.paintValue();
	  return false;
	}
	function endEdit(view, st) {
	  var editor = view.$$("liveEditor");
	  if (editor.isEnabled()) {
	    var cell = editor.config.activeCell;
	    editor.showActiveSheet();
	    editor.updateCellValue(cell);
	    editor.setValue(st ? view.getCellValue(st.row, st.column) : "");
	  }
	  return true;
	}
	function insertFormula(view, table, id) {
	  var editor = view.$$("liveEditor");
	  var formula = table.getItem(id).value;
	  var value = editor.getValue();
	  var newValue = formula + "(";
	  if (value.indexOf("=") == 0) newValue = value + (editor.expectOperator(true) ? "" : "+") + newValue;else newValue = "=" + newValue;
	  table.getParentView().hide();
	  editor.setValue(newValue);
	}
	function ready$2(view) {
	  var editor = view.$$("liveEditor");
	  var nav = view.$$("navigation");
	  var grid = view._table;

	  //block native editor, and move focus to the custom input
	  //edit by key press
	  grid.attachEvent("onBeforeEditStart", function (cell) {
	    var mode = grid.$anyKey;
	    grid.$anyKey = false;
	    return startEdit(this, cell, mode);
	  });
	  //edit by enter key
	  grid.attachEvent("onBeforeLiveEditor", function (cell) {
	    return startEdit(this, cell, false);
	  });
	  //edit by dbl-click
	  grid.attachEvent("onItemDblClick", function (cell) {
	    if (cell.column != "rowId") {
	      if (view.getCellEditor(cell.row, cell.column)) this.edit(cell);else startEdit(this, cell, false);
	    }
	  });
	  grid.attachEvent("onAfterScroll", function () {
	    if (editor.$view.contains(document.activeElement)) editor.paintValue();
	  });
	  view.attachEvent("onCellChange", function (r, c, v, p) {
	    if (p == view.getActiveSheet()) {
	      var cell = editor.config.activeCell;
	      if (cell && cell.row == r && cell.column == c) editor.setValue(v);
	    }
	  });
	  view.attachEvent("onAfterSelect", function (data) {
	    if (!view.$handleSelection) fillEditor(view, data[0]);
	  });
	  view.attachEvent("onChange", function (mode) {
	    if (mode == "update" && editor.isEnabled()) {
	      var cell = editor.config.activeCell;
	      if (cell && editor.getValue() != view.getCellValue(cell.row, cell.column)) {
	        delete editor._update_range;
	        editor.showActiveSheet();
	        editor.updateCellValue();
	      }
	    }
	  });
	  view.attachEvent("onBeforeSheetShow", function (name) {
	    if (view._rangeDialog) return;
	    var cell = editor.config.activeCell;
	    if (cell) {
	      var cursor = editor.getInputNode().selectionStart;
	      var val = editor.getValue();
	      if (view.getCellValue(cell.row, cell.column) != val) {
	        if (!editor._activeMath) editor._activeMath = view.getActiveSheet();
	        webix.delay(function () {
	          if (name == editor._activeMath) {
	            view.$handleSelection = null;
	            var _cell = editor.config.activeCell;
	            grid.select(_cell.row, _cell.column);
	          }
	          editor.setValue(val);
	          //update highlight
	          editor.refresh();
	          editor.getInputNode().setSelectionRange(cursor, cursor);
	          editor.paintValue();
	          view.$handleSelection = function (a, b, st, en) {
	            return pasteRange(view, st, en, a);
	          };
	        });
	      } else {
	        nav.setValue("");
	        clearEditor();
	      }
	    }
	  });
	  view.attachEvent("onReset", function () {
	    if (!view._rangeDialog) view.$handleSelection = null;
	  });
	  view.$$("cells").attachEvent("onFocus", function () {
	    //ignore table clipboard logic
	    if (editor._activeMath) {
	      webix.delay(function () {
	        return editor.focus();
	      });
	    }
	  });
	  view.attachEvent("onAfterLoad", function () {
	    return clearEditor();
	  });
	  view.attachEvent("onAction", function (name, options) {
	    if (options.page && options.page != view.getActiveSheet()) return;
	    var cell = editor.config.activeCell;
	    if (name == "paste") return fillEditor(view, cell);
	    var isActiveCell = cell && cell.row == options.row && cell.column == options.column;
	    if (isActiveCell && (name == "lock" || name == "dropdown")) disableEditor(view, options.row, options.column);
	  });
	  view.attachEvent("onFormatChange", function (r, c, f, of, p) {
	    if (p == view.getActiveSheet()) updateEditor(r, c);
	  });
	  view.attachEvent("onCellChange", function (r, c, v, p) {
	    if (p == view.getActiveSheet()) updateEditor(r, c);
	  });
	  function updateEditor(row, column) {
	    var activeCell = editor.config.activeCell;
	    if (activeCell && activeCell.row == row && activeCell.column == column) fillEditor(view, {
	      row: row,
	      column: column
	    });
	  }
	  function startEdit(table, cell, clear) {
	    //do not interfere with custom editors
	    if (!view.getCellEditor(cell.row, cell.column) && fillEditor(view, cell, clear)) {
	      editor.focus();
	      if (!clear) {
	        editor.paintValue();
	        var input = editor.getInputNode();
	        var symbols = input.value.length;
	        input.setSelectionRange(symbols, symbols);
	      }
	      return false;
	    }
	    return true;
	  }
	  function clearEditor() {
	    editor.define({
	      activeCell: null
	    });
	    editor.setValue("");
	    editor.disable();
	  }
	}

	var Dialog = /*#__PURE__*/function () {
	  function Dialog(view) {
	    _classCallCheck(this, Dialog);
	    this.view = view;
	  }
	  return _createClass(Dialog, [{
	    key: "$init",
	    value: function $init() {}
	  }, {
	    key: "$show",
	    value: function $show() {}
	  }, {
	    key: "$hide",
	    value: function $hide() {}
	  }, {
	    key: "open",
	    value: function open() {
	      var _this = this;
	      if (!this.$dialog) {
	        this.$dialog = webix.ui(this.$init());
	        this.view._destroy_with_me.push(this.$dialog);
	        this.$dialog.attachEvent("onHide", function () {
	          _this.$hide();
	          webix.UIManager.setFocus(_this.view);
	        });
	        this.$dialog.attachEvent("onShow", function () {
	          webix.UIManager.setFocus(_this.$dialog);
	        });
	      } else if (this.$dialog.isVisible()) return;
	      var form = this.$dialog.getBody();
	      this.$dialog.show();
	      if (this.$show(this.$dialog, form) === false) this.close();
	    }
	  }, {
	    key: "close",
	    value: function close() {
	      this.$dialog.hide();
	    }
	  }]);
	}();

	function image(url) {
	  return "=IMAGE(\"".concat(url, "\")");
	}
	function chart(config) {
	  config = webix.copy(config);
	  var bar = config.type == "bar";
	  if (bar && config.horizontal) config.type = "barH";
	  var result = "=SPARKLINE(".concat(config.range, ",\"").concat(config.type, "\"");
	  if (bar) result += ",\"".concat(config.color, "\",\"").concat(config.negativeColor, "\"");else if (config.color) result += ",\"".concat(config.color, "\"");
	  return result + ")";
	}
	function parseImage(value) {
	  if (value && typeof value == "string" && value.indexOf("=IMAGE(") === 0) return {
	    url: unescape(value.substr(7, value.length - 8))
	  };
	}
	function parseChart(value) {
	  if (value && typeof value == "string" && value.indexOf("=SPARKLINE(") === 0) {
	    var text = value.substr(11, value.length - 12).split(",");
	    var result = {
	      range: text[0],
	      type: unescape(text[1]),
	      color: unescape(text[2]),
	      negativeColor: unescape(text[3])
	    };
	    if (result.type == "barH") {
	      result.type = "bar";
	      result.horizontal = 1;
	    }
	    return result;
	  }
	}
	function unescape(text) {
	  if (!text) return "";
	  text = text.trim();
	  if (text[0] === "\"") text = text.substr(1);
	  if (text[text.length - 1] === "\"") text = text.substr(0, text.length - 1);
	  return text;
	}

	var action$d = "add-image-cell";
	var DialogBox$d = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      this.cell = this.view.getSelectedId();
	      if (!this.cell) return false;
	      form.elements.preview.setHTML("");
	      form.elements.url.setValue("");

	      //sync state of dialog to data with  the selected cell
	      var value = this.view.getCellValue(this.cell.row, this.cell.column);
	      var data = parseImage(value);
	      if (data && data.url) form.elements.url.setValue(data.url);
	      form.elements.url.focus();
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      var save = this.view.config.save;
	      var server = save && save.images || null;
	      return {
	        view: "ssheet-dialog",
	        head: webix.i18n.spreadsheet.labels["image-title"],
	        move: true,
	        position: "center",
	        body: {
	          view: "form",
	          elements: [{
	            view: "text",
	            name: "url",
	            placeholder: webix.i18n.spreadsheet.labels["image-url"],
	            on: {
	              "onChange": function (image) {
	                return _this.showPreview(image);
	              }
	            }
	          }, {
	            view: "label",
	            label: webix.i18n.spreadsheet.labels["image-or"],
	            align: "center"
	          }, {
	            view: "uploader",
	            label: webix.i18n.spreadsheet.labels["image-upload"],
	            upload: server,
	            on: {
	              onBeforeFileAdd: function (file) {
	                var _this2 = this;
	                if (!this.config.upload) {
	                  var reader = new FileReader();
	                  reader.onload = function (e) {
	                    return _this2.getFormView().elements.url.setValue(e.target.result);
	                  };
	                  reader.readAsDataURL(file.file);
	                  return false;
	                } else this.getFormView().elements.preview.setHTML("");
	              },
	              onFileUpload: function (item, response) {
	                this.getFormView().elements.url.setValue(response.imageURL);
	              }
	            }
	          }, {
	            view: "formlate",
	            name: "preview",
	            borderless: true,
	            css: "webix_ssheet_preview",
	            template: "",
	            height: 50
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var cell = this.cell;
	      var image = this.fillUrl(this.$dialog.getBody().elements.url.getValue());
	      this.view.addImage(cell.row, cell.column, image);
	      this.close();
	    }
	  }, {
	    key: "fillUrl",
	    value: function fillUrl(url) {
	      if (!/^[/]|((https?:\/|data:image)\/)/i.test(url)) url = "http://" + url;
	      return url;
	    }
	  }, {
	    key: "showPreview",
	    value: function showPreview(image) {
	      if (image) {
	        image = webix.template.escape(this.fillUrl(image));
	        this.$dialog.queryView("form").elements.preview.setHTML("<img class='webix_ssheet_cimage' src='" + image + "'></img>");
	      }
	    }
	  }]);
	}(Dialog);

	var imc = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$d,
		action: action$d
	});

	var action$c = "add-image-top";
	var DialogBox$c = /*#__PURE__*/function (_box$DialogBox) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _box$DialogBox);
	  return _createClass(DialogBox, [{
	    key: "open",
	    value: function open(action) {
	      this.config = action.config;
	      this.viewid = action.viewid;
	      this.view.callEvent("onUIEditStart", [this.viewid, "image"]);
	      DialogBox$d.prototype.open.apply(this, arguments);
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.callEvent("onUIEditStop", [this.viewid, "image"]);
	      this.config = this.viewid = null;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      this.view.attachEvent("onUIEditStart", function (id, type) {
	        if (_this.$dialog && _this.$dialog.isVisible() && type != "image") _this.close();
	      });
	      this.view.attachEvent("onCommand", function (obj) {
	        if (obj.id == "close-ui-editor" && _this.$dialog && _this.$dialog.isVisible()) _this.close();
	      });
	      return DialogBox$d.prototype.$init.apply(this, arguments);
	    }
	  }, {
	    key: "$show",
	    value: function $show(box, form) {
	      form.elements.preview.setHTML("");
	      form.elements.url.setValue("");
	      if (this.config && this.config.data) form.elements.url.setValue(this.config.data);
	      form.elements.url.focus();
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var image = this.fillUrl(this.$dialog.getBody().elements.url.getValue());
	      if (this.viewid) this.view.views.update(this.viewid, image);else {
	        var id = this.view.views.add(null, null, "image", image);
	        this.view.views.highlight(id);
	      }
	      this.close();
	    }
	  }]);
	}(DialogBox$d);

	var imt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$c,
		action: action$c
	});

	var ignoreUndoReset = false;
	function init$n(view) {
	  reset$5(view);
	  undoHandlers(view);
	  view.attachEvent("onHardReset", function () {
	    return reset$5(view);
	  });
	  view.attachEvent("onAfterSheetShow", function () {
	    return reset$5(view);
	  });
	  // styles
	  view.attachEvent("onBeforeStyleChange", function (row, column, nstyle, ostyle) {
	    if (isCellLocked$1(view, row, column)) return false;
	    addToHistory(view, {
	      action: "style",
	      row: row,
	      column: column,
	      value: ostyle,
	      newValue: nstyle,
	      group: group.value
	    });
	  });
	  // editing
	  view.attachEvent("onBeforeValueChange", function (row, column, nvalue, ovalue, page) {
	    if (isCellLocked$1(view, row, column, page)) return false;
	    if (page == view.getActiveSheet()) addToHistory(view, {
	      action: "value",
	      row: row,
	      column: column,
	      value: ovalue,
	      newValue: nvalue,
	      group: group.value
	    });
	  });
	  // merge cells
	  view.attachEvent("onBeforeSpan", function (row, column, value) {
	    if (isCellLocked$1(view, row, column)) return false;
	    addToHistory(view, {
	      action: "span",
	      row: row,
	      column: column,
	      value: value,
	      newValue: value,
	      group: group.value
	    });
	  });
	  // split cells
	  view.attachEvent("onBeforeSplit", function (row, column, value) {
	    if (isCellLocked$1(view, row, column)) return false;
	    addToHistory(view, {
	      action: "split",
	      row: row,
	      column: column,
	      value: value,
	      newValue: value,
	      group: group.value
	    });
	  });
	  // Any abstract undo actions
	  view.attachEvent("onAction", function (action, obj) {
	    if (!(obj.page && obj.page != view.getActiveSheet())) addToHistory(view, {
	      action: action,
	      row: obj.row || null,
	      column: obj.column || null,
	      value: webix.isUndefined(obj.value) ? null : obj.value,
	      newValue: webix.isUndefined(obj.newValue) ? null : obj.newValue,
	      extra: obj.extra || null,
	      group: group.value
	    });
	  });

	  // column resize
	  view.$$("cells").attachEvent("onColumnResize", function (column, nvalue, ovalue) {
	    return addToHistory(view, {
	      action: "c-resize",
	      row: 0,
	      column: column,
	      value: ovalue,
	      newValue: nvalue,
	      group: group.value
	    });
	  });
	  // column hide
	  view.attachEvent("onColumnOperation", function (action, start, end, page) {
	    if (page == view.getActiveSheet() && action !== "add" && action !== "del") addToHistory(view, {
	      action: {
	        id: action,
	        group: "column"
	      },
	      group: group.value,
	      column: {
	        start: {
	          column: start
	        },
	        end: {
	          column: end
	        }
	      }
	    });
	  });
	  // row hide
	  view.attachEvent("onRowOperation", function (action, start, end, page) {
	    if (page == view.getActiveSheet() && action !== "add" && action !== "del") addToHistory(view, {
	      action: {
	        id: action,
	        group: "row"
	      },
	      group: group.value,
	      row: {
	        start: {
	          row: start
	        },
	        end: {
	          row: end
	        }
	      }
	    });
	  });
	  // row resize
	  view.$$("cells").attachEvent("onRowResize", function (row, nvalue, ovalue) {
	    return addToHistory(view, {
	      action: "r-resize",
	      row: row,
	      column: 0,
	      value: ovalue,
	      newValue: nvalue,
	      group: group.value
	    });
	  });

	  // condition formats
	  view.attachEvent("onBeforeConditionSet", function (row, column, value, nvalue, page) {
	    if (isCellLocked$1(view, row, column, page)) return false;
	    if (page == view.getActiveSheet()) {
	      value = value ? webix.copy(value) : null;
	      addToHistory(view, {
	        action: "condition",
	        row: row,
	        column: column,
	        value: value,
	        newValue: nvalue,
	        group: group.value
	      });
	    }
	  });

	  // zoom
	  view.attachEvent("onZoom", function (value, oldVal, page) {
	    if (page == view.getActiveSheet()) addToHistory(view, {
	      action: "zoom",
	      value: oldVal,
	      newValue: value,
	      group: group.value
	    });
	  });
	  view.$skipHistory = 0;
	}
	function undo$1(view) {
	  restoreHistory(view, -1);
	}
	function redo$1(view) {
	  restoreHistory(view, 1);
	}
	function reset$5(view) {
	  if (!ignoreUndoReset) {
	    view._ssUndoHistory = [];
	    view._ssUndoCursor = -1;
	  }
	}
	function addToHistory(view, data) {
	  if (!view.$skipHistory && !view._loading_data) {
	    // remove futher history
	    view._ssUndoHistory.splice(view._ssUndoCursor + 1);
	    // add to an array and increase cursor
	    view._ssUndoHistory.push(data);
	    view._ssUndoCursor++;
	  }
	}
	function ignoreUndo$1(func, view) {
	  view.$skipHistory++;
	  try {
	    func.call(view);
	  } finally {
	    view.$skipHistory--;
	  }
	}
	function ignoreReset(func) {
	  ignoreUndoReset = true;
	  func();
	  ignoreUndoReset = false;
	}
	function restoreHistory(view, step) {
	  var data = view._ssUndoHistory[step > 0 ? view._ssUndoCursor + step : view._ssUndoCursor];
	  if (data) {
	    var value = step > 0 ? data.newValue : data.value;
	    var direction = step > 0;
	    var params = [data.action, data.row, data.column, value, direction, data.extra];
	    view._ssUndoCursor += step;

	    // group support
	    var group = data.group;
	    var prevData = view._ssUndoHistory[step > 0 ? view._ssUndoCursor + step : view._ssUndoCursor];
	    ignoreUndo$1(function () {
	      view.callEvent("onUndo", params);
	      if (!group || !(prevData && group == prevData.group)) {
	        view.refresh();
	        view.callEvent("onAfterUndo", []);
	      }
	    }, view);
	    if (prevData && group && group == prevData.group) {
	      restoreHistory(view, step);
	    }
	  }
	}
	function undoHandlers(view) {
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    switch (type) {
	      case "freeze-row":
	        view.freezeRows(value);
	        break;
	      case "freeze-column":
	        view.freezeColumns(value);
	        break;
	    }
	  });
	}

	var m11 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ignoreReset: ignoreReset,
		ignoreUndo: ignoreUndo$1,
		init: init$n,
		redo: redo$1,
		reset: reset$5,
		undo: undo$1
	});

	function init$m(view) {
	  var grid = view._table.$view.querySelector(".webix_ss_center");
	  view.views = {
	    register: function (type, render, track) {
	      if (!this._types[type]) this._types[type] = {
	        render: render,
	        track: track
	      };
	    },
	    move: function (id, x, y) {
	      var win = webix.$$(id);
	      var old = webix.copy(this._pull[id]);
	      this._pull[id].x = _correctPos(view, old.config.width, x / view._zoom, "x");
	      this._pull[id].y = _correctPos(view, old.config.height, y / view._zoom, "y");
	      view.callEvent("onAction", ["move-view", {
	        row: id,
	        newValue: webix.copy(this._pull[id]),
	        value: old
	      }]);
	      _showOne(view, win, this._pull[id]);
	    },
	    add: function (x, y, type, data, config, id) {
	      var _this = this;
	      config = config || {};
	      if (type == "chart") {
	        config = webix.extend(config, {
	          type: "line",
	          dataSeries: "columns"
	        });
	      }
	      var height = config.height = config.height || 300;
	      var width = config.width = config.width || 500;
	      var win = webix.ui({
	        id: id || "$ssheet-ui" + webix.uid(),
	        // fixed id is for undo only
	        view: "ssheet-ui",
	        container: grid,
	        master: view._table.config.id,
	        width: width,
	        height: height
	      });
	      win.attachEvent("onViewMoveEnd", function (x, y) {
	        var state = view._table.getScrollState();
	        _this.move(id, x, y + state.y);
	      });
	      win.attachEvent("onViewResize", function () {
	        var conf = _this._pull[id];
	        var old = webix.copy(conf);
	        conf.config.height = win.$height;
	        conf.config.width = win.$width;
	        view.callEvent("onAction", ["resize-view", {
	          row: id,
	          newValue: webix.copy(conf),
	          value: old
	        }]);
	      });
	      win.attachEvent("onViewEdit", function () {
	        var config = _this._pull[id];
	        var command = _this._commands[config.type] || config.type;
	        view.callEvent("onCommand", [{
	          id: command,
	          viewid: id,
	          config: config
	        }]);
	      });
	      win.attachEvent("onViewRemove", function () {
	        return _this.remove(id);
	      });
	      id = win.config.id;
	      x = _correctPos(view, height, x, "x");
	      y = _correctPos(view, width, y, "y");
	      this._pull[id] = {
	        x: x,
	        y: y,
	        type: type,
	        data: data,
	        config: config
	      };
	      this.update(id, data, config, true);
	      _showOne(view, win, this._pull[id]);
	      return id;
	    },
	    remove: function (id) {
	      var old = this._pull[id];
	      webix.$$(id).close();
	      delete this._pull[id];
	      view.callEvent("onAction", ["add-view", {
	        row: id,
	        newValue: null,
	        value: old
	      }]);
	    },
	    get: function (id) {
	      return webix.$$(id).getBody();
	    },
	    getConfig: function (id) {
	      return this._pull[id];
	    },
	    update: function (id, data, config, inner) {
	      var old = inner ? null : webix.copy(this._pull[id]);
	      var conf = this._pull[id];
	      var actions = this._types[conf.type];
	      data = data || config.data || "";
	      config = config || {};
	      delete config.data;
	      if (conf.type == "chart") {
	        var type = config.type;
	        if (type && !config.series) {
	          var xAxis = config.xAxis && config.xAxis.range;
	          var legend = config.legend && config.legend.range;
	          var oldLeftColumn;
	          if (old && old.config) {
	            if (_isPie(type)) {
	              if (old.config.legend && old.config.legend.fromData) oldLeftColumn = 1;
	            } else if (old.config.xAxis && old.config.xAxis.fromData) oldLeftColumn = 1;
	          }
	          config.series = _getSeries(view, data, config.dataSeries, {
	            xAxis: xAxis,
	            legend: legend
	          }, oldLeftColumn);
	        }
	      }
	      var win = webix.$$(id);
	      var height = config.height || 300;
	      var width = config.width || 500;
	      if (win.$width != width && win.$height != height) {
	        win.define({
	          width: width,
	          height: height
	        });
	        win.resize();
	      }
	      conf.data = data;
	      conf.config = config;
	      var node = this.get(id);
	      data = _fromRange(view, conf);
	      if (actions.render) {
	        var renderConfig = webix.copy(conf);

	        //clear width and height for inner view resizing
	        renderConfig.config.width = renderConfig.config.height = 0;
	        node = actions.render(node, renderConfig, data);
	        _processTables(node);
	      }
	      if (actions.track) _trackOne(view, node, actions.track, conf);
	      view.callEvent("onAction", ["add-view", {
	        row: id,
	        newValue: webix.copy(this._pull[id]),
	        value: old
	      }]);
	    },
	    highlight: function (id) {
	      var win = webix.$$(id);
	      var css = "webix_ssheet_ui_focused";
	      var oldWin = webix.$$(this._activeWin);
	      if (oldWin && !oldWin.$destructed) webix.html.removeCss(oldWin.$view, css);
	      if (win) {
	        this._activeWin = id;
	        webix.html.addCss(win.$view, css);
	      } else delete this._activeWin;
	    },
	    _commands: {
	      "image": "add-image-top",
	      "chart": "add-chart"
	    },
	    _types: {},
	    _pull: {}
	  };

	  // handle events
	  view._table.attachEvent("onResize", function () {
	    return _showAll(view);
	  });
	  view._table.attachEvent("onScrollY", function () {
	    return _showAll(view);
	  });
	  view._table.attachEvent("onScrollX", function () {
	    return _showAll(view);
	  });
	  view.attachEvent("onReset", function () {
	    return _reset(view);
	  });
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    var move = type === "move-view";
	    if (move || type == "resize-view" || type === "add-view") _undoUI(view, move, row, value);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "header-hide") _showAll(view);else if (action == "before-grid-change") _updateData(view, p.name, p.inc, p.data, p.start);
	  });
	  view.attachEvent("onZoom", function (v, o, p) {
	    if (p == view.getActiveSheet()) _showAll(view, true);
	  });
	  view.attachEvent("onColumnOperation", function (a, s, e, p) {
	    if (p == view.getActiveSheet()) _showAll(view, true);
	  });
	  view.attachEvent("onRowOperation", function (a, s, e, p) {
	    if (p == view.getActiveSheet()) _showAll(view, true);
	  });
	  view.attachEvent("onDataParse", function (data) {
	    return _parse(view, data);
	  });
	  view.attachEvent("onDataSerialize", function (data, config) {
	    return _serialize(view, data, config);
	  });
	  view.attachEvent("onCellChange", function (r, c, v, p) {
	    if (p == view.getActiveSheet()) _trackAll(view);
	  });
	  view.attachEvent("onMathRefresh", function () {
	    return _trackAll(view);
	  });
	  view.attachEvent("onDestruct", function () {
	    for (var i in view.views._pull) webix.$$(i).destructor();
	  });
	  var editUIType;
	  webix.attachEvent("onClick", function (ev) {
	    var focus = webix.$$(ev);
	    if (focus && focus.config.externalUI) focus = webix.$$(focus.config.externalUI);
	    var ui = focus && (focus.queryView("ssheet-ui", "self") || focus.queryView("ssheet-ui", "parent"));
	    if (ui) {
	      view.views.highlight(ui);
	      var id = ui.config.id;
	      if (editUIType) {
	        if (view.views.getConfig(id).type == editUIType) ui.callEvent("onViewEdit", []); //start editing if any editor is open
	        else view.callEvent("onCommand", [{
	          id: "close-ui-editor"
	        }]);
	      }
	    } else if (!editUIType) view.views.highlight();
	  });
	  view.attachEvent("onUIEditStart", function (id, type) {
	    view.views.highlight(id);
	    editUIType = type;
	  });
	  view.attachEvent("onUIEditStop", function (id, type) {
	    if (editUIType == type) webix.delay(function () {
	      // after onClick handler (to save focus)
	      editUIType = null;
	    });
	  });

	  // set default views
	  view.views.register("chart", function (node, conf, data) {
	    var dataRange = _getNames(view, conf);
	    var config = _genChartConfig(conf, data, dataRange);
	    return webix.ui(config, node);
	  }, function (view, data) {
	    view.clearAll();
	    view.parse(data);
	  });
	  view.views.register("image", function (node, conf, data) {
	    var config = webix.extend({
	      css: "webix_ssheet_bgimage",
	      template: "<img src=\"".concat(data, "\"/>")
	    }, conf.config || {}, true);
	    return webix.ui(config, node);
	  });
	}
	function _parse(view, data) {
	  var views = data.views;
	  if (views) {
	    ignoreUndo$1(function () {
	      views.forEach(function (obj) {
	        return view.views.add.apply(view.views, obj);
	      });
	    }, view);
	  }
	}
	function _serialize(view, data, config) {
	  data.views = [];
	  for (var i in view.views._pull) {
	    var conf = view.views._pull[i];
	    var one = [conf.x, conf.y, conf.type, conf.data, conf.config];
	    if (config && config.viewIds) one.push(i);
	    data.views.push(one);
	  }
	}
	var thread;
	function _trackAll(view) {
	  clearTimeout(thread);
	  thread = webix.delay(function () {
	    var ui = view.views;
	    for (var id in ui._pull) {
	      var conf = ui._pull[id];
	      var viewMethods = ui._types[conf.type];
	      var render = viewMethods.render;
	      var track = viewMethods.track;
	      if (track) _trackOne(view, ui.get(id), track, conf, render);
	    }
	  });
	}
	function _trackOne(view, node, track, conf, render) {
	  var data = _fromRange(view, conf);
	  if (conf.type == "chart") {
	    if (render) node = render(node, conf, data, true);
	    var config = conf.config;
	    if (config && !_isPie(config.type)) _removeLegend(data, conf, view);
	  }
	  track(node, data);
	}
	function _updateData(view, name, inc, data, start) {
	  var views = data.views;
	  for (var i = 0; i < views.length; i++) {
	    if (_isRange(views[i][3])) {
	      var series = views[i][4].series;
	      if (series) {
	        series.forEach(function (obj) {
	          obj.range = changeRange(obj.range, name, inc, start);
	          obj.active = changeRange(obj.active, name, inc, start);
	        });
	      }
	      var legend = views[i][4].legend && views[i][4].legend.range;
	      if (legend) views[i][4].legend.range = _getDataParts(legend).map(function (range) {
	        return changeRange(range, name, inc, start);
	      }).join(",");
	      var xAxis = views[i][4].xAxis && views[i][4].xAxis.range;
	      if (xAxis) views[i][4].xAxis.range = changeRange(xAxis, name, inc, start);
	      views[i][3] = _getDataParts(views[i][3]).map(function (range) {
	        return changeRange(range, name, inc, start);
	      }).join(",");
	    }
	  }
	}
	function _showAll(view, pos) {
	  //close possibly open menus of embedded ui
	  webix.callEvent("onClick", []);
	  for (var id in view.views._pull) {
	    var win = webix.$$(id);
	    var conf = view.views._pull[id];
	    if (pos) {
	      conf.x = _correctPos(view, conf.config.width, conf.x, "x");
	      conf.y = _correctPos(view, conf.config.height, conf.y, "y");
	    }
	    _showOne(view, win, conf);
	  }
	}
	function _showOne(view, win, conf) {
	  var state = view._table.getScrollState();
	  win.define({
	    width: conf.config.width * view._zoom,
	    height: conf.config.height * view._zoom
	  });
	  win.resize();
	  win.show({
	    x: conf.x * view._zoom,
	    y: conf.y * view._zoom - state.y
	  });
	}
	function _correctPos(view, winSize, v, type) {
	  if (!v && v !== 0) v = view._table.getScrollState()[type] + 50;else {
	    var size = (type == "x" ? _getWidth(view) : _getHeight(view)) - winSize;
	    v = Math.min(Math.max(v, 0), size);
	  }
	  return v;
	}
	function _reset(view) {
	  ignoreUndo$1(function () {
	    for (var id in view.views._pull) view.views.remove(id);
	  }, view);
	}
	function _undoUI(view, move, id, value) {
	  if (value) {
	    var x = value.x,
	      y = value.y,
	      type = value.type,
	      data = value.data,
	      config = value.config;
	    if (view.views._pull[id]) {
	      if (move) view.views.move(id, x, y);else view.views.update(id, data, config);
	    } else view.views.add(x, y, type, data, config, id);
	    var editor = view.$$("chartEditor");
	    if (editor && editor.viewId == id) editor.queryView("form").setValues(config);
	  } else view.views.remove(id);
	}
	function _getWidth(view) {
	  var width = 0;
	  view._table.eachColumn(function (id) {
	    if (id !== "rowId") width += this.getColumnConfig(id).width;
	  });
	  return width / view._zoom;
	}
	function _getHeight(view) {
	  var height = 0;
	  view._table.data.each(function (obj) {
	    height += obj.$height || webix.skin.$active.rowHeight;
	  });
	  return height / view._zoom;
	}

	//disable datatables not to interfere with ss table events
	function _processTables(node) {
	  var query = function (view) {
	    return view.name == "datatable" || view.name == "treetable";
	  };
	  var tables = node.queryView(query, "self");
	  if (tables) tables = [tables];else tables = node.queryView(query, "all");
	  tables.forEach(function (dt) {
	    return dt.disable();
	  });
	}

	/* chart-specific helpers */

	function _prepareType(config) {
	  var type = config.type;
	  if (config.stacked && type.indexOf("stacked") == -1) config.type = "stacked" + config.type.charAt(0).toUpperCase() + config.type.substr(1);
	  if (config["3D"] && type.indexOf("3D") == -1) config.type += "3D";
	  if (config.horizontal && type.indexOf("H") == -1) config.type += "H";
	  return config.type;
	}
	function _genChartConfig(conf, data, dataRange) {
	  var htmlFilter = /<[^>]*>/gi;
	  var config = webix.copy(conf.config);
	  config = _normalizeConfig(config);
	  var scale = config.scale.lines;
	  var scaleColor = config.scale.color || undefined;
	  var type = config.type = _prepareType(config);
	  var pie = _isPie(type);
	  var lines = config.series;
	  config.series = [];
	  var xAxis = config.xAxis;
	  var legendConfig = config.legend;
	  var pieLegend;
	  var legendRange;
	  var legend = {
	    height: 24,
	    align: legendConfig.align || "center",
	    valign: legendConfig.valign || "bottom"
	  };
	  legend.layout = legend.valign == "middle" ? "y" : "x";
	  if (pie) {
	    if (legendConfig.fromData) pieLegend = "data0";else if (legendConfig.range) pieLegend = dataRange[legendConfig.range];
	    legend.template = "#".concat(pieLegend, "#");
	  } else {
	    legend.values = [];
	    legendRange = !legendConfig.fromData && legendConfig.range;
	    if (legendRange) {
	      var switchDirection = config.dataSeries == "rows";
	      legendRange = _getParts(legendConfig.range, switchDirection, dataRange);
	    }
	    config.yAxis = config.yAxis || {};
	    for (var property in config.yAxis) if (config.yAxis[property] === "") delete config.yAxis[property];
	    config.yAxis = webix.extend(config.yAxis, {
	      lineColor: scaleColor,
	      color: scaleColor,
	      lines: scale,
	      lineShape: config.scale.circle ? "arc" : "default"
	    });
	    if (xAxis.fromData) xAxis.range = legendRange ? Object.keys(data[0]).filter(function (line) {
	      return legendRange.indexOf(line) == -1;
	    })[0] : "data0";else if (xAxis.range) xAxis.range = dataRange[xAxis.range];
	  }
	  for (var i = 0; i < lines.length; i++) {
	    var color = lines[i].color;
	    var item = dataRange[lines[i].range];
	    if (item != xAxis.range && !(pie && item == pieLegend /*(item == pieLegend || legendConfig.range == lines[i].active)*/)) {
	      var s = {
	        value: "#".concat(item, "#"),
	        tooltip: {
	          template: lines[i].tooltip ? "#".concat(item, "#") : ""
	        }
	      };
	      s[pie ? "pieInnerText" : "label"] = lines[i].label ? "#".concat(item, "#") : "";
	      if (type == "radar" || type == "line" || type == "spline" || type == "scatter") {
	        s.line = {
	          color: color
	        };
	        s.item = {
	          borderColor: color,
	          type: lines[i].marker
	        };
	      } else if (!pie) s.color = color;
	      if (type == "area" || type == "splineArea") s.alpha = 0.7;
	      if (data[0] && !pie && (legendRange || legendConfig.fromData)) {
	        var val = legendRange ? data[0][legendRange[i]] : data[0][item];
	        var text = val || val === 0 ? (val + "").replace(htmlFilter, "") : "";
	        legend.values.push({
	          text: text,
	          color: color
	        });
	      }
	      config.series.push(s);
	    }
	  }
	  if (!pie) {
	    config.xAxis = {
	      title: config.xAxis.title,
	      lineColor: scaleColor,
	      color: scaleColor,
	      lines: scale
	    };
	    config[type == "barH" || type == "stackedBarH" ? "yAxis" : "xAxis"].template = function (obj) {
	      var val = obj[xAxis.range];
	      return val || val === 0 ? (val + "").replace(htmlFilter, "") : "";
	    };
	  }
	  if (pieLegend || legend.values && legend.values.length) config.legend = legend;else delete config.legend;
	  if (type == "scatter") {
	    config.xValue = config.xAxis.template;
	    config.origin = "auto";
	    delete config.xAxis.template;
	  }
	  return webix.extend({
	    view: "chart",
	    padding: {
	      left: 80
	    }
	  }, config, true);
	}
	function _isRange(data) {
	  return typeof data == "string" && data.indexOf("data:image") === -1;
	}
	function _fromRange(view, conf) {
	  var data = conf.data;
	  if (/^(http|data:image|\/)/i.test(data)) return data;
	  var arr = [];
	  if (data) {
	    var config = conf.config;
	    var switchDirection = config.dataSeries == "rows";
	    var lastIndex = 0;
	    data = _getDataParts(data);
	    for (var i = 0; i < data.length; i++) {
	      var cells = _isRange(data[i]) ? range(data[i], view) : null;
	      if (cells) {
	        var page = cells[4] ? view._mData.getPage(cells[4]) : view._mPage;
	        cells[5] = lastIndex;
	        if (page) {
	          var subdata = switchDirection ? getRangeRows.apply(page, cells) : getRangeCols.apply(page, cells);
	          lastIndex += subdata[2];
	          for (var _i = 0; _i < subdata[0].length; _i++) {
	            if (!arr[_i]) arr[_i] = {};
	            webix.extend(arr[_i], subdata[0][_i]);
	          }
	        }
	      }
	    }
	  }
	  return arr;
	}
	function _removeLegend(arr, conf, view) {
	  var config = conf.config;
	  if (_typeof(config.legend) != "object") config.legend = {
	    fromData: !!config.legend
	  };
	  var legend = config.legend;
	  if (legend.fromData) arr.shift();else if (legend.range) {
	    var names = _getNames(view, conf);
	    var switchDirection = config.dataSeries == "rows";
	    var legendRange = _getParts(legend.range, switchDirection, names);
	    for (var i = 0; i < legendRange.length; i++) {
	      var item = legendRange[i];
	      delete arr[0][item];
	    }
	  }
	}
	function _getNames(view, conf) {
	  var data = conf.data;
	  if (/^(http|data:image|\/)/i.test(data)) return;
	  var names = {};
	  if (data) {
	    var config = conf.config;
	    var switchDirection = config.dataSeries == "rows";
	    var lastIndex = 0;
	    data = _getDataParts(data);
	    for (var i = 0; i < data.length; i++) {
	      var cells = _isRange(data[i]) ? range(data[i], view) : null;
	      if (cells) {
	        var page = cells[4] ? view._mData.getPage(cells[4]) : view._mPage;
	        cells[5] = lastIndex;
	        if (page) {
	          var subdata = switchDirection ? getRangeRows.apply(page, cells) : getRangeCols.apply(page, cells);
	          lastIndex += subdata[2];
	          webix.extend(names, subdata[1]);
	        }
	      }
	    }
	  }
	  return names;
	}
	function _getDataParts(data) {
	  return data.replace(/\s/g, "").split(",");
	}
	function _isPie(type) {
	  return /pie|donut/.test(type);
	}
	function _getSeries(view, data, dataSeries, active, oldLeftColumn) {
	  var dir = dataSeries == "rows";
	  var vals = [];
	  if (data) {
	    var xAxis = [];
	    var legend = [];
	    var activeVals = [];
	    if (active) {
	      if (active.legend) legend = _getParts(active.legend, dir);
	      if (active.xAxis) xAxis = _getParts(active.xAxis, dir);
	      if (active.series) activeVals = active.series.filter(function (val) {
	        return legend.indexOf(val.range) == -1 && xAxis.indexOf(val.range) == -1;
	      });
	    }
	    data = _getDataParts(data);
	    var colorIndex = 0;
	    var firstRange = 1;
	    data.forEach(function (subdata) {
	      var series = isRange(subdata) ? range(subdata, view) : null;
	      if (series) {
	        var start = dir ? series[0] : series[1];
	        var end = dir ? series[2] : series[3];
	        var inActiveSeries;
	        var _loop = function () {
	          var range = dir ? toRange(i, series[1], i, series[3], series[4]) : toRange(series[0], i, series[2], i, series[4]);
	          var seria = find(activeVals, function (val) {
	            return val.range == range && (!val.active || val.active == subdata);
	          });
	          if (seria) {
	            if (!seria.active) seria.active = subdata;
	            inActiveSeries = 1;
	          }
	        };
	        for (var i = start; i <= end; i++) {
	          _loop();
	        }
	        var _loop2 = function () {
	            var range = dir ? toRange(_i2, series[1], _i2, series[3], series[4]) : toRange(series[0], _i2, series[2], _i2, series[4]);
	            if (legend.indexOf(range) != -1 || xAxis.indexOf(range) != -1) return 0; // continue
	            var activeVal = activeVals.filter(function (val) {
	              return val.range == range && val.active == subdata;
	            })[0];
	            if (inActiveSeries && !activeVal && !(oldLeftColumn && firstRange && _i2 == start)) return 0; // continue
	            vals.push(activeVal || {
	              active: subdata,
	              range: range,
	              marker: "square",
	              tooltip: 1,
	              color: _getColor(colorIndex)
	            });
	            colorIndex++;
	          },
	          _ret;
	        for (var _i2 = start; _i2 <= end; _i2++) {
	          _ret = _loop2();
	          if (_ret === 0) continue;
	        }
	        firstRange = 0;
	      }
	    });
	  }
	  return vals;
	}
	function _getParts(ranges, dir, dataRange) {
	  var parts = [];
	  ranges = _getDataParts(ranges);
	  ranges.forEach(function (subRange) {
	    subRange = isRange(subRange) ? range(subRange) : null;
	    if (subRange) {
	      var start = dir ? subRange[0] : subRange[1];
	      var end = dir ? subRange[2] : subRange[3];
	      for (var i = start; i <= end; i++) {
	        var _range = dir ? toRange(i, subRange[1], i, subRange[3], subRange[4]) : toRange(subRange[0], i, subRange[2], i, subRange[4]);
	        parts.push(dataRange ? dataRange[_range] : _range);
	      }
	    }
	  });
	  return parts;
	}
	function _normalizeConfig(config) {
	  if (_typeof(config.xAxis) != "object") config.xAxis = {
	    fromData: !!config.xAxis
	  };
	  if (_typeof(config.legend) != "object") config.legend = {
	    fromData: !!config.legend
	  };
	  config.legend = webix.extend(config.legend, {
	    layout: "x",
	    align: "center",
	    valign: "bottom"
	  });
	  if (!config.scale) config.scale = {
	    lines: 1
	  };
	  return config;
	}
	function _getColor(index) {
	  var colors = ["#e06666", "#6aa84f", "#3c78d8", "#e69138", "#783f04", "#134f5c", "#674ea7", "#c27ba0"];
	  return colors[index % colors.length];
	}
	function getRangeCols(r1, c1, r2, c2, sheetName, lastIndex) {
	  var data = [];
	  var rangeToData = {};
	  for (var i = r1, rind = 0; i <= r2; i++, rind++) {
	    data[rind] = {};
	    for (var j = c1, cind = lastIndex; j <= c2; j++, cind++) {
	      if (i == r2) {
	        rangeToData["".concat(sheetName ? sheetName + "!" : "").concat(encode[j]).concat(r1, ":").concat(encode[j]).concat(r2)] = "data".concat(cind);
	        lastIndex++;
	      }
	      data[rind]["data".concat(cind)] = this.getValue(i - 1, j - 1);
	    }
	  }
	  return [data, rangeToData, lastIndex];
	}
	function getRangeRows(r1, c1, r2, c2, sheetName, lastIndex) {
	  var data = [];
	  var rangeToData = {};
	  for (var i = c1, cind = 0; i <= c2; i++, cind++) {
	    data[cind] = {};
	    for (var j = r1, rind = lastIndex; j <= r2; j++, rind++) {
	      if (i == c2) {
	        rangeToData["".concat(sheetName ? sheetName + "!" : "").concat(encode[c1]).concat(j, ":").concat(encode[c2]).concat(j)] = "data".concat(rind);
	        lastIndex++;
	      }
	      data[cind]["data".concat(rind)] = this.getValue(j - 1, i - 1);
	    }
	  }
	  return [data, rangeToData, lastIndex];
	}

	var m30 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		_getDataParts: _getDataParts,
		_getParts: _getParts,
		_getSeries: _getSeries,
		_isPie: _isPie,
		_normalizeConfig: _normalizeConfig,
		init: init$m
	});

	var labels$1 = webix.i18n.spreadsheet.labels;
	function init$l(view) {
	  view.attachEvent("onComponentInit", function () {
	    return ready$1(view);
	  });
	  var activeSkin = webix.skin.$active;
	  var padding = activeSkin.dataPadding - 2;
	  var margin = activeSkin.layoutMargin.form;
	  return {
	    width: 440,
	    hidden: true,
	    id: "chartEditor",
	    css: "ssheet_chart",
	    rows: [{
	      height: activeSkin.barHeight,
	      css: "ssheet_chart_wizard_head",
	      padding: {
	        left: 4
	      },
	      cols: [{
	        view: "icon",
	        inputHeight: activeSkin.inputHeight,
	        hotkey: "esc",
	        icon: "webix_ssheet_icon ssi-arrow-left",
	        click: function () {
	          return closeEditor(view);
	        }
	      }, {
	        type: "header",
	        borderless: true,
	        template: labels$1["chart-edit"]
	      }]
	    }, {
	      view: "form",
	      complexData: true,
	      borderless: true,
	      padding: {
	        top: 0
	      },
	      elementsConfig: {
	        labelWidth: 184
	      },
	      elements: [{
	        view: "tabview",
	        id: "chartTabs",
	        cells: [{
	          id: "common",
	          borderless: true,
	          type: "form",
	          paddingX: 0,
	          header: labels$1["chart-common"],
	          rows: [{
	            view: "scrollview",
	            body: {
	              margin: margin,
	              rows: [addRichselect("type", "chart-type", getTypes()), {
	                view: "checkbox",
	                label: labels$1["stacked-chart"],
	                name: "stacked",
	                hidden: true
	              }, {
	                view: "checkbox",
	                label: labels$1["horizontal-chart"],
	                name: "horizontal",
	                hidden: true
	              }, {
	                view: "checkbox",
	                label: labels$1["chart-pie-3d"],
	                name: "3D",
	                batch: "pie"
	              }, {
	                view: "text",
	                label: labels$1["chart-range"],
	                name: "range"
	              }, {
	                view: "checkbox",
	                label: labels$1["chart-col-xAxis"],
	                name: "xAxis.fromData",
	                batch: "axis"
	              }, {
	                view: "checkbox",
	                label: labels$1["chart-row-legend"],
	                name: "legend.fromData"
	              }, {
	                view: "radio",
	                label: labels$1["chart-data-from"],
	                name: "dataSeries",
	                vertical: true,
	                options: [{
	                  id: "columns",
	                  value: labels$1["chart-columns"]
	                }, {
	                  id: "rows",
	                  value: labels$1["chart-rows"]
	                }]
	              }, {}]
	            }
	          }]
	        }, {
	          id: "advanced",
	          borderless: true,
	          type: "form",
	          paddingX: 0,
	          padding: {
	            bottom: 0
	          },
	          header: labels$1["chart-series"],
	          rows: [{
	            view: "ssheet-series",
	            name: "series"
	          }]
	        }, {
	          id: "extras",
	          borderless: true,
	          type: "form",
	          paddingX: 0,
	          header: labels$1["chart-extras"],
	          rows: [{
	            view: "scrollview",
	            body: {
	              view: "accordion",
	              margin: webix.skin.$active.layoutMargin.form,
	              css: "webix_ssheet_accordion",
	              multi: true,
	              type: "clean",
	              rows: [{
	                header: labels$1["chart-legend"],
	                body: {
	                  margin: margin,
	                  padding: padding,
	                  rows: [{
	                    view: "text",
	                    label: labels$1["chart-legend-range"],
	                    name: "legend.range"
	                  }, addRichselect("legend.align", "chart-legend-align", getLegendAlign()), addRichselect("legend.valign", "chart-legend-valign", getLegendValign())]
	                }
	              }, {
	                header: labels$1["chart-scale"],
	                batch: "axis",
	                id: "scale",
	                body: {
	                  margin: margin,
	                  padding: padding,
	                  rows: [{
	                    view: "checkbox",
	                    label: labels$1["chart-lines"],
	                    name: "scale.lines",
	                    batch: "axis"
	                  }, {
	                    view: "checkbox",
	                    label: labels$1["chart-radar-circle"],
	                    name: "scale.circle",
	                    hidden: true
	                  }, {
	                    view: "ssheet-colorpicker",
	                    label: labels$1["chart-scale-color"],
	                    name: "scale.color",
	                    batch: "axis"
	                  }]
	                }
	              }, {
	                header: labels$1["chart-x-axis"],
	                batch: "axis",
	                body: {
	                  margin: margin,
	                  padding: padding,
	                  rows: [{
	                    view: "text",
	                    label: labels$1["chart-xAxis-range"],
	                    name: "xAxis.range",
	                    range: true,
	                    batch: "axis"
	                  }, {
	                    view: "text",
	                    label: labels$1["chart-xAxis-title"],
	                    name: "xAxis.title",
	                    batch: "axisTitle"
	                  }]
	                }
	              }, {
	                header: labels$1["chart-y-axis"],
	                batch: "axis",
	                body: {
	                  margin: margin,
	                  padding: padding,
	                  rows: [{
	                    view: "text",
	                    label: labels$1["chart-yAxis-title"],
	                    name: "yAxis.title",
	                    batch: "axisTitle"
	                  }, {
	                    view: "text",
	                    label: labels$1["chart-yAxis-origin"],
	                    name: "origin",
	                    batch: "axis",
	                    attributes: {
	                      type: "number"
	                    }
	                  }, {
	                    view: "label",
	                    label: labels$1["chart-yAxis-note"],
	                    css: "ssheet_note",
	                    height: 20
	                  }, {
	                    view: "text",
	                    label: labels$1["chart-yAxis-start"],
	                    name: "yAxis.start",
	                    batch: "axis",
	                    attributes: {
	                      type: "number"
	                    }
	                  }, {
	                    view: "text",
	                    label: labels$1["chart-yAxis-end"],
	                    name: "yAxis.end",
	                    batch: "axis",
	                    attributes: {
	                      type: "number"
	                    }
	                  }, {
	                    view: "text",
	                    label: labels$1["chart-yAxis-step"],
	                    name: "yAxis.step",
	                    batch: "axis",
	                    attributes: {
	                      type: "number"
	                    }
	                  }]
	                }
	              }, {}]
	            }
	          }]
	        }]
	      }]
	    }]
	  };
	}
	function ready$1(view) {
	  var chartEditor = view.$$("chartEditor");
	  var form = chartEditor.queryView("form");
	  var elements = form.elements;
	  view.attachEvent("onCommand", function (action) {
	    if (action.id == "add-chart") {
	      var config = action.config;
	      var values = config && config.config || {};
	      chartEditor.show();
	      view.$handleSelection = function (st, end, a, b) {
	        var focus = webix.UIManager.getFocus();
	        if (chartEditor.queryView(function (view) {
	          return view == focus;
	        })) {
	          if (focus == elements.range || focus == elements["legend.range"]) {
	            var val = focus.getValue();
	            var last = val.lastIndexOf(",");
	            val = last == -1 ? "" : val.substring(0, last + 1);
	            focus.setValue(val + a + ":" + b);
	          } else if (focus.config.range) focus.setValue(a + ":" + b);
	        }
	        return false;
	      };
	      form.clear();
	      view.$$("chartTabs").setValue("common");
	      values = _normalizeConfig(values);
	      values.range = config ? config.data : view.getSelectedRange();
	      chartEditor.viewId = action.viewid ? action.viewid : view.views.add(null, null, "chart", values.range, values);
	      view.callEvent("onUIEditStart", [chartEditor.viewId, "chart"]);
	      updateValign(values.legend.align);
	      updateAlign(values.legend.valign);
	      var formValues = inValues(values);
	      form.setValues(formValues);
	      updateType(formValues.type);
	      if (!_isPie(formValues.type) && values.legend.fromData) updateLegendRange(values.legend.fromData);
	      if (values.xAxis.fromData) updateXaxisRange(values.xAxis.fromData);
	      updateSeries();
	      form.queryView("accordionitem", "all").forEach(function (view) {
	        return view.expand();
	      });
	      elements.range.focus();
	    }
	  });
	  view.attachEvent("onUIEditStart", function (id, type) {
	    if (chartEditor.isVisible() && type != "chart") closeEditor(view);
	  });
	  view.attachEvent("onCommand", function (obj) {
	    if (obj.id == "close-ui-editor" && chartEditor.isVisible()) closeEditor(view);
	  });
	  view.attachEvent("onAction", function (id, values) {
	    if (id == "add-view" && !values.newValue) {
	      if (chartEditor.isVisible() && chartEditor.viewId == values.row) closeEditor(view);
	    }
	  });
	  form.attachEvent("onChange", function (val, oldVal) {
	    var source = this.$eventSource;

	    //upper case ranges
	    if (source === elements.range || source === elements["xAxis.range"] || source === elements["legend.range"]) {
	      var parts = val.split("!");
	      var upper = parts.length == 2 ? parts[0] + "!" + parts[1].toUpperCase() : val.toUpperCase();
	      if (val != upper) {
	        val = upper;
	        setSilentValue(source, upper);
	      }
	    }
	    switch (source) {
	      case elements.type:
	        updateType(val);
	        break;
	      case elements.horizontal:
	        switchRowsCols();
	        break;
	      case elements.range:
	      case elements.dataSeries:
	        if (this.$eventSource == elements.dataSeries) switchRowsCols();
	        if (elements["legend.fromData"].getValue()) handlePieLegend();
	        if (elements["xAxis.fromData"].getValue()) setSilentValue(elements["xAxis.range"], getLeftColumn());
	        updateSeries();
	        break;
	      case elements["xAxis.fromData"]:
	        updateXaxisRange(val);
	        updateSeries(oldVal);
	        break;
	      case elements["legend.fromData"]:
	        updateLegendRange(val);
	        updateSeries(_isPie(elements.type.getValue()) ? oldVal : 0);
	        break;
	      case elements["legend.align"]:
	        updateValign(val);
	        break;
	      case elements["legend.valign"]:
	        updateAlign(val);
	        break;
	      case elements["xAxis.range"]:
	        if (elements["xAxis.fromData"].getValue()) setSilentValue(elements["xAxis.fromData"]);
	        updateRange(val, oldVal);
	        break;
	      case elements["legend.range"]:
	        if (elements["legend.fromData"].getValue()) setSilentValue(elements["legend.fromData"]);
	        updateRange(val, oldVal);
	        break;
	    }
	    var config = form.getValues();
	    view.views.update(chartEditor.viewId, config.range, config);
	  });
	  elements.series.attachEvent("onRangeChange", updateRange);
	  function handlePieLegend() {
	    if (elements["legend.fromData"].getValue()) {
	      var handler = _isPie(elements.type.getValue()) ? getLeftColumn : getTopRow;
	      setSilentValue(elements["legend.range"], handler());
	    }
	  }
	  function updateLegendRange(val) {
	    if (val) {
	      var legendRange = elements["legend.range"].getValue();
	      updateRange("", legendRange);
	    }
	    var handler = _isPie(elements.type.getValue()) ? getLeftColumn : getTopRow;
	    val = val ? handler() : "";
	    setSilentValue(elements["legend.range"], val);
	  }
	  function updateXaxisRange(val) {
	    if (val) {
	      var xAxisRange = elements["xAxis.range"].getValue();
	      updateRange("", xAxisRange);
	    }
	    val = val ? getLeftColumn() : "";
	    setSilentValue(elements["xAxis.range"], val);
	  }
	  function setSilentValue(element, val) {
	    element.blockEvent();
	    element.setValue(val);
	    element.unblockEvent();
	  }
	  function getLeftColumn() {
	    var data = elements.range.getValue();
	    var dataSeries = elements.dataSeries.getValue();
	    var legendRange = elements["legend.range"].getValue();
	    var leftColumn = "";
	    var series = _getSeries(view, data, dataSeries, {
	      legend: legendRange || ""
	    });
	    if (series.length) leftColumn = series[0].range;
	    return leftColumn;
	  }
	  function getTopRow() {
	    var data = _getDataParts(elements.range.getValue());
	    var dir = elements.dataSeries.getValue() == "rows";
	    var xAxisRange = _getDataParts(elements["xAxis.range"].getValue());
	    var topRow = [];
	    data.forEach(function (subdata) {
	      if (xAxisRange.indexOf(subdata) == -1) {
	        var part = range(subdata, view);
	        if (part) {
	          var _range = dir ? toRange(part[0], part[1], part[2], part[1], part[4]) : toRange(part[0], part[1], part[0], part[3], part[4]);
	          if (data.indexOf(_range) == -1) topRow.push(_range);
	        }
	      }
	    });
	    return topRow.join(",");
	  }
	  function updateRange(val, oldVal) {
	    var data = elements.range.getValue();
	    var legend = elements["legend.range"].getValue();
	    var xAxis = elements["xAxis.range"].getValue();
	    var dataSeries = elements.dataSeries.getValue();
	    var series = _getSeries(view, data, dataSeries, {
	      legend: legend,
	      xAxis: xAxis
	    });
	    oldVal = _getDataParts(oldVal);
	    data = _getDataParts(data).filter(function (val) {
	      return oldVal.indexOf(val) == -1;
	    });
	    if (val) {
	      val = _getDataParts(val);
	      val.forEach(function (range) {
	        var exist = series.filter(function (obj) {
	          return obj.range == range;
	        });
	        if (!exist.length) data.push(range);
	      });
	    }
	    setSilentValue(elements.range, data.join(","));
	  }
	  function updateAlign(val) {
	    var align = elements["legend.align"];
	    var list = align.getList();
	    if (val == "middle") {
	      if (list.exists("center")) list.remove("center");
	    } else if (!list.exists("center")) list.add({
	      id: "center",
	      value: labels$1["chart-legend-center"]
	    }, 1);
	  }
	  function updateValign(val) {
	    var align = elements["legend.valign"];
	    var list = align.getList();
	    if (val == "center") {
	      if (list.exists("middle")) list.remove("middle");
	    } else if (!list.exists("middle")) list.add({
	      id: "middle",
	      value: labels$1["chart-legend-middle"]
	    }, 1);
	  }
	  function updateType(val) {
	    handlePieLegend();
	    var isPie = _isPie(val);
	    var isBar = val == "bar";
	    var series = elements.series;
	    var markersVisible = val == "radar" || val == "line" || val == "spline" || val == "scatter";
	    series.hideSubviews("marker", markersVisible);
	    series.hideSubviews("label", markersVisible || isBar || isPie);
	    series.hideSubviews("color", !isPie);
	    if (val == "area" || isBar) elements.stacked.show();else hideField(elements.stacked);
	    if (isBar) elements.horizontal.show();else hideField(elements.horizontal);
	    if (val == "radar") elements["scale.circle"].show();else hideField(elements["scale.circle"]);
	    if (isPie) {
	      hideBatch("axis");
	      hideBatch("pie", true);
	    } else {
	      hideBatch("axis", true);
	      hideBatch("pie");
	    }
	    if (isPie || val == "radar") hideBatch("axisTitle");else hideBatch("axisTitle", true);
	    switchRowsCols();
	  }
	  function updateSeries(oldXaxis) {
	    var data = elements.range.getValue();
	    var series = elements.series.getValue();
	    var legend = elements["legend.range"].getValue();
	    var xAxis = elements["xAxis.range"].getValue();
	    var dataSeries = elements.dataSeries.getValue();
	    series = _getSeries(view, data, dataSeries, {
	      series: series,
	      legend: legend,
	      xAxis: xAxis
	    }, oldXaxis);
	    elements.series.setValue(series);
	  }
	  function switchRowsCols() {
	    var dir = elements.dataSeries.getValue() == "rows";
	    var horizontal = elements.horizontal.getValue();
	    var pie = _isPie(elements.type.getValue());
	    if (!pie && dir || !dir && pie) {
	      elements["legend.fromData"].define("label", labels$1["chart-col-legend"]);
	      elements["xAxis.fromData"].define("label", labels$1["chart-row-" + (horizontal ? "yAxis" : "xAxis")]);
	    } else {
	      elements["legend.fromData"].define("label", labels$1["chart-row-legend"]);
	      elements["xAxis.fromData"].define("label", labels$1["chart-col-" + (horizontal ? "yAxis" : "xAxis")]);
	    }
	    elements["legend.fromData"].refresh();
	    elements["xAxis.fromData"].refresh();
	  }
	  function hideField(field) {
	    if (field.setValue) setSilentValue(field);
	    field.hide();
	  }
	  function hideBatch(batch, visible) {
	    form.queryView({
	      batch: batch
	    }, "all").forEach(function (field) {
	      if (visible) field.show();else hideField(field);
	    });
	  }
	  function inValues(values) {
	    [{
	      value: "H",
	      name: "horizontal"
	    }, {
	      value: "stacked"
	    }, {
	      value: "3D"
	    }].forEach(function (property) {
	      if (values.type.indexOf(property.value) != -1) {
	        values[property.name || property.value] = 1;
	        values.type = values.type.replace(property.value, "").toLowerCase();
	      }
	    });
	    return values;
	  }
	}
	function closeEditor(view) {
	  var chartEditor = view.$$("chartEditor");
	  view.callEvent("onUIEditStop", [chartEditor.viewId, "chart"]);
	  chartEditor.viewId = null;
	  view.$handleSelection = null;
	  chartEditor.hide();
	}
	function addRichselect(name, label, data) {
	  return {
	    view: "richselect",
	    name: name,
	    label: labels$1[label],
	    suggest: {
	      view: "ssheet-form-suggest",
	      data: data
	    }
	  };
	}
	function getTypes(sparkline) {
	  var types = [{
	    id: "line",
	    value: labels$1["line-chart"]
	  }, {
	    id: "spline",
	    value: labels$1["spline-chart"]
	  }, {
	    id: "splineArea",
	    value: labels$1["splinearea-chart"]
	  }, {
	    id: "area",
	    value: labels$1["area-chart"]
	  }, {
	    id: "bar",
	    value: labels$1["bar-chart"]
	  }, {
	    id: "radar",
	    value: labels$1["radar-chart"]
	  }, {
	    id: "pie",
	    value: labels$1["pie-chart"]
	  }, {
	    id: "donut",
	    value: labels$1["donut-chart"]
	  }];
	  if (!sparkline) types.push({
	    id: "scatter",
	    value: labels$1["scatter-chart"]
	  });
	  return types;
	}
	function getLegendAlign() {
	  return [{
	    id: "left",
	    value: labels$1["chart-legend-left"]
	  }, {
	    id: "center",
	    value: labels$1["chart-legend-center"]
	  }, {
	    id: "right",
	    value: labels$1["chart-legend-right"]
	  }];
	}
	function getLegendValign() {
	  return [{
	    id: "top",
	    value: labels$1["chart-legend-top"]
	  }, {
	    id: "middle",
	    value: labels$1["chart-legend-middle"]
	  }, {
	    id: "bottom",
	    value: labels$1["chart-legend-bottom"]
	  }];
	}

	var action$b = "add-sparkline";
	var labels = webix.i18n.spreadsheet.labels;
	var DialogBox$b = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      this.cell = this.view.getSelectedId();
	      if (!this.cell) return false;
	      var els = form.elements;
	      this.view.$handleSelection = function (st, end, a, b) {
	        els.range.setValue(a + ":" + b);
	        return false;
	      };
	      els.range.setValue("");

	      //sync state of dialog to data with  the selected cell
	      var value = this.view.getCellValue(this.cell.row, this.cell.column);
	      var data = parseChart(value);
	      if (data) {
	        form.blockEvent();
	        els.type.setValue(data.type);
	        els.range.setValue(data.range);
	        if (data.color) {
	          els.color_def.setValue(data.color);
	          els.color_pos.setValue(data.color);
	        }
	        if (data.negativeColor) els.color_neg.setValue(data.negativeColor);
	        if (data.horizontal) els.horizontal.setValue(1);
	        form.unblockEvent();
	        this.renderPreview();
	      }
	      els.range.focus();
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      return {
	        view: "ssheet-dialog",
	        head: labels["sparkline-title"],
	        move: true,
	        position: "center",
	        body: {
	          view: "form",
	          visibleBatch: 1,
	          on: {
	            onChange: function () {
	              return _this.renderPreview();
	            }
	          },
	          elements: [{
	            view: "richselect",
	            name: "type",
	            label: labels["sparkline-type"],
	            value: "line",
	            labelPosition: "left",
	            suggest: {
	              view: "ssheet-form-suggest",
	              data: getTypes(true)
	            },
	            on: {
	              onChange: function (type) {
	                var form = this.getFormView();
	                switch (type) {
	                  case "pie":
	                  case "donut":
	                    form.showBatch(3);
	                    break;
	                  case "bar":
	                    form.showBatch(2);
	                    break;
	                  default:
	                    form.showBatch(1);
	                }
	              }
	            }
	          }, {
	            view: "text",
	            label: labels["sparkline-range"],
	            name: "range"
	          }, {
	            view: "ssheet-colorpicker",
	            label: labels["sparkline-color"],
	            name: "color_def",
	            id: "add_sparkline_color",
	            value: "#6666FF",
	            batch: "1"
	          }, {
	            view: "ssheet-colorpicker",
	            label: labels["sparkline-positive"],
	            name: "color_pos",
	            value: "#6666FF",
	            batch: "2"
	          }, {
	            view: "ssheet-colorpicker",
	            label: labels["sparkline-negative"],
	            name: "color_neg",
	            value: "#FF6666",
	            batch: "2"
	          }, {
	            view: "checkbox",
	            label: labels["horizontal-chart"],
	            name: "horizontal",
	            batch: "2"
	          }, {
	            view: "formlate",
	            name: "preview",
	            borderless: true,
	            css: "webix_ssheet_preview",
	            height: 50
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "checkRange",
	    value: function checkRange(text) {
	      if (text && range(text, this.view)) return true;
	      this.view.alert({
	        text: labels["error-range"]
	      });
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var form = this.$dialog.getBody();
	      var data = form.getValues();
	      data.range = data.range.toUpperCase();
	      if (data.range && this.checkRange(data.range)) {
	        var config = this.sparkConfig(data);
	        this.view.addSparkline(this.cell.row, this.cell.column, config);
	        this.close();
	      }
	    }
	  }, {
	    key: "renderPreview",
	    value: function renderPreview() {
	      var form = this.$dialog.getBody();
	      var data = form.getValues();
	      data.range = data.range.toUpperCase();
	      if (data.range && this.checkRange(data.range)) {
	        var pos = range(data.range, this.view);
	        var values = this.view._mPage.getRange(pos[0] - 1, pos[1] - 1, pos[2] - 1, pos[3] - 1);
	        var config = this.sparkConfig(data, true);
	        for (var i = 0; i < values.length; i++) values[i] = values[i] || 0;
	        form.elements.preview.setValue(webix.Sparklines.getTemplate(config)(values, {
	          width: 200,
	          height: 40
	        }));
	      } else form.elements.preview.setValue("");
	    }
	  }, {
	    key: "sparkConfig",
	    value: function sparkConfig(config, preview) {
	      config = webix.copy(config);
	      var form = this.$dialog.getBody();
	      if (config.type === "bar") {
	        config.color = config.color_pos;
	        config.negativeColor = config.color_neg;
	      } else if (form.elements.color_def.isVisible()) config.color = config.color_def;else if (config.type == "donut" && preview) webix.extend(config, {
	        type: "pie",
	        donut: 1
	      }, true);
	      return config;
	    }
	  }]);
	}(Dialog);

	var asw = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$b,
		action: action$b
	});

	var action$a = "add-range";
	var DialogBox$a = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box) {
	      var _this = this;
	      var form = box.$$("form");
	      form.clear();
	      form.clearValidation();
	      var elements = form.elements;
	      elements.name.focus();
	      var selectedCell = this.view.getSelectedRange();
	      if (selectedCell) selectedCell = escapeSheet(this.view.getActiveSheet()) + "!" + selectedCell;
	      form.setValues({
	        range: selectedCell,
	        scope: "$global"
	      });
	      this._updateData();
	      this.view._rangeDialog = true;
	      this.view.$handleSelection = function (st, end, a, b) {
	        form.elements.range.setValue(toSheetRange(a, b, _this.view.getActiveSheet()));
	        return false;
	      };
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	      this.view._rangeDialog = null;
	    }
	  }, {
	    key: "saveClick",
	    value: function saveClick() {
	      var view = this.view;
	      var form = this.$dialog.$$("form");
	      var data = form.getValues();
	      if (data.range) {
	        var rangeParts = data.range.split("!");
	        if (rangeParts.length == 1) rangeParts.unshift(escapeSheet(view.getActiveSheet()));
	        data.range = rangeParts[0] + "!" + rangeParts[1].toUpperCase();
	      }
	      data.name = data.name.toUpperCase();
	      form.setValues(data);
	      if (form.validate()) {
	        var table = this.$dialog.$$("table");
	        if (data.id) {
	          var oldData = table.getItem(data.id);
	          view.ranges.remove(oldData.name, this._getScope(oldData));
	          table.updateItem(data.id, data);
	        } else table.add(data);
	        view.ranges.add(data.name, data.range, this._getScope(data));
	        view.refresh();
	        table.unselect();
	        form.setValues({
	          scope: "$global"
	        });
	      }
	    }
	  }, {
	    key: "_getScope",
	    value: function _getScope(data) {
	      return data.scope == "$global" ? true : data.scope;
	    }
	  }, {
	    key: "removeRange",
	    value: function removeRange(id) {
	      var _this2 = this;
	      var view = this.view;
	      view.confirm({
	        text: webix.i18n.spreadsheet.labels["range-remove-confirm"]
	      }).then(function () {
	        var table = _this2.$dialog.$$("table");
	        var item = table.getItem(id);
	        view.ranges.remove(item.name, _this2._getScope(item));
	        view.refresh();
	        table.remove(id);
	      });
	    }
	  }, {
	    key: "editRange",
	    value: function editRange(id) {
	      var form = this.$dialog.$$("form");
	      var table = this.$dialog.$$("table");
	      form.clearValidation();
	      var item = webix.copy(table.getItem(id));
	      form.setValues(item);
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this3 = this;
	      this.view.attachEvent("onSheetRename", function (name, newName) {
	        return _this3._updateData(name, newName);
	      });
	      this.view.attachEvent("onSheetRemove", function (name) {
	        return _this3._updateData(name);
	      });
	      this.view.attachEvent("onSheetAdd", function () {
	        return _this3._updateData();
	      });
	      var locale = webix.i18n.spreadsheet.labels;
	      var theform = {
	        padding: 0,
	        type: "clean",
	        cols: [{
	          view: "ssheet-dialog-table",
	          id: "table",
	          borderless: true,
	          columns: [{
	            id: "name",
	            header: locale["range-name"],
	            width: 120
	          }, {
	            id: "range",
	            header: locale["range-cells"],
	            width: 150
	          }, {
	            id: "scope",
	            header: locale["range-scope"],
	            width: 95,
	            template: function (obj) {
	              return obj.scope == "$global" ? locale["range-global"] : obj.scope;
	            }
	          }, {
	            template: "<span class='webix_icon ssheet_ranges_edit wxi-pencil'></span>",
	            width: 44
	          }, {
	            template: "<span class='webix_icon ssheet_ranges_edit wxi-trash'></span>",
	            width: 44
	          }],
	          autowidth: true,
	          height: 200,
	          select: "row",
	          on: {
	            onBeforeSelect: function (id) {
	              return id == _this3.$dialog.$$("form").getValues().id;
	            }
	          },
	          onClick: {
	            "wxi-trash": function (ev, id) {
	              return _this3.removeRange(id);
	            },
	            "wxi-pencil": function (ev, id) {
	              return _this3.editRange(id);
	            }
	          }
	        }, {
	          width: 270,
	          view: "form",
	          id: "form",
	          rules: {
	            name: function (_, obj) {
	              var notUnique = _this3.$dialog.$$("table").find(function (item) {
	                return item.name == obj.name && item.scope == obj.scope && item.id != obj.id;
	              }, true);
	              return !notUnique && !getLastCharIndex(obj.name);
	            },
	            range: isRange,
	            scope: webix.rules.isNotEmpty
	          },
	          elementsConfig: {
	            labelWidth: 95
	          },
	          elements: [{
	            view: "text",
	            name: "name",
	            label: locale["range-name"]
	          }, {
	            view: "text",
	            name: "range",
	            id: "range",
	            label: locale["range-cells"],
	            on: {
	              onFocus: function () {
	                return _this3.view.showCell(_this3.$dialog.$$("range").getValue(), true);
	              }
	            }
	          }, {
	            view: "richselect",
	            name: "scope",
	            id: "sheets",
	            label: locale["range-scope"],
	            suggest: {
	              view: "ssheet-form-suggest",
	              body: {
	                data: []
	              }
	            }
	          }]
	        }]
	      };
	      return {
	        view: "ssheet-dialog",
	        move: true,
	        head: webix.i18n.spreadsheet.labels["range-title"],
	        autoheight: true,
	        width: 800,
	        position: "center",
	        body: theform,
	        on: {
	          onSaveClick: function () {
	            return _this3.saveClick();
	          },
	          onCancelClick: function () {
	            return _this3.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "_updateData",
	    value: function _updateData(name, newName) {
	      if (!this.$dialog.isVisible()) return;
	      var ranges = this.view._mData.getRanges();
	      var locale = webix.i18n.spreadsheet.labels;
	      var table = this.$dialog.$$("table");
	      var form = this.$dialog.$$("form");
	      var editRange = table.getItem(form.getValues().id);
	      if (editRange) {
	        var rangeName = editRange.name;
	        if (name == editRange.scope) rangeName = newName ? newName + "!" + rangeName : null;else rangeName = editRange.scope + "!" + rangeName;
	        editRange = rangeName ? ranges.get(rangeName) : null;
	      }
	      table.clearAll();
	      var allRanges = ranges.serialize();
	      var data = [];
	      var selectedId;
	      for (var i = 0; i < allRanges.length; i++) {
	        var id = i + 1;
	        var _allRanges$i = _slicedToArray(allRanges[i], 2),
	          _name = _allRanges$i[0],
	          range = _allRanges$i[1];
	        if (editRange && ranges.get(_name) == editRange) selectedId = id;
	        var nameParts = _name.split("!");
	        data.push({
	          scope: nameParts.length == 1 ? "$global" : nameParts[0],
	          name: nameParts[1] || nameParts[0],
	          range: range,
	          id: id
	        });
	      }
	      table.parse(data);
	      form.setValues({
	        id: selectedId
	      }, true);
	      if (selectedId) table.select(selectedId);
	      var select = this.$dialog.$$("sheets");
	      var selectList = select.getList();
	      selectList.clearAll();
	      var sheets = [{
	        id: "$global",
	        value: locale["range-global"]
	      }];
	      this.view._sheets.forEach(function (sheet) {
	        sheets.push({
	          id: sheet.name,
	          value: sheet.name
	        });
	      });
	      selectList.parse(sheets);
	      if (name) {
	        var _range = this.$dialog.$$("range");
	        var rangeVal = _range.getValue();

	        //remove sheet
	        newName = newName || this.view.getActiveSheet();
	        if (rangeVal.indexOf(escapeSheet(name) + "!") == 0) _range.setValue(escapeSheet(newName) + "!" + rangeVal.split("!")[1]);
	        if (select.getValue() == name) select.setValue(newName);
	      }
	    }
	  }]);
	}(Dialog);

	var rgs = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$a,
		action: action$a
	});

	var action$9 = "add-dropdown";
	var DialogBox$9 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show() {
	      var form = this.$dialog.$$("form");
	      this.cell = this.view.getSelectedId(true);
	      if (!this.cell.length) return false;
	      form.clear();

	      //restore previosly selected range
	      var value = this.view.getCellEditor(this.cell[0].row, this.cell[0].column);
	      if (value) form.setValues({
	        range: value.options,
	        empty: value.empty
	      });
	      this.view.$handleSelection = function (st, end, a, b) {
	        form.elements.range.setValue(a + ":" + b);
	        return false;
	      };
	      form.elements.range.focus();
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      return {
	        view: "ssheet-dialog",
	        position: "center",
	        head: webix.i18n.spreadsheet.labels["dropdown-title"],
	        move: true,
	        body: {
	          padding: 0,
	          view: "form",
	          id: "form",
	          elementsConfig: {
	            labelWidth: 130
	          },
	          rows: [{
	            view: "text",
	            label: webix.i18n.spreadsheet.labels["dropdown-range"],
	            name: "range"
	          }, {
	            view: "checkbox",
	            label: webix.i18n.spreadsheet.labels["dropdown-empty-option"],
	            name: "empty"
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var values = this.$dialog.$$("form").getValues();
	      if (!range(values.range, this.view)) this.view.alert({
	        text: webix.i18n.spreadsheet.labels["error-range"],
	        type: "alert-error"
	      });else {
	        group.set(function () {
	          for (var i = 0; i < this.cell.length; i++) this.view.setCellEditor(this.cell[i].row, this.cell[i].column, {
	            editor: "ss_richselect",
	            options: values.range,
	            empty: values.empty
	          });
	        }, this);
	        this.close();
	      }
	    }
	  }]);
	}(Dialog);

	var dpd$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$9,
		action: action$9
	});

	var Ranges = /*#__PURE__*/function () {
	  function Ranges(view) {
	    _classCallCheck(this, Ranges);
	    this._master = view;
	  }
	  return _createClass(Ranges, [{
	    key: "clear",
	    value: function clear(scope) {
	      var _this = this;
	      var sheet = typeof scope == "string" ? scope : this._master.getActiveSheet();
	      var ranges = this.serialize(sheet);
	      ranges.forEach(function (range) {
	        if (scope === true) {
	          if (range[2]) _this.remove(range[0], scope);
	          return;
	        } else _this.remove(range[0], scope);
	      });
	    }
	  }, {
	    key: "_normalizeName",
	    value: function _normalizeName(name, scope) {
	      if (scope !== true) name = (scope || this._master.getActiveSheet()) + "!" + name;
	      return name;
	    }
	  }, {
	    key: "_normalizeRange",
	    value: function _normalizeRange(range, scope) {
	      var rangeParts = range.split("!");
	      if (rangeParts.length == 1) range = (typeof scope == "string" ? scope : this._master.getActiveSheet()) + "!" + range;
	      return range;
	    }
	  }, {
	    key: "add",
	    value: function add(name, range, scope) {
	      var view = this._master;
	      view.callEvent("onAfterRangeSet", [name, range, scope]);
	      name = this._normalizeName(name, scope);
	      view._mData.getRanges().add(name, this._normalizeRange(range, scope));
	      view.callEvent("onMathRefresh", []);
	    }
	  }, {
	    key: "getCode",
	    value: function getCode(name, scope) {
	      name = this._normalizeName(name, scope);
	      var range = this._master._mData.getRanges().get(name);
	      if (range) return range.source;
	    }
	  }, {
	    key: "remove",
	    value: function remove(name, scope) {
	      name = this._normalizeName(name, scope);
	      this._master._mData.getRanges().remove(name);
	      this._master.callEvent("onMathRefresh", []);
	    }
	  }, {
	    key: "parse",
	    value: function parse(data, sheet) {
	      if (!data) return;
	      for (var i = 0; i < data.length; i++) {
	        var ranges = this._master._mData.getRanges();
	        var _data$i = _slicedToArray(data[i], 3),
	          name = _data$i[0],
	          range = _data$i[1],
	          globalRange = _data$i[2];
	        name = this._normalizeName(name, globalRange || sheet);
	        if (!ranges.get(name)) ranges.add(name, this._normalizeRange(range, sheet));
	      }
	    }
	  }, {
	    key: "serialize",
	    value: function serialize(sheet) {
	      sheet = sheet || this._master.getActiveSheet();
	      var allRanges = this._master._mData.getRanges().serialize();
	      var out = [];
	      for (var i = 0; i < allRanges.length; i++) {
	        var _arr = allRanges[i];
	        var nameParts = _arr[0].split("!");
	        var globalRange = nameParts.length == 1;
	        if (globalRange || nameParts[0] == sheet) out.push([nameParts[globalRange ? 0 : 1], _arr[1], globalRange]);
	      }
	      return out;
	    }
	  }, {
	    key: "getRanges",
	    value: function getRanges(sheet) {
	      var data = this.serialize(sheet);
	      return data.map(function (arr) {
	        return {
	          name: arr[0],
	          range: arr[1],
	          global: arr[2]
	        };
	      });
	    }
	  }]);
	}();
	function init$k(view) {
	  view.ranges = new Ranges(view);
	  view.attachEvent("onDataSerialize", function (data) {
	    data.ranges = view.ranges.serialize();
	  });
	}
	function nullFilter() {
	  var locale = webix.i18n.spreadsheet.labels;
	  return {
	    id: "$empty",
	    value: "",
	    $value: "<span class='webix_ssheet_empty'>" + locale["dropdown-empty"] + "</span>"
	  };
	}
	function getRange(view, r1, c1, r2, c2, spans) {
	  var out = [];
	  var activeSheet = view._mPage === this;
	  for (var i = r1 - 1; i <= r2 - 1; i++) {
	    for (var j = c1 - 1; j <= c2 - 1; j++) {
	      var inSpan = void 0;
	      for (var s = 0; s < spans.length; s++) {
	        var span = spans[s];
	        var row = i + 1;
	        var col = j + 1;
	        if (!(row == span[0] && col == span[1]) && row >= span[0] && row < span[0] + span[3] && col >= span[1] && col < span[1] + span[2]) {
	          inSpan = true;
	          break;
	        }
	      }
	      if (inSpan) continue;
	      var obj = this.getCell(i, j);
	      var cell = void 0;
	      if (!obj) cell = {
	        value: ""
	      };else cell = webix.copy(obj);
	      if (activeSheet) cell.$value = cell_template(view, {
	        id: i + 1
	      }, null, null, {
	        id: j + 1
	      }, true);else delete cell.format;
	      cell.id = cell.value;
	      out.push(cell);
	    }
	  }
	  return out;
	}
	function rangeOptions(view, text, extra) {
	  var values = [];
	  if (typeof text == "string") {
	    var pos = range(text, view);
	    if (pos) {
	      var page = view._mPage;
	      if (pos[4]) page = view._mData.getPage(pos[4]);
	      if (page) {
	        var spans = (page == view._mPage ? serialize$b(view, {}) : find(view._sheets, function (sheet) {
	          return sheet.name == pos[4];
	        }).content).spans;
	        values = getRange.apply(page, [view, pos[0], pos[1], pos[2], pos[3], spans]);
	      }
	    }
	  } else if (webix.isArray(text)) for (var i = 0; i < text.length; i++) {
	    var v = text[i] || text[i] === 0 ? text[i] : "";
	    v = _typeof(v) === "object" ? webix.copy(v) : {
	      id: v,
	      value: v
	    };
	    values.push(v);
	  }
	  var test = {};
	  for (var _i = values.length - 1; _i >= 0; _i--) {
	    var _boolean = typeof values[_i].value === "boolean";
	    if (_boolean) values[_i].value *= 1;
	    if (_boolean || values[_i].id === 0) values[_i].id = String(values[_i].value);
	    if (extra && extra.unique) {
	      if (test[values[_i].id]) values.splice(_i, 1);else test[values[_i].id] = true;
	    }
	  }
	  if (extra) {
	    var empty = false;
	    for (var _i2 = values.length - 1; _i2 >= 0; _i2--) {
	      var value = values[_i2].value;
	      if (!value && value !== 0) {
	        values.splice(_i2, 1);
	        empty = true;
	        continue;
	      }
	      values[_i2].value = String(value);
	    }
	    if (extra.order) values.sort(function (objA, objB) {
	      var sorters = view.$$("cells").data.sorting.as;
	      var a = objA.value;
	      var b = objB.value;
	      return webix.rules.isNumber(a) && webix.rules.isNumber(b) ? sorters["int"](a, b) : sorters.string(a, b);
	    });
	    if (empty && extra.filter) values.unshift(nullFilter());
	    if (extra.empty) values.unshift({
	      id: "$empty",
	      $empty: true,
	      value: ""
	    });
	  }
	  return values;
	}

	var m16b = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$k,
		rangeOptions: rangeOptions
	});

	function init$j(view) {
	  var table = view._table;
	  view.attachEvent("onReset", function () {
	    return reset$4(view);
	  });
	  reset$4(view);
	  table.on_click.ssheet_filter_sign = function (e, id) {
	    var filter = table._ssFilters[id.row][id.column];
	    var mode = filter.mode || getFilterMode(view, id.row, id.column);
	    var options = [];
	    if (filter.options) {
	      if (typeof filter.options == "string") options = rangeOptions(view, filter.options, {
	        unique: true,
	        order: true,
	        filter: true
	      });else if (webix.isArray(filter.options)) options = rangeOptions(view, filter.options, {
	        filter: true
	      });
	    }
	    view.callEvent("onCommand", [{
	      id: "start-filter",
	      cell: id,
	      mode: mode,
	      options: options,
	      filter: filter
	    }]);
	  };
	  table.on_dblclick.ssheet_filter_sign = function () {
	    return false;
	  };
	  view.attachEvent("onCommand", function (cm) {
	    if (cm.id === "create-filter") toggleFilters(view);
	  });
	  var refilter = false;
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    if (type == "filter") {
	      value = _typeof(value) == "object" ? value : null;
	      view.setCellFilter(row, column, value);
	      refilter = true;
	    } else if (type == "apply-filter") {
	      var filter = view.getCellFilter(row, column);
	      filter.value = value;
	      delete filter.handler;
	      if (value && value.condition) {
	        var mode = filter.mode || getFilterMode(view, row, column);
	        filter.handler = getFilterFunction(mode, filter.value);
	      }
	      refilter = true;

	      // update css
	      var add = value && isValueActive(value);
	      table[add ? "addCellCss" : "removeCellCss"](row, column, "ss_filter_active");
	      setSpanCss(view, row, column, "ss_filter_active", add);
	    }
	  });
	  view.attachEvent("onAfterUndo", function () {
	    if (refilter) {
	      view.filterSpreadSheet();
	      refilter = false;
	    }
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "filter") {
	      if (p.page == view.getActiveSheet()) {
	        setSpanCss(view, p.row, p.column, "ss_filter", p.newValue);
	        setSpanCss(view, p.row, p.column, "ss_filter_active", p.newValue && p.newValue.value && isValueActive(p.newValue.value));
	        markBarFilter(view);
	      }
	    } else if (action == "before-grid-change") updatePosition$2(view, p.name, p.inc, p.data, p.start);
	  });
	}
	function reset$4(view) {
	  view._table._ssFilters = {};
	  markBarFilter(view);
	}
	function getFilters(table) {
	  var filters = table._ssFilters;
	  var all = [];
	  for (var row in filters) for (var column in filters[row]) all.push(filters[row][column]);
	  return all;
	}
	function serialize$7(view, data) {
	  var filters = getFilters(view._table);
	  var result = data.filters = [];
	  for (var i = 0; i < filters.length; i++) {
	    var _filters$i = filters[i],
	      row = _filters$i.row,
	      column = _filters$i.column,
	      options = _filters$i.options,
	      mode = _filters$i.mode,
	      value = _filters$i.value,
	      lastRow = _filters$i.lastRow;
	    value = value && webix.copy(value);
	    result.push([row, column, {
	      value: value,
	      options: options,
	      mode: mode,
	      lastRow: lastRow
	    }]);
	  }
	}
	function load$6(view, data) {
	  var filters = data.filters;
	  if (filters) {
	    for (var i = 0; i < filters.length; i++) {
	      view.setCellFilter(filters[i][0], filters[i][1], filters[i][2] || {
	        options: ""
	      });
	    }
	    view.filterSpreadSheet();
	  }
	}
	function clearFilters(view, range, page) {
	  var refilter = false;
	  eachRange(range, view, function (view, cell) {
	    if (view.getCellFilter(cell.row, cell.column, page)) {
	      if (!page || page == view.getActiveSheet()) refilter = true;
	      view.setCellFilter(cell.row, cell.column, null, page);
	    }
	  });
	  if (refilter) view.filterSpreadSheet();
	}
	function isFilter(view, row, column) {
	  var filters = view._table._ssFilters;
	  return filters[row] && !!filters[row][column];
	}
	function calibrateRange(view, row, column, range, lastRow, sheet) {
	  if (!range) range = {
	    end: {
	      row: row
	    }
	  };
	  if (range.end) {
	    var endRow = range.end.row;
	    range = getFilterRange(view, row, column, endRow, lastRow, sheet);
	  }
	  return range;
	}
	function isValueActive(value) {
	  return !!(value.includes || value.condition && value.condition.filter);
	}
	function isFilterExists(view) {
	  var filters = view._table._ssFilters;
	  for (var row in filters) for (var column in filters[row]) if (filters[row][column]) return true;
	  return false;
	}
	function markBarFilter(view) {
	  var value = isFilterExists(view);
	  view.callEvent("onCommand", [{
	    id: "toolbar-update",
	    name: "create-filter",
	    value: value
	  }]);
	}
	function getFilterRange(view, row, column, endRow, lastRow, sheet) {
	  var span = getSpan(view, row, column, sheet);
	  if (row === endRow || span && row == endRow - span[3] + 1) {
	    for (endRow = row; endRow < view.config.rowCount; endRow++) {
	      var r = endRow + 1;
	      var _span = getSpan(view, r, column, sheet);
	      if (_span && _span[0] != r) continue;
	      var value = view.getCellValue(r, column, false, sheet ? sheet.name : null);
	      if (!value && value !== 0) break;
	    }
	  }
	  if (lastRow) return endRow;
	  return toRange(row + 1, column, endRow, column);
	}
	function getSpan(view, row, column, sheet) {
	  if (!sheet) return view._table.getSpan(row, column);else if (sheet.content.spans) return find(sheet.content.spans, function (r, c, cc, rc) {
	    return row >= r && row < r + rc && column >= c && column < c + cc;
	  });
	}
	function getFilterMode(view, row, column) {
	  for (var i = row + 1; i < view.config.rowCount; i++) {
	    var value = view.getCellValue(i, column);
	    if (value || value === 0) {
	      var type = getType(view, i, column);
	      return type == "number" || type == "date" ? type : "text";
	    } else if (value !== "") break;
	  }
	  return "text";
	}
	function toggleFilters(view) {
	  var range = view._table.getSelectArea();
	  if (isFilterExists(view)) {
	    group.set(function () {
	      return view.removeFilters();
	    });
	    if (range) view._table.addSelectArea(range.start, range.end);
	  } else if (range) group.set(function () {
	    var row = range.start.row;
	    for (var i = range.start.column; i <= range.end.column; i++) view.setCellFilter(row, i, {
	      options: range,
	      lastRow: calibrateRange(view, row, i, range, true)
	    });
	  });
	  markBarFilter(view);
	}
	function updatePosition$2(view, name, inc, data, start) {
	  var filters = data.filters;
	  if (inc) {
	    for (var i = filters.length - 1; i >= 0; i--) {
	      var _filters$i2 = _slicedToArray(filters[i], 3),
	        row = _filters$i2[0],
	        column = _filters$i2[1],
	        filter = _filters$i2[2];
	      if (name == "row" && row >= start.row || name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc) {
	            //delete filter mark if row was deleted
	            filters.splice(i, 1);
	            continue;
	          } else
	            //update mark position if upper row was deleted
	            filters[i][0] = row * 1 + inc;
	          if (filter.lastRow) filter.lastRow += inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            filters.splice(i, 1);
	            continue;
	          } else filters[i][1] = column * 1 + inc;
	        }
	        filter.options = changeRange(filter.options, name, inc, start);
	      }
	    }
	  }
	}
	function pasteFilter(view, extra, row, col, cutted, translate) {
	  var filter = extra.filter;
	  filter.options = changeRange(filter.options, "row", translate.row, {
	    column: extra.col,
	    row: extra.row
	  });
	  filter.options = changeRange(filter.options, "column", translate.column, {
	    column: extra.col,
	    row: extra.row
	  });
	  if (filter.lastRow) filter.lastRow += translate.row;
	  delete filter.value;
	  delete filter.handler;
	  view.setCellFilter(row, col, filter);
	}
	function getSingleOption(mode, type) {
	  var c = conditions[mode];
	  for (var i = 0; i < c.length; i++) if (c[i].id == type) return c[i];
	}
	function getConditions(name) {
	  return webix.copy(conditions[name]);
	}
	function getFilterFunction(mode, value) {
	  var includes = value.includes,
	    condition = value.condition;
	  var opt = getSingleOption(mode, condition.type);
	  var handler = opt ? opt.handler : function () {
	    return true;
	  };
	  if (includes) {
	    for (var i = 0; i < includes.length; i++) includes[i] = String(includes[i]);
	  }
	  return function (value) {
	    if (includes) {
	      return includes.indexOf(value) !== -1;
	    } else {
	      return condition.filter === "" || handler(value, condition.filter);
	    }
	  };
	}

	var m21 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		calibrateRange: calibrateRange,
		clearFilters: clearFilters,
		getConditions: getConditions,
		getFilterFunction: getFilterFunction,
		getFilterMode: getFilterMode,
		getFilters: getFilters,
		getSingleOption: getSingleOption,
		init: init$j,
		isFilter: isFilter,
		isValueActive: isValueActive,
		load: load$6,
		pasteFilter: pasteFilter,
		serialize: serialize$7
	});

	var action$8 = "start-filter";
	var DialogBox$8 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "open",
	    value: function open(action) {
	      var _this = this;
	      this.cell = action.cell;
	      this.$mode = action.mode;
	      this.$filter = action.filter;

	      // cell not provided
	      if (!this.cell ||
	      // cell is locked
	      this.view.isCellLocked(this.cell.row, this.cell.column)) {
	        return false;
	      }
	      if (!this.$dialog) {
	        this.$dialog = webix.ui(this.$init());
	        this.view._destroy_with_me.push(this.$dialog);
	        this.$dialog.attachEvent("onHide", function () {
	          return _this.$hide();
	        });
	        var table = this.view.$$("cells");
	        table.attachEvent("onScrollY", function () {
	          return _this.syncScroll();
	        });
	        table.attachEvent("onScrollX", function () {
	          return _this.syncScroll();
	        });
	      }
	      if (this.$show(this.$filter.value, action.options) === false) return this.close();
	      this.$dialog.show(this._getTargetNode());
	    }
	  }, {
	    key: "_getTargetNode",
	    value: function _getTargetNode() {
	      var table = this.view.$$("cells");
	      var span = table.getSpan(this.cell.row, this.cell.column);
	      return span ? table.getSpanNode(this.cell) : table.getItemNode(this.cell);
	    }
	  }, {
	    key: "$show",
	    value: function $show(value, options) {
	      var list = this.getList();
	      var filter = this.getFilter();
	      if (filter.config.mode !== this.$mode) {
	        filter.define("conditions", this.getConditions(this.$mode));
	        filter.define("mode", this.$mode);
	      }

	      // if the filter mode for the current column has been changed - reset the value
	      var type = value && value.conditions && value.conditions.type;
	      if (type && !getSingleOption(this.$mode, type)) value = "";
	      list.clearAll();
	      list.data.importData(options);

	      // filter data has been changed - reset value
	      filter.config.value = "";
	      filter.setValue(webix.copy(value || {}));
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this2 = this;
	      var locale = webix.i18n.spreadsheet.labels;
	      return {
	        view: "popup",
	        css: "ssheet_filter",
	        padding: 7,
	        relative: "right",
	        body: {
	          margin: 4,
	          rows: [{
	            view: "filter",
	            field: "value",
	            mode: "text",
	            conditions: this.getConditions("text"),
	            inputs: ["text", {
	              view: "ssheet-datepicker",
	              timepicker: true,
	              batch: "datepicker",
	              on: {
	                onChange: function () {
	                  return _this2.getFilter().applyFilter();
	                }
	              }
	            }, {
	              view: "ssheet-daterangepicker",
	              timepicker: true,
	              batch: "daterangepicker",
	              on: {
	                onChange: function () {
	                  return _this2.getFilter().applyFilter();
	                }
	              }
	            }],
	            template: function (obj) {
	              return obj.$value || obj.value;
	            }
	          }, {
	            cols: [{}, {
	              view: "button",
	              label: locale["cancel"],
	              autowidth: true,
	              css: "webix_transparent",
	              on: {
	                "onItemClick": function () {
	                  return _this2.close();
	                }
	              }
	            }, {
	              view: "button",
	              label: locale["apply"],
	              autowidth: true,
	              css: "webix_secondary",
	              on: {
	                "onItemClick": function () {
	                  return _this2.applyFilter();
	                }
	              }
	            }]
	          }]
	        }
	      };
	    }
	  }, {
	    key: "applyFilter",
	    value: function applyFilter() {
	      var filter = this.getFilter();
	      var oldValue = this.$filter.value;
	      var value = this.$filter.value = filter.getValue();
	      this.$filter.handler = getFilterFunction(this.$mode, value);
	      this.view.filterSpreadSheet();
	      this.view.callEvent("onAction", ["apply-filter", {
	        row: this.cell.row,
	        column: this.cell.column,
	        value: oldValue,
	        newValue: value
	      }]);
	      this.setCellStyle(this.cell.row, this.cell.column, "ss_filter_active", isValueActive(value));
	      this.close();
	    }
	  }, {
	    key: "setCellStyle",
	    value: function setCellStyle(row, column, css, add) {
	      var table = this.view.$$("cells");
	      var span = this.getSpan(table, row, column);
	      if (span) {
	        if (add) {
	          if (span[3].indexOf(css) == -1) span[3] += " " + css;
	        } else {
	          span[3] = span[3].replace(" " + css, "");
	        }
	      }
	      table[add ? "addCellCss" : "removeCellCss"](row, column, css);
	    }
	  }, {
	    key: "getSpan",
	    value: function getSpan(table, row, column) {
	      var item = table.getSpan()[row];
	      if (item) return item[column];
	    }
	  }, {
	    key: "getList",
	    value: function getList() {
	      return this.getFilter().getChildViews()[2];
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.$dialog.getBody().getChildViews()[0];
	    }
	  }, {
	    key: "syncScroll",
	    value: function syncScroll() {
	      if (this.$dialog.isVisible()) {
	        var node = this._getTargetNode();
	        var table = this.view.$$("cells");
	        var isHidden = false;
	        if (node) {
	          var nodeOffset = webix.html.offset(node);
	          var tableOffset = webix.html.offset(table.$view.getElementsByClassName("webix_ss_body")[0]);
	          var ydiff = nodeOffset.y - tableOffset.y;
	          var xdiff = nodeOffset.x - tableOffset.x + nodeOffset.width;
	          isHidden = ydiff < 0 || ydiff + nodeOffset.height > tableOffset.height || xdiff < 0 || xdiff - nodeOffset.width > tableOffset.width - webix.env.scrollSize;
	        }
	        if (!node || isHidden) this.$dialog.show({
	          x: -9999,
	          y: -9999
	        });else this.$dialog.show(node);
	      }
	    }
	  }, {
	    key: "getConditions",
	    value: function getConditions$1(name) {
	      var locale = webix.i18n.filter;
	      var conditions = getConditions(name);
	      for (var i = 0; i < conditions.length; i++) if (conditions[i].id) conditions[i].value = locale[conditions[i].id];
	      return conditions;
	    }
	  }]);
	}(Dialog);

	var flt$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$8,
		action: action$8
	});

	var action$7 = "custom";
	var DialogBox$7 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show() {
	      this.form = this.$dialog.$$("form");
	      this.list = this.$dialog.$$("list");
	      this.preview = this.$dialog.$$("preview");
	      this.cell = this.view.getSelectedId(true);
	      if (!this.cell.length) return false;
	      this.fillForm(this.view);
	      this.view.$handleSelection = function () {
	        return false;
	      };
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      var i18n = webix.i18n.spreadsheet;
	      var labelsLocale = i18n.labels;
	      var formatsLocale = i18n.formats;
	      var docsLink = "https://webix-guides.gitbook.io/spreadsheet-user-guide/formatting_numbers#custom-number-format";
	      var delimiters = getDelimiters("int");
	      var commonConfig = [{
	        name: "zeros",
	        view: "counter",
	        css: "webix_ssheet_counter",
	        label: labelsLocale["decimal-places"],
	        value: 0,
	        batch: "common"
	      }, {
	        name: "separator",
	        view: "checkbox",
	        label: labelsLocale["separator"],
	        batch: "common"
	      }, {
	        view: "richselect",
	        name: "symbol",
	        label: labelsLocale["currency-symbol"],
	        options: currencies,
	        batch: "common"
	      }, {
	        view: "formlist",
	        label: labelsLocale["negative"],
	        height: 160,
	        name: "negative",
	        batch: "common",
	        css: "webix_ssheet_format_negative",
	        template: function (obj) {
	          if (_this.list) {
	            var format = _this.getFormat(obj.id);
	            format = format2code(format.fmt, format.delimiters);
	            var style = {
	              css: ""
	            };
	            var value = format(-1234.56789, style);
	            return "<span class='" + style.css + "'>" + value + "</span>";
	          }
	        },
	        data: [{
	          id: 1
	        }, {
	          id: 2
	        }, {
	          id: 3
	        }, {
	          id: 4
	        }]
	      }];
	      var customConfig = [{
	        view: "text",
	        label: labelsLocale["format-pattern"],
	        name: "format",
	        labelPosition: "top",
	        batch: "custom",
	        placeholder: "[>100]0" + delimiters.groupSign + "000" + delimiters.decimalSign + "00;[>0]None"
	      }, {
	        id: "docs",
	        template: "<a href='" + docsLink + "' target='_blank' class = 'docs'>" + labelsLocale["format-docs"] + "</a>",
	        borderless: true,
	        batch: "custom"
	      }];
	      var dateConfig = [{
	        name: "date",
	        batch: "date",
	        view: "formlist",
	        labelWidth: 90,
	        height: 160,
	        label: labelsLocale["date-format"],
	        css: "webix_ssheet_format_date",
	        template: function (obj) {
	          return format2code(obj.value, delimiters)(45000);
	        },
	        data: [formatsLocale.dateFormat, formatsLocale.timeFormat, formatsLocale.fullDateFormat, formatsLocale.longDateFormat]
	      }];
	      return {
	        view: "ssheet-dialog",
	        position: "center",
	        width: 460,
	        head: labelsLocale["format-title"],
	        move: true,
	        body: {
	          padding: 0,
	          cols: [{
	            view: "list",
	            id: "list",
	            css: "webix_ssheet_format_type",
	            width: 120,
	            scroll: false,
	            data: this.getFormats(),
	            select: true,
	            on: {
	              onSelectChange: function (id) {
	                _this.updateForm();
	                switch (id[0]) {
	                  case "custom":
	                  case "date":
	                    _this.form.showBatch(id[0]);
	                    break;
	                  default:
	                    {
	                      var elements = _this.form.elements;
	                      _this.form.showBatch("common");
	                      elements.separator[id[0] == "percent" ? "hide" : "show"]();
	                      elements.symbol[id[0] == "price" ? "show" : "hide"]();
	                    }
	                }
	              }
	            }
	          }, {
	            view: "form",
	            id: "form",
	            height: 340,
	            paddingY: 0,
	            paddingX: 20,
	            elements: [{
	              id: "preview",
	              template: function (obj) {
	                if (obj.value == i18n.table["format-error"]) return obj.value;
	                return "<span class ='" + obj.css + "'>" + obj.value + "</span>";
	              },
	              css: "webix_ssheet_format_preview",
	              autoheight: true,
	              borderless: true
	            }].concat(commonConfig, customConfig, dateConfig),
	            elementsConfig: {
	              labelWidth: 140
	            },
	            on: {
	              onChange: function () {
	                return _this.updateForm();
	              }
	            }
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.closeWin();
	          }
	        }
	      };
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var _this2 = this;
	      var type = this.list.getSelectedId();
	      var values = type == "custom" ? {
	        format: this.form.getValues().format
	      } : this.form.getValues();
	      values.type = type;
	      group.set(function () {
	        for (var i = 0; i < _this2.cell.length; i++) addFormat(_this2.view, _this2.cell[i].row, _this2.cell[i].column, values.format, values);
	      });
	      this.view.$$("cells").refresh();
	      this.closeWin();
	    }
	  }, {
	    key: "closeWin",
	    value: function closeWin() {
	      var format = getFormat$1(this.view, this.cell[0].row, this.cell[0].column);
	      var name = format || "common";

	      //default format
	      if (!isCustom(name)) this.view.callEvent("onCommand", [{
	        id: "toolbar-update",
	        name: "format",
	        value: name
	      }]);
	      this.close();
	    }
	  }, {
	    key: "getFormat",
	    value: function getFormat(negative) {
	      var type = this.list.getSelectedId();
	      var values = this.form.getValues();
	      values.negative = negative || values.negative;
	      if (type != "custom") {
	        if (type != "date") values.date = "";
	        values = formToValues(type, values);
	        return {
	          fmt: serializeFormat(values),
	          delimiters: getDelimiters(type)
	        };
	      } else return {
	        fmt: values.format,
	        delimiters: getDelimiters(type)
	      };
	    }
	  }, {
	    key: "fillForm",
	    value: function fillForm(view) {
	      var locale = webix.i18n.spreadsheet;
	      var format = getFormat$1(view, this.cell[0].row, this.cell[0].column);
	      var values = {
	        zeros: 0,
	        separator: 0,
	        negative: 1,
	        date: locale.formats.dateFormat,
	        symbol: currencies[0].value,
	        format: ""
	      };
	      var type;
	      var name = format || "";
	      values.format = getFormatSource(name || "price");
	      if (!name) type = name = "price";else if (name == "string") type = name = "custom";else type = formatHelpers[name].values.type;
	      if (type != "custom") webix.extend(values, formatHelpers[name].values, true);
	      var item = this.view.$$("cells").getItem(this.cell[0].row);
	      var col = this.cell[0].column;
	      this.value = webix.isUndefined(item[col]) ? "" : item[col];
	      this.form.setValues(values);
	      this.list.select(type);
	      this.updateForm();
	    }
	  }, {
	    key: "updateForm",
	    value: function updateForm() {
	      var form = this.form.elements;
	      var format = this.getFormat();
	      var value = this.value;
	      var isText = value === "" || isNaN(value);
	      if (checkFormat(format, "date") && (isText || isDateInvalid(value))) value = 45000;else if (isText && !checkFormat(format, "string")) value = 1234.56789;
	      var style = {
	        css: ""
	      };
	      value = format2code(format.fmt, format.delimiters)(value, style);

	      //preview values
	      this.preview.parse({
	        value: value,
	        css: style.css
	      });
	      form.negative.refresh();
	      form.date.refresh();

	      //set new format string
	      form.format.setValue(format.fmt);
	    }
	  }, {
	    key: "getFormats",
	    value: function getFormats() {
	      var locale = webix.i18n.spreadsheet.labels;
	      return [{
	        id: "price",
	        value: locale.currency
	      }, {
	        id: "int",
	        value: locale.number
	      }, {
	        id: "percent",
	        value: locale.percent
	      }, {
	        id: "date",
	        value: locale.date
	      }, {
	        id: "custom",
	        value: locale["custom-format"]
	      }];
	    }
	  }]);
	}(Dialog);

	var fmt$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$7,
		action: action$7
	});

	var action$6 = "conditional-format";
	function getConditionStyle(data) {
	  return data.map(function (item) {
	    item.id = item.css;
	    return item;
	  });
	}
	var DialogBox$6 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "_rulesToArr",
	    value: function _rulesToArr() {
	      var conditions = this.view.conditions.handlers;
	      return [{
	        value: webix.i18n.spreadsheet.labels["conditional-common"],
	        disabled: true,
	        $css: "webix_ssheet_cformats_type"
	      }].concat(_toConsumableArray(conditions.date), [
	      //number rules equal to date
	      {
	        value: webix.i18n.spreadsheet.labels["conditional-text"],
	        disabled: true,
	        $css: "webix_ssheet_cformats_type"
	      }], _toConsumableArray(conditions.text)).map(function (rule) {
	        if (!rule.value) rule.value = webix.i18n.filter[rule.id];
	        return rule;
	      });
	    }
	  }, {
	    key: "_getCondition",
	    value: function _getCondition() {
	      var _this = this;
	      var view = this.view;
	      var values = this._getDatalayout().getValue();
	      var data = [];
	      values.forEach(function (v) {
	        var item = [v.condition];
	        if (v.condition != "between" && v.condition != "notBetween") item.push(_this._normalizeValue(v.value, v.condition));else item.push([_this._normalizeValue(v.value, v.condition), _this._normalizeValue(v.value2, v.condition)]);
	        item.push(v.style);
	        for (var i = 0; i < item.length; i++) {
	          if (item[i] === "" || webix.isArray(item[i]) && item[i].indexOf("") != -1) return false;
	        }
	        data.push(item);
	      });
	      view.callEvent("onConditionSet", [data]);
	    }
	  }, {
	    key: "_safeInt",
	    value: function _safeInt(a) {
	      var num = parseFloat(a);
	      if (num == a) return num;
	      return a;
	    }
	  }, {
	    key: "_setCondition",
	    value: function _setCondition() {
	      var _this2 = this;
	      var view = this.view;
	      var collection = view.conditions.get(this.cell.row, this.cell.column);
	      var data = [];
	      if (collection) {
	        collection.forEach(function (item) {
	          var values = {};
	          values.condition = item[0];
	          if (webix.isArray(item[1])) {
	            values.value = _this2._formatValue(item[1][0], values.condition);
	            values.value2 = _this2._formatValue(item[1][1], values.condition);
	          } else values.value = _this2._formatValue(item[1], values.condition);
	          values.style = item[2];
	          data.push(values);
	        });
	      }
	      while (data.length < 3) data.push({});
	      this._getDatalayout().setValue(data);
	    }
	  }, {
	    key: "_getDatalayout",
	    value: function _getDatalayout() {
	      return this.$dialog.getBody().getChildViews()[0].getChildViews()[1].getBody();
	    }
	  }, {
	    key: "_formatValue",
	    value: function _formatValue(value, condition) {
	      if (!(condition && this._isNotDateRule(condition))) {
	        if (this.editFormat && value !== "" && value[0] != "=") {
	          value = getJsDateFromExcel(value);
	          return this.editFormat(value);
	        }
	      }
	      return value.toString();
	    }
	  }, {
	    key: "_normalizeValue",
	    value: function _normalizeValue(value, condition) {
	      if (!this._isNotDateRule(condition)) {
	        if (this.editFormat) {
	          if (isNaN(value)) {
	            if (value[0] != "=") {
	              var parser = webix.Date.strToDate(webix.i18n.spreadsheet.formats.parseDateTime);
	              value = parser(value);
	              value = isNaN(value) ? "" : getExcelDateFromJs(value);
	            }
	          } else value = isDateInvalid(value) ? "" : value;
	        } else value = this._safeInt(value, 10);
	      }
	      return value;
	    }
	  }, {
	    key: "_isNotDateRule",
	    value: function _isNotDateRule(condition) {
	      if (condition == "equal" || condition == "notEqual") return false;
	      return find(this.view.conditions.handlers.text, function (obj) {
	        return obj.id == condition;
	      });
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      this._getCondition();
	      this.close();
	    }
	  }, {
	    key: "$show",
	    value: function $show() {
	      var _this3 = this;
	      this.cell = this.view.getSelectedId();
	      if (!this.cell) return false;
	      var type = getType(this.view, this.cell.row, this.cell.column);
	      if (type == "date") this.editFormat = getDateEditFormat(this.view, this.cell.row, this.cell.column);
	      this.$dialog.queryView("text", "all").forEach(function (view) {
	        view.define({
	          placeholder: type == "date" ? _this3._formatValue(45000) : ""
	        });
	        view.refresh();
	      });
	      this.view.$handleSelection = function (st, end, a, b) {
	        if (_this3.activeValue && a == b) {
	          _this3.activeValue.setValue("=" + a);
	        }
	        return false;
	      };
	      this._setCondition();
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	      delete this.editFormat;
	      this._getDatalayout().clearAll();
	    }
	  }, {
	    key: "getRows",
	    value: function getRows(data) {
	      var _this4 = this;
	      var dialog = this;
	      return {
	        view: "form",
	        padding: 0,
	        borderless: true,
	        css: "webix_ssheet_cformats",
	        elements: [{
	          margin: 10,
	          padding: {
	            right: 4
	          },
	          cols: [{
	            view: "richselect",
	            name: "style",
	            width: 120,
	            placeholder: webix.i18n.spreadsheet.labels["conditional-style"],
	            css: "webix_ssheet_cformat_select",
	            suggest: {
	              padding: 0,
	              borderless: true,
	              css: "webix_ssheet_cformat_list",
	              body: {
	                template: function (obj) {
	                  var css = "webix_ssheet_cformat " + obj.css;
	                  return "<div class=\"".concat(css, "\">").concat(obj.name, "</div>");
	                },
	                data: data
	              }
	            }
	          }, {
	            view: "richselect",
	            width: 150,
	            name: "condition",
	            placeholder: webix.i18n.spreadsheet.labels["conditional-operator"],
	            on: {
	              onChange: function (newv) {
	                var elements = this.getFormView().elements;
	                if (dialog.editFormat) {
	                  if (dialog._isNotDateRule(newv)) elements.value.define({
	                    placeholder: ""
	                  });else {
	                    var value = dialog._normalizeValue(elements.value.getValue(), newv);
	                    elements.value.setValue(dialog._formatValue(value, newv));
	                    elements.value.define({
	                      placeholder: dialog._formatValue(45000)
	                    });
	                  }
	                  elements.value.refresh();
	                }
	                if (newv == "between" || newv == "notBetween") elements.value2.show();else elements.value2.hide();
	              }
	            },
	            suggest: {
	              view: "ssheet-form-suggest",
	              body: {
	                data: this._rulesToArr()
	              }
	            }
	          }, {
	            cols: [{
	              view: "text",
	              on: {
	                onFocus: function (current_view) {
	                  _this4.activeValue = current_view;
	                },
	                onBlur: function (current_view) {
	                  var value = current_view.getValue();
	                  if (value !== "") {
	                    var elements = current_view.getFormView().elements;
	                    var condition = elements.condition.getValue();
	                    value = _this4._normalizeValue(value, condition);
	                    current_view.setValue(_this4._formatValue(value, condition));
	                  }
	                }
	              },
	              name: "value"
	            }, {
	              view: "text",
	              name: "value2",
	              on: {
	                onFocus: function (current_view) {
	                  _this4.activeValue = current_view;
	                },
	                onBlur: function (current_view) {
	                  var value = current_view.getValue();
	                  if (value !== "") {
	                    var elements = current_view.getFormView().elements;
	                    var condition = elements.condition.getValue();
	                    value = _this4._normalizeValue(value, condition);
	                    current_view.setValue(_this4._formatValue(value, condition));
	                  }
	                }
	              },
	              hidden: true
	            }]
	          }, {
	            view: "icon",
	            css: "webix_ssheet_cformat_icon",
	            icon: "wxi-trash",
	            click: function (vid) {
	              var form = webix.$$(vid).getFormView();
	              var dlayout = _this4._getDatalayout();
	              dlayout.getValue(); // save local changes before rendering

	              var index = dlayout.getChildViews().indexOf(form);
	              dlayout.remove(dlayout.getIdByIndex(index));
	              if (dlayout.count() < 3) dlayout.add({});
	            }
	          }]
	        }]
	      };
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this5 = this;
	      var margin = webix.skin.$active.layoutMargin.form;
	      return {
	        view: "ssheet-dialog",
	        head: webix.i18n.spreadsheet.labels["conditional-format"],
	        position: "center",
	        width: 770,
	        move: true,
	        margin: margin,
	        body: {
	          margin: 0,
	          rows: [{
	            height: 36,
	            padding: {
	              left: 12
	            },
	            cols: [{
	              view: "label",
	              width: 131,
	              label: webix.i18n.spreadsheet.labels.display
	            }, {
	              view: "label",
	              width: 161,
	              label: webix.i18n.spreadsheet.labels.condition
	            }, {
	              view: "label",
	              label: webix.i18n.spreadsheet.labels.value
	            }, {
	              view: "icon",
	              css: "webix_ssheet_cformat_icon",
	              icon: "wxi-plus-circle",
	              click: function () {
	                var dlayout = _this5._getDatalayout();
	                dlayout.getValue(); // save local changes before rendering
	                dlayout.add({});
	              }
	            }, {
	              width: 4 + webix.env.scrollSize
	            }]
	          }, {
	            view: "scrollview",
	            maxHeight: webix.skin.$active.inputHeight * 3 + 4,
	            borderless: true,
	            scroll: "y",
	            body: {
	              view: "datalayout",
	              padding: 0,
	              borderless: true,
	              rows: [this.getRows(getConditionStyle(this.view.config.conditionStyle))]
	            }
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this5.okClick();
	          },
	          onCancelClick: function () {
	            return _this5.close();
	          }
	        }
	      };
	    }
	  }]);
	}(Dialog);

	var cnd = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$6,
		action: action$6
	});

	var action$5 = "excel-export";
	var DialogBox$5 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      this.view.$handleSelection = function () {
	        return false;
	      };
	      form.elements.sheets.setValue(this.getSheets());
	      form.elements.filename.setValue("Data");
	      form.elements.filename.getInputNode().select();
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      return {
	        view: "ssheet-dialog",
	        head: webix.i18n.spreadsheet.labels["export-title"],
	        move: true,
	        position: "center",
	        body: {
	          view: "form",
	          elements: [{
	            view: "text",
	            name: "filename",
	            placeholder: webix.i18n.spreadsheet.labels["export-name"]
	          }, {
	            view: "multicheckbox",
	            name: "sheets",
	            css: "webix_ssheet_multicheckbox"
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "getSheets",
	    value: function getSheets() {
	      var view = this.view;
	      var sheets = view._sheets;
	      var value = [];
	      for (var i = 0; i < sheets.length; i++) {
	        var state = sheets[i].state;
	        if (state == "veryHidden") continue;
	        value.push({
	          name: sheets[i].name,
	          hidden: state == "hidden",
	          active: view._activeSheet === sheets[i].name ? 1 : 0
	        });
	      }
	      return value;
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var values = this.$dialog.getBody().getValues();
	      webix.toExcel(this.view, values);
	      this.close();
	    }
	  }]);
	}(Dialog);

	var exp = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$5,
		action: action$5
	});

	var action$4 = "add-link";
	var DialogBox$4 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      var cell = this.view.getSelectedId();
	      if (!cell) return false;
	      if (!this.restoreValue(form)) form.clear();
	      form.elements.name.focus();
	      this.view.$handleSelection = function (st, end, a) {
	        form.elements.url.setValue("#" + a);
	        return false;
	      };
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "restoreValue",
	    value: function restoreValue(form) {
	      var cell = this.view.getSelectedId();
	      if (cell) {
	        var value = this.view.getCellValue(cell.row, cell.column);
	        if (value && typeof value == "string" && value.indexOf("=HYPERLINK") === 0) {
	          var parts = value.split("\"");
	          form.setValues({
	            name: parts[3] || "",
	            url: parts[1] || ""
	          });
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      return {
	        view: "ssheet-dialog",
	        head: webix.i18n.spreadsheet.labels["link-title"],
	        move: true,
	        position: "center",
	        body: {
	          view: "form",
	          elements: [{
	            view: "text",
	            name: "name",
	            placeholder: webix.i18n.spreadsheet.labels["link-name"]
	          }, {
	            view: "text",
	            name: "url",
	            placeholder: webix.i18n.spreadsheet.labels["link-url"]
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var cell = this.view.getSelectedId();
	      var data = this.$dialog.getBody().getValues();
	      var text = "";
	      if (data.url) {
	        data.name = data.name || data.url;
	        if (!/^(#|(https?:\/\/))/i.test(data.url)) data.url = "http://" + data.url;
	        text = "=HYPERLINK(\"".concat(data.url, "\",\"").concat(data.name, "\")");
	      }
	      this.view.setCellValue(cell.row, cell.column, text);
	      this.view.refresh();
	      this.close();
	    }
	  }]);
	}(Dialog);

	var lnk = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$4,
		action: action$4
	});

	var action$3 = "print";
	var DialogBox$3 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      var list = form.elements.sheets.getList();
	      list.clearAll();
	      list.parse(this.getSheets(this.view));
	      form.setValues({
	        data: "full",
	        sheets: this.view.getActiveSheet()
	      }, true);
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      var labels = webix.i18n.spreadsheet.labels;
	      var paperSize;
	      var printSizes = webix.env.printSizes.map(function (size) {
	        if (size.id == "a4") paperSize = "a4";
	        size.value = labels["page-" + size.id] || size.id;
	        return size;
	      });
	      if (!paperSize) paperSize = printSizes[0].id;
	      return {
	        view: "ssheet-dialog",
	        head: labels["print-title"],
	        move: true,
	        modal: true,
	        width: 580,
	        position: "center",
	        buttons: false,
	        on: {
	          onHide: function () {
	            webix.extend(_this.view._printBorders, _this.getValues(), true);
	            showBorders(_this.view, true);
	          }
	        },
	        body: {
	          view: "form",
	          elementsConfig: {
	            labelWidth: 0
	          },
	          elements: [{
	            type: "section",
	            template: labels["print-settings"]
	          }, {
	            cols: [{
	              view: "radio",
	              name: "data",
	              vertical: true,
	              options: [{
	                id: "full",
	                value: labels["sheets"]
	              }, {
	                id: "selection",
	                value: labels["selection"]
	              }],
	              on: {
	                onChange: function (newv) {
	                  var elements = this.getFormView().elements;
	                  var sheets = elements.sheets;
	                  if (newv == "full") {
	                    elements.sheetnames.setValue(1);
	                    sheets.enable();
	                  } else sheets.disable();
	                }
	              }
	            }, {
	              padding: {
	                right: 30
	              },
	              rows: [{
	                name: "sheets",
	                view: "multiselect",
	                width: 160,
	                stringResult: false,
	                suggest: {
	                  selectAll: true,
	                  body: {
	                    data: []
	                  }
	                }
	              }, {}]
	            }, {
	              rows: [{
	                view: "checkbox",
	                name: "sheetnames",
	                value: 1,
	                labelRight: labels["sheet-names"]
	              }, {
	                view: "checkbox",
	                name: "borderless",
	                labelRight: labels["borderless"]
	              }, {
	                view: "checkbox",
	                name: "skiprows",
	                labelRight: labels["skip-rows"]
	              }, {
	                view: "checkbox",
	                name: "margin",
	                labelRight: labels["margin"]
	              }, {
	                view: "checkbox",
	                name: "external",
	                labelRight: labels["external-ui"]
	              }]
	            }]
	          }, {
	            type: "section",
	            template: labels["print-paper"]
	          }, {
	            view: "radio",
	            name: "paper",
	            value: paperSize,
	            options: printSizes
	          }, {
	            type: "section",
	            template: labels["print-layout"]
	          }, {
	            rows: [{
	              view: "radio",
	              name: "fit",
	              value: "page",
	              options: [{
	                id: "page",
	                value: labels["page-width"]
	              }, {
	                id: "data",
	                value: labels["page-actual"]
	              }]
	            }, {
	              view: "radio",
	              name: "mode",
	              value: "landscape",
	              options: [{
	                id: "portrait",
	                value: labels["page-portrait"]
	              }, {
	                id: "landscape",
	                value: labels["page-landscape"]
	              }]
	            }]
	          }, {
	            cols: [{}, {
	              view: "button",
	              css: "ssheet_cancel_button",
	              hotkey: "esc",
	              value: labels.cancel,
	              autowidth: true,
	              click: function () {
	                return _this.close();
	              }
	            }, {
	              view: "button",
	              value: labels["print-borders"],
	              autowidth: true,
	              click: function () {
	                return _this.printPreview();
	              }
	            }, {
	              view: "button",
	              value: labels.print,
	              hotkey: "enter",
	              autowidth: true,
	              click: function () {
	                return _this.okClick();
	              }
	            }]
	          }]
	        }
	      };
	    }
	  }, {
	    key: "getValues",
	    value: function getValues() {
	      var data = this.$dialog.getBody().getValues({
	        disabled: false
	      });
	      data.margin = data.margin ? 0 : {};
	      return data;
	    }
	  }, {
	    key: "printPreview",
	    value: function printPreview() {
	      this.close();
	      this.view.showPrintBorders(true);
	    }
	  }, {
	    key: "getSheets",
	    value: function getSheets(view) {
	      return view._sheets.map(function (sheet) {
	        return {
	          value: sheet.name,
	          id: sheet.name
	        };
	      }).filter(function (sheet) {
	        return isVisible(view, sheet.id);
	      });
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var data = this.$dialog.getBody().getValues({
	        disabled: false
	      });
	      data.margin = data.margin ? 0 : {};
	      this.close();
	      webix.print(this.view, data);
	    }
	  }]);
	}(Dialog);

	var pnt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$3,
		action: action$3
	});

	var action$2 = "add-comment";
	var DialogBox$2 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "open",
	    value: function open(action) {
	      var _this = this;
	      //we get cell only on hover commented cell
	      this.cell = action.cell ? action.cell : this.view.getSelectedId();

	      // cell not provided
	      if (!this.cell ||
	      // cell is locked and in the edit mode
	      this.view.isCellLocked(this.cell.row, this.cell.column) && !action.viewonly ||
	      // action blocked by user's code
	      !this.view.callEvent("onBeforeCommentShow", [this.cell.row, this.cell.column, !action.viewonly])) {
	        return false;
	      }
	      this.view.comments._activeComment = {
	        editStatus: !action.viewonly,
	        cell: this.cell
	      };
	      if (!this.$dialog) {
	        this.$dialog = webix.ui(this.$init());
	        this.view._destroy_with_me.push(this.$dialog);
	        this.view.comments.commentsView = this.$dialog;
	        this.$dialog.attachEvent("onHide", function () {
	          return _this.$hide();
	        });
	        this.view.attachEvent("onCommentHide", function () {
	          return _this.$dialog.hide();
	        });
	      }
	      var form = this.$dialog.getBody();
	      var span = this.view.$$("cells").getSpan(this.cell.row, this.cell.column);
	      var item = span ? {
	        row: this.cell.row,
	        column: span[1] * 1 + span[2] - 1
	      } : this.cell;
	      webix.delay(function () {
	        _this.$dialog.show(_this.view.$$("cells").getItemNode(item));
	        _this._setComment();
	      });
	      if (this.$show(this.$dialog, form) === false) this.close();
	    }
	  }, {
	    key: "$show",
	    value: function $show() {
	      this.textarea = this.$dialog.queryView({
	        view: "textarea"
	      });
	      this.template = this.$dialog.queryView({
	        view: "template"
	      });
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this2 = this;
	      return {
	        view: "popup",
	        css: "ssheet_comments",
	        minWidth: 250,
	        minHeight: 150,
	        relative: "right",
	        resize: true,
	        on: {
	          onViewResize: function () {
	            _this2.$dialog.hide();
	            _this2.$dialog.show();
	            if (_this2.textarea.isVisible()) _this2.textarea.focus();
	          }
	        },
	        body: {
	          animate: false,
	          cells: [{
	            view: "template",
	            css: "ssheet_comment_view",
	            borderless: true,
	            scroll: "auto",
	            onClick: {
	              "ssheet_comment_view": function () {
	                if (!(_this2.view.config.readonly || _this2.view.isCellLocked(_this2.cell.row, _this2.cell.column))) _this2.showInput(_this2.view.comments.get(_this2.cell.row, _this2.cell.column));
	              }
	            }
	          }, {
	            view: "textarea",
	            on: {
	              onChange: function () {
	                _this2.addComment();
	              },
	              onFocus: function () {
	                _this2.view.comments._activeComment = {
	                  editStatus: true,
	                  cell: _this2.cell
	                };
	              },
	              onBlur: function () {
	                _this2.view.comments._activeComment = {};
	                _this2.$dialog.hide();
	              }
	            }
	          }]
	        }
	      };
	    }
	  }, {
	    key: "_setComment",
	    value: function _setComment() {
	      var comment = this.view.comments.get(this.cell.row, this.cell.column);
	      if (this.view.comments._activeComment.editStatus) this.showInput(comment);else this.showTemplate(comment);
	    }
	  }, {
	    key: "showTemplate",
	    value: function showTemplate(text) {
	      this.template.show();
	      this.template.setHTML(text);
	    }
	  }, {
	    key: "showInput",
	    value: function showInput(text) {
	      var _this3 = this;
	      this.view._commentSel = true;
	      this.view.$$("cells").select(this.cell.row, this.cell.column);
	      delete this.view._commentSel;
	      webix.delay(function () {
	        _this3.changeTextarea(text);
	        _this3.textarea.show();
	        _this3.textarea.focus();
	      });
	    }
	  }, {
	    key: "addComment",
	    value: function addComment() {
	      this.view.comments.add(this.cell.row, this.cell.column, this.textarea.getValue());
	    }
	  }, {
	    key: "changeTextarea",
	    value: function changeTextarea(text) {
	      this.textarea.blockEvent();
	      this.textarea.setValue(text || "");
	      this.textarea.unblockEvent();
	    }
	  }]);
	}(Dialog);

	var cmt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$2,
		action: action$2
	});

	var action$1 = "resize";
	var DialogBox$1 = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "open",
	    value: function open(action) {
	      this.group = action.group;
	      this.header = action.value;
	      Dialog.prototype.open.apply(this, arguments);
	    }
	  }, {
	    key: "$show",
	    value: function $show() {
	      var sel = this.view.getSelectedId();
	      if (!sel) return false;
	      this.view.$handleSelection = function () {
	        return false;
	      };
	      var elements = this.$dialog.getBody().elements;
	      this.type = elements["type"];
	      this.size = elements["size"];
	      this.$dialog.getHead().getChildViews()[0].setHTML(this.header);
	      var grid = this.view.$$("cells");
	      var value;
	      if (this.group == "row") value = grid.getItem(sel.row).$height || grid.config.rowHeight;else value = grid.getColumnConfig(sel.column).width || grid.config.columnWidth;
	      value = value / this.view._zoom;
	      this.type.getOption(1).value = webix.i18n.spreadsheet.labels[this.group == "row" ? "height" : "width"];
	      this.type.setValue(1);
	      this.type.refresh();
	      this.size.setValue(Math.ceil(value));
	      this.size.focus();
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var type = this.type.getValue();
	      var size = "auto";
	      if (type == 1) size = this.size.getValue() * 1;else if (type == 3) size = this.view.$$("cells").config[this.group == "row" ? "rowHeight" : "columnWidth"];
	      if (this.group == "row") this.view.setRowHeight(null, size);else this.view.setColumnWidth(null, size);
	      this.close();
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this = this;
	      var locale = webix.i18n.spreadsheet.labels;
	      return {
	        view: "ssheet-dialog",
	        position: "center",
	        width: 300,
	        move: true,
	        body: {
	          padding: 0,
	          cols: [{
	            view: "radio",
	            name: "type",
	            vertical: true,
	            optionHeight: 40,
	            on: {
	              onChange: function (id) {
	                if (id == 1) _this.size.enable();else _this.size.disable();
	              }
	            },
	            options: [{
	              id: 1,
	              value: ""
	            }, {
	              id: 2,
	              value: locale["fit-content"]
	            }, {
	              id: 3,
	              value: locale["default-size"]
	            }]
	          }, {
	            rows: [{
	              view: "text",
	              name: "size",
	              width: 120
	            }]
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this.okClick();
	          },
	          onCancelClick: function () {
	            return _this.close();
	          }
	        }
	      };
	    }
	  }]);
	}(Dialog);

	var siz = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox$1,
		action: action$1
	});

	var action = "add-cell-validation";
	var DialogBox = /*#__PURE__*/function (_Dialog) {
	  function DialogBox() {
	    _classCallCheck(this, DialogBox);
	    return _callSuper(this, DialogBox, arguments);
	  }
	  _inherits(DialogBox, _Dialog);
	  return _createClass(DialogBox, [{
	    key: "$show",
	    value: function $show(box, form) {
	      var _this = this;
	      var cell = this.cell = this.view.getSelectedId();
	      if (!cell) return false;
	      this.restoreValue(form, cell);
	      this.view.$handleSelection = function (st, end, a, b) {
	        var type = _this.$dialog.getBody().elements.type.getValue();
	        if (_this.activeValue && _this.activeValue.isVisible()) _this.activeValue.setValue("=" + (type != "range" ? a : a + ":" + b));
	        return false;
	      };
	    }
	  }, {
	    key: "$hide",
	    value: function $hide() {
	      this.view.$handleSelection = null;
	      this.$dialog.getBody().clear();
	    }
	  }, {
	    key: "restoreValue",
	    value: function restoreValue(form, cell) {
	      var rule = this.view.validation.get(cell.row, cell.column);
	      if (!rule) rule = {};
	      webix.extend(rule, {
	        type: "any",
	        errorHandle: "information"
	      });
	      form.setValues(rule);
	      this.formatInput(form.elements.value);
	      this.formatInput(form.elements.value2);
	    }
	  }, {
	    key: "prepareConditions",
	    value: function prepareConditions() {
	      var handlers = this.view.validation.handlers;
	      for (var name in handlers) handlers[name].map(function (rule) {
	        if (!rule.value) rule.value = webix.i18n.filter[rule.id];
	        return rule;
	      });
	      this.handlers = handlers;
	    }
	  }, {
	    key: "handleTypeChange",
	    value: function handleTypeChange(value, oldValue) {
	      var form = this.$dialog.getBody();
	      var elements = form.elements;
	      var type = elements.type.getValue();
	      var condition = elements.condition;
	      switch (type) {
	        case "any":
	          form.showBatch("any");
	          break;
	        case "date":
	        case "text":
	        case "textLength":
	          form.showBatch("value");
	          form.showBatch("condition", true);
	          break;
	        case "number":
	          form.showBatch("value");
	          form.showBatch("condition", true);
	          form.showBatch("number", true);
	          break;
	        case "range":
	          form.showBatch("value");
	          break;
	      }
	      var conditionValue = condition.getValue();
	      if (condition.isVisible()) {
	        condition.getList().clearAll();
	        var data = _toConsumableArray(this.handlers[type]);
	        if (!find(data, function (obj) {
	          return obj.id == conditionValue;
	        })) condition.setValue();
	        condition.getList().parse(data);
	        if (conditionValue == "between" || conditionValue == "notBetween") elements.value2.show();else elements.value2.hide();
	      } else elements.value2.hide();
	      var locale = webix.i18n.spreadsheet.labels;
	      var placeholders = {
	        text: locale["validation-placeholder-text"] || "some text",
	        textLength: locale["validation-placeholder-number"] || 123,
	        date: locale["validation-placeholder-date"] || getDateEditFormat(this.view, this.cell.row, this.cell.column)(new Date()),
	        number: locale["validation-placeholder-number"] || 123,
	        range: locale["validation-placeholder-range"] || "=A1:A7"
	      };
	      elements.value.config.placeholder = elements.value2.config.placeholder = placeholders[type];
	      if (oldValue == "date") {
	        elements.value.setValue(this.normalizeValue(elements.value.getValue(), "date"));
	        elements.value2.setValue(this.normalizeValue(elements.value2.getValue(), "date"));
	      } else if (value == "date") {
	        this.formatInput(elements.value);
	        this.formatInput(elements.value2);
	      }
	      elements.value.refresh();
	      elements.value2.refresh();
	    }
	  }, {
	    key: "normalizeValue",
	    value: function normalizeValue(value, type) {
	      if (webix.isUndefined(value)) value = "";
	      var isString = isNaN(value);
	      if (isString && value[0] == "=") return value;
	      type = type || this.$dialog.getBody().elements.type.getValue();
	      if (type == "date") {
	        if (isString) {
	          var parser = webix.Date.strToDate(webix.i18n.spreadsheet.formats.parseDateTime);
	          value = parser(value);
	          value = value === "" || isNaN(value) ? "" : getExcelDateFromJs(value);
	        } else value = isDateInvalid(value) ? "" : value;
	      } else if ((type == "number" || type == "textLength") && isString) value = "";
	      return value;
	    }
	  }, {
	    key: "formatValue",
	    value: function formatValue(value, type) {
	      if (type == "date" && value !== "" && value[0] != "=") {
	        value = getJsDateFromExcel(value);
	        return getDateEditFormat(this.view, this.cell.row, this.cell.column)(value);
	      }
	      return value.toString();
	    }
	  }, {
	    key: "formatInput",
	    value: function formatInput(view) {
	      var value = view.getValue();
	      if (value !== "") {
	        var elements = view.getFormView().elements;
	        var type = elements.type.getValue();
	        value = this.normalizeValue(value, type);
	        view.setValue(this.formatValue(value, type));
	      }
	    }
	  }, {
	    key: "$init",
	    value: function $init() {
	      var _this2 = this;
	      this.prepareConditions();
	      var locale = webix.i18n.spreadsheet.labels;
	      return {
	        view: "ssheet-dialog",
	        width: 500,
	        head: locale["add-cell-validation"],
	        move: true,
	        position: "center",
	        body: {
	          view: "form",
	          elementsConfig: {
	            labelWidth: 170
	          },
	          rules: {
	            value: webix.rules.isNotEmpty,
	            value2: webix.rules.isNotEmpty,
	            condition: webix.rules.isNotEmpty,
	            errorHandle: webix.rules.isNotEmpty
	          },
	          elements: [{
	            view: "richselect",
	            label: locale["validation-type"],
	            name: "type",
	            options: [{
	              id: "any",
	              value: locale["validation-any"]
	            }, {
	              id: "date",
	              value: locale["validation-date"]
	            }, {
	              id: "number",
	              value: locale["validation-number"]
	            }, {
	              id: "text",
	              value: locale["validation-text"]
	            }, {
	              id: "textLength",
	              value: locale["validation-text-length"]
	            }, {
	              id: "range",
	              value: locale["validation-range"]
	            }],
	            on: {
	              onChange: function (value, oldValue) {
	                return _this2.handleTypeChange(value, oldValue);
	              }
	            }
	          }, {
	            view: "checkbox",
	            label: locale["validation-integer"],
	            batch: "number",
	            name: "integer"
	          }, {
	            view: "checkbox",
	            label: locale["validation-ignore-empty"],
	            batch: "value",
	            name: "ignoreEmpty"
	          }, {
	            label: locale["condition"],
	            required: true,
	            batch: "condition",
	            view: "richselect",
	            name: "condition",
	            on: {
	              onChange: function (newv) {
	                var elements = this.getFormView().elements;
	                if (newv == "between" || newv == "notBetween") elements.value2.show();else elements.value2.hide();
	                elements.condition.validate();
	              }
	            },
	            suggest: {
	              view: "ssheet-form-suggest",
	              body: {
	                data: []
	              }
	            }
	          }, {
	            batch: "value",
	            cols: [{
	              label: locale["value"],
	              required: true,
	              view: "text",
	              on: {
	                onFocus: function (current_view) {
	                  return _this2.activeValue = current_view;
	                },
	                onBlur: function (current_view) {
	                  _this2.formatInput(current_view);
	                  current_view.validate();
	                }
	              },
	              name: "value"
	            }, {
	              view: "text",
	              required: true,
	              name: "value2",
	              width: 150,
	              on: {
	                onFocus: function (current_view) {
	                  return _this2.activeValue = current_view;
	                },
	                onBlur: function (current_view) {
	                  _this2.formatInput(current_view);
	                  current_view.validate();
	                }
	              },
	              hidden: true
	            }]
	          }, {
	            name: "inputMessage",
	            view: "textarea",
	            label: locale["validation-input-message"]
	          }, {
	            view: "richselect",
	            batch: "value",
	            label: locale["validation-error-handle"],
	            name: "errorHandle",
	            options: [{
	              id: "information",
	              value: locale["validation-error-information"]
	            }, {
	              id: "warning",
	              value: locale["validation-error-warning"]
	            }, {
	              id: "stop",
	              value: locale["validation-error-stop"]
	            }],
	            on: {
	              onChange: function () {
	                this.validate();
	              }
	            }
	          }, {
	            name: "errorTitle",
	            view: "text",
	            batch: "value",
	            label: locale["validation-error-title"]
	          }, {
	            name: "errorMessage",
	            view: "textarea",
	            batch: "value",
	            label: locale["validation-error-message"]
	          }]
	        },
	        on: {
	          onSaveClick: function () {
	            return _this2.okClick();
	          },
	          onCancelClick: function () {
	            return _this2.close();
	          }
	        }
	      };
	    }
	  }, {
	    key: "okClick",
	    value: function okClick() {
	      var form = this.$dialog.getBody();
	      if (form.validate()) {
	        var data = form.getValues({
	          hidden: false
	        });
	        data.value = this.normalizeValue(data.value);
	        if (data.value2) {
	          data.value = [data.value, this.normalizeValue(data.value2)];
	          delete data.value2;
	        }
	        var view = this.view;
	        group.set(function () {
	          return view.eachSelectedCell(function (cell) {
	            if (data.type == "any" && !data.inputMessage) view.validation.remove(cell.row, cell.column);else view.validation.add(cell.row, cell.column, data);
	          });
	        });
	        view.refresh();
	        this.close();
	      }
	    }
	  }]);
	}(Dialog);

	var vld = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DialogBox: DialogBox,
		action: action
	});

	var bases = [imt, imc, asw, rgs, dpd$1, flt$1, fmt$1, cnd, exp, lnk, pnt, cmt, siz, vld];
	function init$i(view) {
	  var dialogs = {};
	  var viewBases = view.config.readonly ? [cmt, exp, pnt, flt$1] : bases;
	  for (var i = 0; i < viewBases.length; i++) dialogs[viewBases[i].action] = new viewBases[i].DialogBox(view);
	  view.attachEvent("onCommand", function (action) {
	    var box = dialogs[action.id];
	    if (box) box.open(action);
	  });
	  view.attachEvent("onAction", function (id, values) {
	    //hide win when the external ui is removed
	    if (id == "add-view" && !values.newValue) {
	      var box = dialogs["add-image-top"];
	      if (box && box.viewid == values.row) {
	        box.close();
	      }
	    }
	  });
	}

	function init$h(view) {
	  view.attachEvent("onComponentInit", function () {
	    return view.$$("context").attachTo(view._table.$view);
	  });
	  var locale = webix.i18n.spreadsheet.menus;
	  var clipboard = [];
	  if (view.config.clipboard !== false) clipboard = [{
	    id: "cut",
	    value: locale.cut
	  }, {
	    id: "copy",
	    value: locale.copy
	  }, {
	    id: "paste",
	    value: locale.paste
	  }, {
	    id: "special-paste",
	    value: locale["special-paste"],
	    submenu: [{
	      id: "paste-values",
	      value: locale["paste-values"]
	    }, {
	      id: "paste-formulas",
	      value: locale["paste-formulas"]
	    }, {
	      id: "paste-styles",
	      value: locale["paste-styles"]
	    }, {
	      id: "paste-conditions",
	      value: locale["paste-conditions"]
	    }, {
	      id: "paste-validation",
	      value: locale["paste-validation"]
	    }]
	  }];
	  var lists = {
	    data: clipboard.concat([{
	      id: "clear",
	      value: locale["clear"],
	      submenu: getClearOperation()
	    }, {
	      id: "validation",
	      value: locale["validation"],
	      submenu: [{
	        id: "add-cell-validation",
	        value: locale["add-cell-validation"]
	      }, {
	        id: "remove-cell-validation",
	        value: locale["remove-cell-validation"]
	      }, {
	        id: "highlight-invalid-data",
	        value: locale["highlight-invalid-data"]
	      }, {
	        id: "remove-highlight-invalid-data",
	        value: locale["remove-highlight-invalid-data"]
	      }]
	    }, {
	      id: "lock-cell",
	      value: locale["lock-cell"]
	    }, {
	      $template: "Separator"
	    }, {
	      id: "sort",
	      value: locale.sort,
	      submenu: [{
	        id: "sort-asc",
	        value: locale["sort-asc"]
	      }, {
	        id: "sort-desc",
	        value: locale["sort-desc"]
	      }]
	    }, {
	      id: "create-filter",
	      value: locale["create-filter"]
	    }, {
	      $template: "Separator"
	    }, {
	      id: "add-range",
	      value: locale["add-range"]
	    }, {
	      id: "add-link",
	      value: locale["add-link"]
	    }, {
	      id: "add-comment",
	      value: locale["add-comment"]
	    }]),
	    column: getColumnOperation(view),
	    row: getRowOperation(view)
	  };
	  var context = {
	    view: "contextmenu",
	    id: "context",
	    padding: 0,
	    submenuConfig: {
	      padding: 0,
	      on: {
	        onBeforeShow: function () {
	          this.sizeToContent();
	        }
	      }
	    },
	    data: [],
	    on: {
	      onMenuItemClick: function (id) {
	        view.callEvent("onCommand", [this.getMenuItem(id)]);
	      },
	      onShow: function () {
	        delete view._context;
	      },
	      onBeforeShow: function (pos) {
	        view._context = true;
	        webix.callEvent("onClick", []);
	        var mode, trg;
	        trg = view._table.locate(pos);
	        if (!trg) return false;
	        mode = "";
	        if (trg.header && trg.column !== "rowId") {
	          if (!isColSelected(trg.column, view)) selectColumn(trg.column, view);
	          mode = "column";
	        } else if (trg.row) {
	          if (trg.column === "rowId") {
	            if (!isRowSelected(trg.row, view)) selectRow(trg.row, view);
	            mode = "row";
	          } else {
	            if (!isCellSelected(trg.row, trg.column, view)) view._table.addSelectArea(trg, trg);
	            mode = "data";
	          }
	        }
	        if (mode) {
	          var data = getMenuData(view, mode, lists[mode]);
	          if (data) {
	            this.clearAll();
	            this.parse(data);
	            this.sizeToContent();
	            webix.html.preventEvent(pos);
	            return true;
	          }
	        }
	        return false;
	      }
	    }
	  };
	  view.callEvent("onViewInit", ["context", context]);
	  var contextMenu = view.ui(context);
	  view._destroy_with_me.push(contextMenu);
	}
	function getMenuData(view, name, data) {
	  var ev = {
	    area: name,
	    data: data
	  };
	  if (view.callEvent("onContextMenuConfig", [ev])) return ev && ev.data;
	  return null;
	}

	function init$g(view) {
	  view.attachEvent("onCommand", function (action, start, end) {
	    if (action.id == "add" || action.id == "del") {
	      var area = view._table.getSelectArea();
	      if (area && !(start && end)) {
	        start = area.start;
	        end = area.end;
	      }
	      if (start && end) {
	        if (action.group == "column" && action.id == "add") updateMaxColumn(view.config.columnCount + (end.column - start.column) + 1);
	        group.set(function () {
	          process$1(action, start, end, view);
	        });
	      }
	    }
	  });
	  view.attachEvent("onUndo", function (action, row, column, value, dir, extra) {
	    if (action == "grid-change") {
	      var state = view._table.getScrollState();

	      //if we added rows/cols - regine can update cell references on other pages on undo
	      if (extra) {
	        if (!dir) view._mPage[row ? "removeRow" : "removeColumn"]((row || column) - 1, extra.count);else view._mPage[row ? "addRow" : "addColumn"]((row || column) - 1, extra.count);
	      }
	      //if removed - can't, so parse full data and show sheet
	      else state.sheet = view.getActiveSheet();
	      loadChangedData(view, value, state);
	    }
	  });
	}
	function process$1(action, start, end, view) {
	  var select = view._table.getSelectArea();
	  var state = view._table.getScrollState();
	  var del = action.id == "del";
	  var oldData = view.serialize({
	    sheets: del,
	    viewIds: true
	  });
	  var newData = webix.copy(oldData);
	  var data = {
	    value: oldData,
	    newValue: newData
	  };
	  if (!del) webix.extend(data, _defineProperty(_defineProperty({}, action.group, start[action.group]), "extra", {
	    count: end.row - start.row + 1
	  }));
	  var obj = del ? find(newData, function (sheet) {
	    return sheet.name == view.getActiveSheet();
	  }).content : newData;
	  var spanData = [];
	  var spans = obj.spans;
	  for (var i in spans) {
	    var span = adjustSpan(spans[i], action, start, end, view, obj.data, spanData);
	    if (span[2] <= 0 || span[3] <= 0) spans.splice(i, 1);
	  }
	  var values = getUpdateValues(action, start, end);
	  ignoreUndo$1(function () {
	    view.callEvent("onAction", ["before-grid-change", {
	      name: values.name,
	      inc: values.inc,
	      data: obj,
	      start: start
	    }]);
	  }, view);
	  if (action.group == "column") {
	    if (del) _delColumn(action, start, end, view);else _addColumn(action, start, end, view);
	  } else if (action.group == "row") {
	    if (del) _delRow(action, start, end, view);else _addRow(action, start, end, view);
	  }

	  // muon updates data and ranges
	  var updatedData = view.serialize();
	  obj.data = updatedData.data;
	  obj.ranges = updatedData.ranges;
	  spanData.forEach(function (item) {
	    obj.data.push(item);
	  });
	  view.callEvent("onAction", ["grid-change", data]);
	  ignoreUndo$1(function () {
	    loadChangedData(view, obj, state);
	  }, view);
	  if (select) {
	    select = fixSelectArea(select, view);
	    if (select) view.$$("cells").addSelectArea(select.start, select.end);
	  }
	}
	function fixSelectArea(select, view) {
	  var config = view.config;
	  var rows = config.rowCount;
	  var cols = config.columnCount;
	  if (select.start.row * 1 > rows) select.start.row = rows;
	  if (select.end.row * 1 > rows) select.end.row = rows;
	  if (select.start.column * 1 > cols) select.start.column = cols;
	  if (select.end.column * 1 > cols) select.end.column = cols;
	  if (view.isRowVisible(select.start.row) && view.isRowVisible(select.end.row) && view.isColumnVisible(select.start.column) && view.isColumnVisible(select.end.column)) return select;
	}
	function loadChangedData(view, data, state) {
	  // data loading resets undo history, and
	  // we need to preserve it
	  ignoreReset(function () {
	    view.$handleSelection = null;
	    view.parse(data);
	    if (state) {
	      if (state.sheet) view.showSheet(state.sheet);
	      view._table.scrollTo(state.x, state.y);
	    }
	  });
	}
	function getUpdateValues(action, start, end) {
	  var name = action.group,
	    inc = action.id == "add" ? 1 : action.id == "del" ? -1 : 0;
	  if (inc) {
	    // span support
	    if (name == "row") inc += inc * (end.row - start.row);
	    if (name == "column") inc += inc * (end.column - start.column);
	  }
	  return {
	    name: name,
	    inc: inc
	  };
	}
	function _addColumn(action, start, end, view) {
	  var count = end.column - start.column + 1;
	  view._mPage.addColumn(start.column - 1, count);
	  view.config.columnCount += count;
	  view.callEvent("onColumnOperation", [action.id, start.column, end.column, view.getActiveSheet()]);
	}
	function _delColumn(action, start, end, view) {
	  var count = end.column - start.column + 1;
	  if (view.config.columnCount === count) {
	    if (start.column == end.column) return; //deleting last column, ignoring
	    //prevent deleting all columns
	    end.column--;
	    count--;
	  }
	  view._mPage.removeColumn(start.column - 1, count);
	  view.config.columnCount -= count;
	  view.callEvent("onColumnOperation", [action.id, start.column, end.column, view.getActiveSheet()]);
	}
	function _addRow(action, start, end, view) {
	  var count = end.row - start.row + 1;
	  view._mPage.addRow(start.row - 1, count);
	  view.config.rowCount += count;
	  view.callEvent("onRowOperation", [action.id, start.row, end.row]);
	}
	function _delRow(action, start, end, view) {
	  var count = end.row - start.row + 1;
	  if (view.config.rowCount === count) {
	    if (start.row == end.row) return; //deleting last column, ignoring
	    //prevent deleting all columns
	    end.row--;
	    count--;
	  }
	  view._mPage.removeRow(start.row - 1, count);
	  view.config.rowCount -= count;
	  view.callEvent("onRowOperation", [action.id, start.row, end.row]);
	}

	var m1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$g
	});

	function init$f(view) {
	  var table = view._table;
	  view.attachEvent("onReset", function () {
	    return reset$3(view);
	  });
	  reset$3(view);
	  table.attachEvent("onBeforeEditStart", function (id) {
	    var col = this.getColumnConfig(id.column);
	    if (this._ssEditors[id.row]) {
	      var ed = this._ssEditors[id.row][id.column];
	      if (ed) {
	        webix.extend(col, ed, true);
	        webix.extend(col, {
	          row: view.getRow(id.row)
	        }, true);
	        if (ed.options) {
	          if (typeof ed.options == "string") col.options = rangeOptions(view, ed.options, {
	            unique: true,
	            order: true,
	            empty: ed.empty
	          });else if (webix.isArray(ed.options)) col.options = rangeOptions(view, ed.options, {
	            empty: ed.empty
	          });
	          if (col.collection) {
	            col.collection.clearAll();
	            col.collection.parse(col.options);
	          }
	        }
	      }
	    }
	  });

	  // update format if editor supports this feature
	  table.attachEvent("onBeforeEditStop", function (state, editor, ignore) {
	    if (!ignore && editor.getFormat) {
	      var value = editor.getValue();
	      var format = editor.getFormat(value);
	      group.set(function () {
	        view.setCellValue(editor.row, editor.column, value);
	        if (format) {
	          addFormat(view, editor.row, editor.column, getFormatSource(format));
	        } else removeFormat(view, editor.row, editor.column);
	      });
	      var cell = view.getSelectedId();
	      if (cell && cell.row == editor.row && cell.column == editor.column) {
	        format = format || "common";
	        format = isCustom(format) ? "custom" : format;
	        view.callEvent("onCommand", [{
	          id: "toolbar-update",
	          name: "format",
	          value: format
	        }]);
	      }
	    }
	  });
	  table.attachEvent("onAfterEditStop", function (state, editor) {
	    var col = this.getColumnConfig(editor.column);
	    col.editor = "text";
	    delete col.popup;
	    delete col.$popup;
	    delete col.row;
	  });
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    if (type == "dropdown") view.setCellEditor(row, column, value);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "dropdown") {
	      if (p.page == view.getActiveSheet()) setSpanCss(view, p.row, p.column, "ss_editor", p.newValue);
	    } else if (action == "before-grid-change") updatePosition$1(view, p.name, p.inc, p.data, p.start);
	  });
	}
	function reset$3(view) {
	  view._table._ssEditors = {};
	}
	function serialize$6(view, data) {
	  var row,
	    column,
	    tblEditors = view._table._ssEditors,
	    editors = [];
	  for (row in tblEditors) {
	    for (column in tblEditors[row]) editors.push([row, column, tblEditors[row][column]]);
	  }
	  data.editors = editors;
	}
	function load$5(view, data) {
	  var editors = data.editors;
	  if (editors) for (var i = 0; i < editors.length; i++) view.setCellEditor.apply(view, editors[i]);
	}
	function clearEditors(view, range, page) {
	  view._table.editStop();
	  eachRange(range, view, function (view, cell) {
	    if (view.getCellEditor(cell.row, cell.column, page)) view.setCellEditor(cell.row, cell.column, null, page);
	  });
	}
	function isEditor(view, row, column) {
	  var editor = view._table._ssEditors;
	  return editor[row] && !!editor[row][column];
	}

	// called on column/row add, delete, hide,show
	function updatePosition$1(view, name, inc, data, start) {
	  var editors = data.editors;
	  if (inc) {
	    // create new editors
	    for (var i = editors.length - 1; i >= 0; i--) {
	      var _editors$i = _slicedToArray(editors[i], 3),
	        row = _editors$i[0],
	        column = _editors$i[1],
	        editor = _editors$i[2];
	      if (name == "row" && row >= start.row || name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc) {
	            //delete editor mark if row was deleted
	            editors.splice(i, 1);
	            continue;
	          } else
	            //update mark position if upper row was deleted
	            editors[i][0] = row * 1 + inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            editors.splice(i, 1);
	            continue;
	          } else editors[i][1] = column * 1 + inc;
	        }
	        editor.options = changeRange(editor.options, name, inc, start);
	      }
	    }
	  }
	}
	function pasteDropdown(view, extra, row, col, cutted) {
	  var editor = extra.dropdown;
	  view.setCellEditor(row, col, editor);
	  if (cutted === 1) view.setCellEditor(extra.row, extra.col, {});
	}

	var m18 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		clearEditors: clearEditors,
		init: init$f,
		isEditor: isEditor,
		load: load$5,
		pasteDropdown: pasteDropdown,
		serialize: serialize$6
	});

	var styledata, clipdata, origin, cutted, updateFilters, specialPaste, context;
	function init$e(view) {
	  view.attachEvent("onSheetRename", function (name, newName) {
	    if (context && context.page == name && context.view == view) context.page = newName;
	  });
	  view.attachEvent("onSheetRemove", function (name) {
	    if (context && context.page == name && context.view == view) context = null;
	  });
	  var clipboard = view.config.clipboard;
	  var browserClipboard = navigator.clipboard;
	  if (clipboard === false) return;
	  webix.clipbuffer.init();
	  var buffer = document.querySelector(".webix_clipbuffer");
	  var keyC = 67; //keyboard 'c' code
	  var keyX = 88; //keyboard 'x' code
	  var grid = view.$$("cells");
	  grid.attachEvent("onSelectChange", function () {
	    return _sel_to_clip(view, buffer);
	  });
	  grid.attachEvent("onKeyPress", function (code, e) {
	    if ((code === keyC || code === keyX) && (e.ctrlKey || e.metaKey) && grid.getSelectedId()) {
	      cutted = (code === keyX) * 1;
	      setClipboard(view, buffer);
	    }
	  });
	  view.attachEvent("onCommand", function (action) {
	    if (action.id.indexOf("paste") != -1) {
	      specialPaste = action.id.split("-")[1];
	      if (browserClipboard && browserClipboard.readText) {
	        browserClipboard.readText().then(function (text) {
	          webix.clipbuffer.set(text);
	          _clip_to_sel(view, grid, buffer.value);
	        })["catch"](function () {
	          _clip_to_sel(view, grid, clipdata);
	        })["finally"](function () {
	          specialPaste = null;
	        });
	      } else {
	        _clip_to_sel(view, grid, clipdata);
	        specialPaste = null;
	      }
	    } else if (action.id == "copy" || action.id == "cut") {
	      cutted = (action.id == "cut") * 1;
	      setClipboard(view, buffer, browserClipboard, true);
	    }
	  });
	  view.attachEvent("onUndo", function (action, row, column, data) {
	    if (action == "paste") {
	      var state = grid.getScrollState();
	      var sel = grid.getSelectArea();
	      // data loading resets undo history, and
	      // we need to preserve it
	      ignoreReset(function () {
	        view.$handleSelection = null;
	        view.parse(data);
	        grid.addSelectArea(sel.start, sel.end);
	        grid.scrollTo(state.x, state.y);
	      });
	    }
	  });
	  if (!view.config.readonly) {
	    grid.attachEvent("onPaste", function (text) {
	      _clip_to_sel(view, grid, text);
	    });
	  }
	}
	function setClipboard(view, buffer, browserClipboard, menu) {
	  var grid = view.$$("cells");
	  origin = grid.getSelectArea();
	  styledata = _get_sel_style(view);
	  context = {
	    page: view.getActiveSheet(),
	    view: view
	  };
	  if (menu && browserClipboard && browserClipboard.writeText) browserClipboard.writeText(buffer.value);
	  clipdata = buffer.value;
	  if (cutted && Object.keys(grid._ssFilters).length !== 0) updateFilters = allFiltersInZone(grid._ssFilters, view.config.columnCount);
	}
	function _sel_to_clip(view, buffer) {
	  if (view._loading_data) return;
	  var grid = view.$$("cells");
	  if (grid.getSelectedId()) webix.delay(function () {
	    var data = [];
	    var origin = grid.getSelectArea();
	    for (var r = origin.start.row; r <= origin.end.row; r++) {
	      var row = [];
	      for (var c = origin.start.column; c <= origin.end.column; c++) row.push(_updateDelimiter(view.getCellValue(r, c, false), view.config));
	      data.push(row);
	    }
	    var clipdata = webix.csv.stringify(data, grid.config.delimiter);
	    if (grid.getEditor()) {
	      buffer.value = clipdata;
	    } else {
	      buffer.focus();
	      webix.clipbuffer.set(clipdata);
	    }
	    webix.UIManager.setFocus(grid);
	  });
	}
	function _updateDelimiter(value, config) {
	  var format = getClipboardNumberFormat(config);
	  if (webix.rules.isNumber(value) && format) value = webix.Number.numToStr(format)(value);
	  return value;
	}
	function _clip_to_sel(view, grid, text) {
	  if (!text) text = "";
	  var leftTop = grid.getSelectArea();
	  if (!leftTop) return;
	  var start = leftTop.start;
	  var end = leftTop.end;
	  var fromSheet = text === clipdata;
	  var data = fromSheet ? styledata : webix.csv.parse(text, grid.config.delimiter);
	  if (!fromSheet) data = _changeDelimiter(data, view.config);
	  var translate = {
	    id: "move",
	    column: 0,
	    row: 0,
	    cut: cutted
	  };
	  var sameView = context && context.view == view;
	  if (specialPaste || !fromSheet) {
	    cutted = 0;
	    updateFilters = 0;
	  }
	  var oldData = view.serialize();
	  ignoreUndo$1(function () {
	    var dataRowCount = data.length;
	    var dataColCount = data[0].length;
	    var colCount = end.column - start.column + 1;
	    var rowCount = end.row - start.row + 1;
	    _add_row_col(view, start, rowCount, data);
	    if (fromSheet) {
	      translate.column = start.column - origin.start.column;
	      translate.row = start.row - origin.start.row;
	      if (updateFilters) {
	        var sel = grid.getSelectArea();
	        view.removeFilters();
	        grid.addSelectArea(sel.start, sel.end);
	      }
	      var mode = !cutted && !updateFilters && (rowCount > dataRowCount || colCount > dataColCount) ? 2 : 0;
	      if (specialPaste != "conditions") {
	        if (cutted == 1) {
	          if (sameView) {
	            view._mData.getCopyManager().move(view._mPage.cellID(start.row - 1, start.column - 1), view._mData.getStore().getMeta().$clipboard);
	          }
	          if (context && !context.view.$destructed) context.view.groupUndo(function () {
	            for (var row = origin.start.row; row <= origin.end.row; row++) {
	              for (var column = origin.start.column; column <= origin.end.column; column++) {
	                context.view.setCellValue(row, column, null, context.page);
	                context.view.setStyle(row, column, null, context.page);
	              }
	            }
	          });
	        } else if (sameView) {
	          var handler;
	          if (specialPaste) handler = function (a, b) {
	            switch (specialPaste) {
	              case "formulas":
	                return webix.extend(a, {
	                  value: b.formula || b.value
	                }, true);
	              case "styles":
	                return webix.extend(a, {
	                  style: b.style,
	                  format: b.format
	                }, true);
	              case "values":
	                return webix.extend(a, {
	                  value: b.value
	                }, true);
	              case "validation":
	                return webix.extend(a, {
	                  validation: b.validation
	                }, true);
	            }
	          };
	          view._mData.getCopyManager().paste(view._mPage.cellID(start.row - 1, start.column - 1), view._mPage.cellID(Math.max(start.row + origin.end.row - origin.start.row, end.row) - 1, Math.max(start.column + origin.end.column - origin.start.column, end.column) - 1), view._mData.getStore().getMeta().$clipboard, mode, handler);
	        }
	      }
	      if (mode == 2) {
	        for (var r = 0, ri = 0; r < Math.max(rowCount, dataRowCount); r++, ri++) {
	          if (ri == data.length) ri = 0;
	          for (var _c = 0, _ci = 0; _c < Math.max(colCount, dataColCount); _c++, _ci++) {
	            if (_ci == data[0].length) _ci = 0;
	            var subtrans = {
	              id: "move",
	              column: translate.column + Math.floor(_c / dataColCount) * dataColCount,
	              row: translate.row + Math.floor(r / dataRowCount) * dataRowCount,
	              cut: cutted
	            };
	            _clipboardToTable(view, start.row + r, start.column + _c, data[ri][_ci], subtrans);
	          }
	        }
	      } else {
	        grid.mapCells(start.row, start.column, dataRowCount, null, function (value, row, col, row_ind, col_ind) {
	          if (data[row_ind] && data[row_ind].length > col_ind) {
	            var cdata = data[row_ind][col_ind];
	            _clipboardToTable(view, row, col, cdata, translate);
	          }
	        }, true);
	      }
	      if (cutted == 1) {
	        //cut and cleared
	        cutted = 2;
	        updateFilters = false;
	      }
	    } else for (var _r = 0, _ri = 0; _r < Math.max(rowCount, dataRowCount); _r++, _ri++) {
	      if (_ri == data.length) _ri = 0;
	      for (var c = 0, ci = 0; c < Math.max(colCount, dataColCount); c++, ci++) {
	        if (ci == data[0].length) ci = 0;
	        view.setCellValue(start.row + _r, start.column + c, data[_ri][ci]);
	      }
	    }
	  }, view);
	  view.callEvent("onAction", ["paste", {
	    value: oldData,
	    newValue: view.serialize()
	  }]);
	  view.callEvent("onCommand", [{
	    id: "toolbar-update"
	  }]);
	  view.refresh();
	}
	function _clipboardToTable(view, row, col, cdata, translate) {
	  if (_typeof(cdata) === "object") {
	    var sameView = context && context.view == view;
	    if (!(sameView && context.page == view.getActiveSheet())) {
	      if (!sameView && (!specialPaste || specialPaste == "values" || specialPaste == "formulas")) view.setCellValue(row, col, cdata.math && specialPaste != "values" ? view._mData.getStore().transposeMath(cdata.math, translate.row, translate.column) : cdata.text);
	      if (cdata.style && cdata.style.props && (!specialPaste || specialPaste == "styles")) {
	        var style = view.addStyle(cdata.style.props);
	        view.setStyle(row, col, style);
	      }
	    }
	    var extra = cdata.extra;
	    if (extra) {
	      if (extra.condition && (!specialPaste || specialPaste == "conditions")) pasteCondition(view, extra, row, col, cutted);
	      if (extra.dropdown && !specialPaste) pasteDropdown(view, extra, row, col, cutted);
	      if (extra.filter && updateFilters) pasteFilter(view, extra, row, col, cutted, translate);
	      if (extra.validation && (!specialPaste || specialPaste == "validation")) pasteValidation(view, extra, row, col, cutted);
	    }
	    if (!specialPaste) pasteSpan(view, extra, row, col, cutted, translate);
	    view.saveCell(row, col, view.getActiveSheet());
	  }
	}
	function _get_sel_style(view) {
	  var data = [];
	  var cm = view._mData.getCopyManager();
	  cm.copy(view._mPage.cellID(origin.start.row - 1, origin.start.column - 1), view._mPage.cellID(origin.end.row - 1, origin.end.column - 1));
	  for (var r = origin.start.row; r <= origin.end.row; r++) {
	    var row = [];
	    for (var c = origin.start.column; c <= origin.end.column; c++) {
	      var math = view.getCellValue(r, c);
	      math = math && math[0] == "=" && math.length > 1 ? math : null;
	      var obj = {
	        text: view.getCellValue(r, c, false),
	        math: math,
	        style: view.getStyle(r, c)
	      };
	      var condition = view.conditions.get(r, c);
	      var editor = view.getCellEditor(r, c);
	      var filter = view.getCellFilter(r, c);
	      var span = view._table.getSpan(r, c);
	      var validation = view.validation.get(r, c);
	      if (editor || filter || condition || span || validation) {
	        var extra = {
	          row: r,
	          col: c
	        };
	        if (condition) extra.condition = condition;
	        if (editor) extra.dropdown = editor;
	        if (filter) extra.filter = filter;
	        if (span) extra.span = span;
	        if (validation) extra.validation = validation;
	        obj.extra = extra;
	      }
	      row.push(obj);
	    }
	    data.push(row);
	  }
	  return data;
	}
	function allFiltersInZone(extra, columnCount) {
	  var filters = Object.keys(extra);
	  var startRow = Math.min.apply(null, filters);
	  var endRow = Math.max.apply(null, filters);
	  var startCol = columnCount;
	  var endCol = 1;
	  for (var i = startRow; i <= endRow; i++) {
	    if (extra[i]) {
	      var columns = Object.keys(extra[i]);
	      startCol = Math.min(startCol, Math.min.apply(null, columns));
	      endCol = Math.max(endCol, Math.max.apply(null, columns));
	    }
	  }
	  if (origin.start.row <= startRow && origin.end.row >= endRow && origin.start.column <= startCol && origin.end.column >= endCol) return true;else return false;
	}
	//dynamically increase rows and columns according to pasted data size
	function _add_row_col(view, start, rowCount, data) {
	  var maxCol = start.column + data[0].length - 1;
	  var maxRow;
	  if (rowCount > data.length) {
	    var extraSpanRows = 0;
	    var lastRows = rowCount % data.length;
	    for (var r = 0; r < lastRows; r++) {
	      for (var c = 0; c < data[r].length; c++) {
	        if (data[r][c].extra && data[r][c].extra.span) {
	          var span = data[r][c].extra.span;
	          if (span[0] == origin.start.row + r && span[1] == origin.start.column + c) {
	            var extra = r + span[3] - lastRows;
	            if (extra > 0) extraSpanRows = Math.max(extra, extraSpanRows);
	          }
	        }
	      }
	    }
	    maxRow = start.row + rowCount + extraSpanRows - 1;
	  } else maxRow = start.row + data.length - 1;
	  if (maxRow > view.config.rowCount || maxCol > view.config.columnCount) {
	    var action = {
	      id: "add"
	    };
	    if (maxRow > view.config.rowCount) {
	      action.group = "row";
	      view.callEvent("onCommand", [action, {
	        row: view.config.rowCount + 1
	      }, {
	        row: maxRow
	      }]);
	    }
	    if (maxCol > view.config.columnCount) {
	      action.group = "column";
	      view.callEvent("onCommand", [action, {
	        column: view.config.columnCount + 1
	      }, {
	        column: maxCol
	      }]);
	    }
	  }
	}
	function _changeDelimiter(data, config) {
	  var format = getClipboardNumberFormat(config);
	  if (format) for (var i = 0; i < data.length; i++) for (var k = 0; k < data[i].length; k++) {
	    var record = webix.Number.parse(data[i][k], format);
	    if (webix.rules.isNumber(record)) data[i][k] = record;
	  }
	  return data;
	}
	function getClipboardNumberFormat(config) {
	  var format = config.clipboardNumberFormat;
	  if (!format && config.clipboardDecimalDelimiter)
	    // backward compatibility
	    format = {
	      decimalDelimiter: config.clipboardDecimalDelimiter,
	      decimalOptional: true
	    };
	  if (format) webix.extend(format, {
	    minusSign: webix.i18n.minusSign,
	    minusPosition: webix.i18n.minusPosition
	  });
	  return format;
	}

	var m6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$e
	});

	function init$d(view) {
	  view.attachEvent("onCommand", function (action) {
	    if (action.id == "show" || action.id == "hide") {
	      var sel = view._table.getSelectArea();
	      if (sel) process(action, webix.copy(sel.start), webix.copy(sel.end), view);
	    }
	  });
	  reset$2(view);
	  view.attachEvent("onUndo", function (action, row, column, value, direction) {
	    if ((action.id == "hide" || action.id == "show") && (action.group == "column" || action.group == "row")) {
	      var type = action.id;
	      if (!direction) type = type == "hide" ? "show" : "hide";
	      var obj = row || column;
	      process({
	        id: type,
	        group: action.group,
	        neighbors: action.neighbors
	      }, obj.start, obj.end, view, true);
	    }
	  });
	  view.attachEvent("onHardReset", function () {
	    return reset$2(view);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") _updatePosition(view, p.name, p.inc, p.data, p.start);
	  });
	}
	function reset$2(view, mode) {
	  if (mode) view["_hidden_" + mode + "_hash"] = {};else {
	    view._hidden_cols_hash = {};
	    view._hidden_rows_hash = {};
	    view.filterSpreadSheet();
	  }
	}
	function getIds(id) {
	  return webix.isArray(id) ? id : [id, id];
	}
	function isColumnVisible$1(view, column, page) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (table && table.hidden && table.hidden.column) return !find(table.hidden.column, function (c) {
	        return c == column;
	      });else return true;
	    }
	  } else return !view._hidden_cols_hash[column];
	}
	function setState(view, indexes, state, type, page) {
	  if (!indexes && (!page || page == view.getActiveSheet())) {
	    var sel = view.getSelectedId(true);
	    if (!sel.length) return;
	    indexes = [sel[0][type], sel[sel.length - 1][type]];
	  }
	  var ids = getIds(indexes);
	  if (state) (type == "row" ? _hideRow : _hideColumn)({
	    id: "hide",
	    group: type
	  }, _defineProperty({}, type, ids[0]), _defineProperty({}, type, ids[1]), view, false, page);else (type == "row" ? _showRow : _showColumn)({
	    id: "hide",
	    group: type
	  }, _defineProperty({}, type, ids[0]), _defineProperty({}, type, ids[1]), view, false, page);
	}
	function isRowVisible$1(view, row, page) {
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (table && table.hidden && table.hidden.row) return !find(table.hidden.row, function (r) {
	        return r == row;
	      });else return true;
	    }
	  } else return !view._hidden_rows_hash[row];
	}
	function serialize$5(view, data) {
	  var hrows = [];
	  var hcols = [];
	  for (var r in view._hidden_rows_hash) hrows.push(r);
	  for (var c in view._hidden_cols_hash) hcols.push(c);
	  if (hrows.length || hcols.length) data.table.hidden = {};
	  if (hrows.length) data.table.hidden.row = hrows;
	  if (hcols.length) data.table.hidden.column = hcols;
	}
	function load$4(view, data) {
	  reset$2(view);
	  if (!webix.isUndefined(data.table) && !webix.isUndefined(data.table.hidden)) {
	    var hidden = data.table.hidden;
	    if (hidden.row && hidden.row.length) {
	      for (var r = 0; r < hidden.row.length; r++) _hideRow({
	        id: "hide",
	        group: "row"
	      }, {
	        row: hidden.row[r]
	      }, {
	        row: hidden.row[r]
	      }, view, true);
	    }
	    if (hidden.column && hidden.column.length) {
	      for (var c = 0; c < hidden.column.length; c++) _hideColumn({
	        id: "hide",
	        group: "column"
	      }, {
	        column: hidden.column[c]
	      }, {
	        column: hidden.column[c]
	      }, view, true);
	    }
	  }
	}
	function process(action) {
	  if (action.group == "column") {
	    if (action.id == "show") _showColumn.apply(this, arguments);else if (action.id == "hide") _hideColumn.apply(this, arguments);
	  } else if (action.group == "row") {
	    if (action.id == "show") _showRow.apply(this, arguments);else if (action.id == "hide") _hideRow.apply(this, arguments);
	  }
	}
	function _showColumn(action, start, end, view, silent, page) {
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    var sel = grid.getSelectArea();
	    var hash = view._hidden_cols_hash;
	    if (action.neighbors) {
	      if (hash[start.column - 1]) while (hash[start.column - 1]) start.column--;else while (hash[end.column + 1]) end.column++;
	    }
	    group.set(function () {
	      for (var i = start.column; i <= end.column; i++) {
	        if (hash[i]) {
	          delete hash[i];
	          var cell = grid.getColumnConfig(i - 1 || "rowId").header[0];
	          cell.css = cell.css.replace("webix_ssheet_hide_column", "");
	          grid.showColumn(i);
	        }
	      }
	      var split = view._frozenColumns;
	      if (split && split >= start.column) {
	        view.freezeColumns(0); // remove freeze (split is equal with current frozen col)
	        view.freezeColumns(split); // if col was freezed on hidden column - move it
	      }
	      if (sel) grid.addSelectArea(sel.start, sel.end);
	    }, view);
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (table && table.hidden && table.hidden.column) {
	        var _loop = function (i) {
	          var index = findIndex(table.hidden.column, function (c) {
	            return c == i;
	          });
	          if (index != -1) table.hidden.column.splice(index, 1);
	        };
	        for (var i = start.column; i <= end.column; i++) {
	          _loop(i);
	        }
	      }
	    } else return;
	  }
	  if (!silent) view.callEvent("onColumnOperation", [action.id, start.column, end.column, page]);
	}
	function _showRow(action, start, end, view, silent, page) {
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    var sel = grid.getSelectArea();
	    var hash = view._hidden_rows_hash;
	    if (action.neighbors) {
	      if (hash[start.row - 1]) while (hash[start.row - 1]) start.row--;else while (hash[end.row + 1]) end.row++;
	    }
	    group.set(function () {
	      var split = view._frozenRows;
	      if (split) {
	        //Frozen rows ignore filtering applied to the datatable
	        view.freezeRows(0);
	      }
	      for (var i = start.row; i <= end.row; i++) {
	        if (hash[i]) {
	          delete hash[i];
	          if (i - 1 === 0) {
	            var cell = grid.getColumnConfig("rowId").header[0];
	            cell.css = cell.css.replace("webix_ssheet_hide_row", "");
	            grid.refreshColumns();
	          } else grid.removeCellCss(i - 1, "rowId", "webix_ssheet_hide_row");
	        }
	      }
	      view.filterSpreadSheet();
	      if (split) view.freezeRows(split);
	      if (sel) grid.addSelectArea(sel.start, sel.end);
	    }, view);
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (table && table.hidden && table.hidden.row) {
	        var _loop2 = function (i) {
	          var index = findIndex(table.hidden.row, function (c) {
	            return c == i;
	          });
	          if (index != -1) table.hidden.row.splice(index, 1);
	        };
	        for (var i = start.row; i <= end.row; i++) {
	          _loop2(i);
	        }
	      }
	    } else return;
	  }
	  if (!silent) view.callEvent("onRowOperation", [action.id, start.row, end.row, page]);
	}
	function _hideColumn(action, start, end, view, silent, page) {
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    var i = end.column;
	    view.$handleSelection = null;
	    grid.unselect();
	    if (end.column < 1 || start.column < 1) {
	      delete view._hidden_cols_hash[start.column];
	      return;
	    }
	    while (i >= start.column) {
	      if (grid.getColumnIndex(i) != -1) {
	        view._hidden_cols_hash[i] = i;
	        var cell = grid.getColumnConfig(i - 1 || "rowId").header[0];
	        cell.css = (cell.css || "") + " webix_ssheet_hide_column";
	        grid.hideColumn(i);
	      }
	      i--;
	    }
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (!table) table = sheet.content.table = {};
	      if (!table.hidden) table.hidden = {};
	      if (!table.hidden.rows) table.hidden.column = [];
	      var _loop3 = function (_i) {
	        if (!find(table.hidden.column, function (c) {
	          return c == _i;
	        })) table.hidden.column.push(_i);
	      };
	      for (var _i = start.column; _i <= end.column; _i++) {
	        _loop3(_i);
	      }
	    }
	  }
	  if (!silent) view.callEvent("onColumnOperation", [action.id, start.column, end.column, page]);
	}
	function _hideRow(action, start, end, view, silent, page) {
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    if (end.row < 1 || start.row < 1) {
	      delete view._hidden_rows_hash[start.row];
	      return;
	    }
	    var split = view._frozenRows;
	    if (split) {
	      //Frozen rows ignore filtering applied to the datatable
	      view.freezeRows(0);
	    }
	    var grid = view.$$("cells");
	    var i = end.row;
	    while (i >= start.row) {
	      view._hidden_rows_hash[i] = i;
	      if (i - 1 === 0) {
	        var cell = grid.getColumnConfig("rowId").header[0];
	        cell.css = (cell.css || "") + " webix_ssheet_hide_row";
	        grid.refreshColumns();
	      } else grid.addCellCss(i - 1, "rowId", "webix_ssheet_hide_row");
	      i--;
	    }
	    view.filterSpreadSheet();
	    if (split) view.freezeRows(split);
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      var table = sheet.content.table;
	      if (!table) table = sheet.content.table = {};
	      if (!table.hidden) table.hidden = {};
	      if (!table.hidden.row) table.hidden.row = [];
	      var _loop4 = function (_i2) {
	        if (!find(table.hidden.row, function (r) {
	          return r == _i2;
	        })) table.hidden.row.push(_i2);
	      };
	      for (var _i2 = start.row; _i2 <= end.row; _i2++) {
	        _loop4(_i2);
	      }
	    }
	  }
	  if (!silent) view.callEvent("onRowOperation", [action.id, start.row, end.row, page]);
	}
	function _updatePosition(view, name, inc, data, start) {
	  if (data.table && data.table.hidden && data.table.hidden[name] && data.table.hidden[name].length) {
	    reset$2(view, name == "column" ? "cols" : "rows");
	    var s = start[name];
	    var hidden = data.table.hidden[name];
	    for (var i = hidden.length - 1; i >= 0; i--) {
	      var hiddenIndex = hidden[i] * 1;
	      if (inc > 0 && hiddenIndex >= s) hidden[i] = inc + hiddenIndex;else if (inc < 0 && hiddenIndex >= s) {
	        if (hiddenIndex < s - inc) hidden.splice(i, 1);else hidden[i] = inc + hiddenIndex;
	      }
	    }
	  }
	}

	var m13 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$d,
		isColumnVisible: isColumnVisible$1,
		isRowVisible: isRowVisible$1,
		load: load$4,
		reset: reset$2,
		serialize: serialize$5,
		setState: setState
	});

	function init$c(view) {
	  var table = view._table;
	  var bs = 0;
	  table.attachEvent("onAreaDrag", function () {
	    return bs = new Date();
	  });
	  table.attachEvent("onBeforeAreaRemove", function () {
	    //[FIXME] currently we don't have enough info to know
	    //is user selects new area, and removing need to be blocked
	    //or is it some API which attempts to remove the area
	    if (view.$handleSelection && new Date() - bs < 500) return false;
	  });
	  table.attachEvent("onBeforeAreaAdd", function (area) {
	    //[FIXME] 
	    //block selection of row-id column
	    //temporary fix, we need to fire onBeforeBlockSelect when selection moves
	    //so the common onBeforeBlockSelect handler will block rowId selection
	    if (area.start.column == "rowId") return false;

	    //if we have an active editor, we need to close it on block selection
	    //ignore, when selecting the editor's cell
	    var editor = table.getEditor();
	    if (editor && (editor.row != area.start.row || editor.column != area.start.column || editor.row != area.start.row || editor.column != area.start.column)) table.editStop();
	    if (!view.$handleSelection) return true;
	    var blockStart = encode[area.start.column] + area.start.row;
	    var blockEnd = encode[area.end.column] + area.end.row;
	    var res = view.$handleSelection(area.start, area.end, blockStart, blockEnd);
	    if (res !== false) {
	      view.$handleSelection = null;
	      table.removeSelectArea();
	    }
	    return res;
	  });
	  table.attachEvent("onBeforeBlockSelect", function (start, end, finalStep) {
	    if (!view.config.readonly && finalStep && table.$handleStart) {
	      var oldSel = table.getSelectArea();
	      var oldStart = oldSel.start;
	      var oldEnd = oldSel.end;
	      var sr = start.row;
	      var er = end.row;
	      var sc = start.column;
	      var ec = end.column;
	      if (oldStart.row == sr && oldEnd.row > er) view.clearRange({
	        start: {
	          row: er + 1,
	          column: sc
	        },
	        end: {
	          row: oldEnd.row,
	          column: ec
	        }
	      }, {
	        values: true
	      });else if (oldStart.column == sc && oldEnd.column > ec) {
	        view.clearRange({
	          start: {
	            row: sr,
	            column: ec + 1
	          },
	          end: {
	            row: er,
	            column: oldEnd.column
	          }
	        }, {
	          values: true
	        });
	      } else {
	        var type;
	        if (sr != oldStart.row || er != oldEnd.row) type = "row";else if (sc != oldStart.column || ec != oldEnd.column) type = "column";
	        if (type) {
	          group.start();
	          var isRow = type == "row";
	          for (var i = isRow ? sc : sr; i <= (isRow ? ec : er); i++) {
	            var nums = [];
	            var border = [];
	            for (var j = oldStart[type]; j <= oldEnd[type]; j++) {
	              var _ref = type == "row" ? [j, i] : [i, j],
	                _ref2 = _slicedToArray(_ref, 2),
	                row = _ref2[0],
	                col = _ref2[1];
	              var value = view.getCellValue(row, col);
	              if (webix.rules.isNumber(value)) {
	                if (!border[0]) {
	                  border.firstValue = value;
	                  border[0] = border[1] = j;
	                } else {
	                  border[1] = j;
	                  if (webix.isUndefined(border.inc)) border.inc = value - border.firstValue;
	                }
	                nums[j] = border;
	              } else border = [];
	            }
	            var afterSel = oldStart[type] == (isRow ? sr : sc);
	            var _start = afterSel ? oldStart[type] : oldEnd[type];
	            var dir = afterSel ? 1 : -1;
	            for (var _j = afterSel ? oldEnd[type] + 1 : oldStart[type] - 1, index = 0, iteration = 1; afterSel ? _j <= (isRow ? er : ec) : _j >= (isRow ? sr : sc); afterSel ? _j++ : _j--, index++) {
	              if (index == oldEnd[type] - oldStart[type] + 1) {
	                iteration++;
	                index = 0;
	              }
	              var linkPos = _start + index * dir;
	              var _ref3 = isRow ? [linkPos, i] : [i, linkPos],
	                _ref4 = _slicedToArray(_ref3, 2),
	                linkRow = _ref4[0],
	                linkCol = _ref4[1];
	              var _value = view.getCellValue(linkRow, linkCol);
	              var num = nums[linkPos];
	              if (num) _value += (num.inc || 1) * (num[1] - num[0] + 1) * iteration * dir;else if (typeof _value == "string" && _value[0] == "=" && _value.length > 0) {
	                if (isRow) _value = view._mData.getStore().transposeMath(_value, _j - _start - index * dir, 0);else _value = view._mData.getStore().transposeMath(_value, 0, _j - _start - index * dir);
	              }
	              var _ref5 = isRow ? [_j, i] : [i, _j],
	                _ref6 = _slicedToArray(_ref5, 2),
	                _row = _ref6[0],
	                _col = _ref6[1];
	              view.setCellValue(_row, _col, _value);
	              view.setStyle(_row, _col, view.getStyle(linkRow, linkCol));
	              var condition = view.conditions.get(linkRow, linkCol);
	              if (condition) pasteCondition(view, {
	                condition: condition
	              }, _row, _col);else view.conditions.clear(_row, _col);
	            }
	          }
	          group.end();
	        }
	      }
	    }
	  });
	  webix.event(table.$view, "mousedown", function (e) {
	    if (view.$handleSelection) return webix.html.preventEvent(e);
	  });
	}

	var m9 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$c
	});

	function expandSelection(r, view) {
	  var maxY = view.config.rowCount;
	  var maxX = view.config.columnCount;
	  var table = view._table;
	  var nr1 = r.start.row,
	    nr2 = r.end.row,
	    nc1 = r.start.column,
	    nc2 = r.end.column;
	  for (var i = nr1 - 1; i > 0; i--) {
	    if (getValue(i, r.start.column, table)) nr1 = i;else break;
	  }
	  for (var _i = nr2 + 1; _i < maxY; _i++) {
	    if (getValue(_i, r.end.column, table)) nr2 = _i;else break;
	  }
	  for (var _i2 = nc1 - 1; _i2 > 0; _i2--) {
	    if (getValue(r.start.row, _i2, table)) nc1 = _i2;else break;
	  }
	  for (var _i3 = nc2 + 1; _i3 < maxX; _i3++) {
	    if (getValue(r.end.row, _i3, table)) nc2 = _i3;else break;
	  }
	  var newrange = {
	    start: {
	      row: nr1,
	      column: nc1
	    },
	    end: {
	      row: nr2,
	      column: nc2
	    }
	  };
	  if (nr1 != r.start.row || nr2 != r.end.row || nc1 != r.start.column || nc2 != r.end.column) {
	    view._table.addSelectArea(newrange.start, newrange.end);
	  }
	  return newrange;
	}
	function getValue(r, c, table) {
	  var value = table.getItem(r)[c];
	  if (value === undefined || value === "") {
	    return false;
	  } else {
	    return true;
	  }
	}

	function init$b(view) {
	  view.attachEvent("onCommand", function (cm) {
	    if (cm.id === "sort-asc" || cm.id === "sort-desc") sortRange$1(view, null, cm.id.replace("sort-", ""));
	  });
	}
	var sorters = {
	  "int": function (dir, key) {
	    return function (a, b) {
	      if (!b[key]) return -1;
	      if (!a[key]) return 1;
	      var c = parseFloat(a[key]) || dir * Infinity;
	      var d = parseFloat(b[key]) || dir * Infinity;
	      return (c > d ? 1 : c == d ? 0 : -1) * dir;
	    };
	  },
	  "str": function (dir, key) {
	    return function (a, b) {
	      if (!b[key]) return -1;
	      if (!a[key]) return 1;
	      var c = a[key].toString().toLowerCase();
	      var d = b[key].toString().toLowerCase();
	      return (c > d ? 1 : c == d ? 0 : -1) * dir;
	    };
	  }
	};
	function sortRange$1(view, range, dir) {
	  range = range || view._table.getSelectArea();
	  if (range) {
	    range = rangeObj(range, view);
	    var fullrange = range;
	    if (range.start.row === range.end.row) fullrange = expandSelection(range, view);
	    var key = view.getCellValue(range.start.row, range.start.column, false);
	    var type = isNaN(parseFloat(key)) ? "str" : "int";
	    dir = !dir || dir === "asc" ? 1 : -1;
	    group.set(function () {
	      return sort(fullrange, range.start.column, type, dir, view);
	    });
	  }
	}
	function sort(range, by, type, dir, view) {
	  for (var column = range.start.column; column <= range.end.column; column++) {
	    //get all selected column values
	    var values = [];
	    for (var row = range.start.row; row <= range.end.row; row++) {
	      if (view.isRowVisible(row)) {
	        var value = view.getCellValue(row, column, false);
	        var style = view.getStyle(row, column);
	        var math = view.getCellValue(row, column);
	        math = math && math[0] == "=" ? math : null;
	        var conditions = view.conditions.get(row, column);
	        if (conditions) _changeCondition("remove", row, column, conditions, null, view);
	        values.push({
	          value: value,
	          style: style,
	          math: math,
	          row: row,
	          conditions: conditions
	        });
	      }
	    }

	    //sort them
	    values.sort(sorters[type](dir, "value"));

	    //set new values to original column
	    for (var _row = range.start.row; _row <= range.end.row; _row++) {
	      if (view.isRowVisible(_row)) {
	        var element = values.shift();
	        view.setStyle(_row, column, element.style || null);
	        if (element.conditions) _changeCondition("update", _row, column, null, element.conditions, view);
	        if (!element.math) view.setCellValue(_row, column, element.value);else {
	          var newMath = view._mData.getStore().transposeMath(element.math, _row - element.row, 0);
	          view.setCellValue(_row, column, newMath);
	        }
	      }
	    }
	  }
	  view.refresh();
	}

	var m10 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$b,
		sortRange: sortRange$1
	});

	function updateSheetNames(view, formula, oldName, newName) {
	  if (formula.indexOf("!") == -1) return formula;
	  var stack = split(formula, view, true);
	  for (var i = 0; i < stack.length; i++) {
	    if (webix.isArray(stack[i])) {
	      var thisSheet = stack[i][0] === oldName;
	      var sheet = thisSheet ? newName : stack[i][0];
	      if (sheet.indexOf(" ") != -1) sheet = "'".concat(sheet, "'");
	      stack[i] = "".concat(sheet, "!").concat(stack[i][1]);
	    }
	  }
	  return stack.join("");
	}
	function isFormula(val) {
	  return typeof val == "string" && val[0] == "=";
	}
	function init$a(view) {
	  view.attachEvent("onSheetRename", function (name, newName) {
	    view._sheets.forEach(function (sheet) {
	      var activeSheet = sheet.name == view.getActiveSheet();
	      if (activeSheet) sheet.content = view.serialize(); //actual data

	      if (sheet.content.editors) {
	        sheet.content.editors.forEach(function (value) {
	          var options = value[2].options;
	          if (options) {
	            if (typeof options == "string") value[2].options = updateSheetNames(view, options, name, newName);else for (var i = 0; i < options.length; i++) {
	              var option = options[i];
	              if (typeof option == "string") {
	                if (isFormula(option)) options[i] = updateSheetNames(view, option, name, newName);
	              } else if (isFormula(option.id)) option.id = updateSheetNames(view, option.id, name, newName);
	            }
	          }
	        });
	      }
	      if (sheet.content.conditions) {
	        sheet.content.conditions.forEach(function (value) {
	          if (isFormula(value[3])) value[3] = updateSheetNames(view, value[3], name, newName);
	        });
	        if (activeSheet) {
	          view.conditions.clear();
	          view.conditions.parse(sheet.content.conditions);
	        }
	      }
	    });
	  });
	}

	var m16c = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$a
	});

	function init$9(view) {
	  view.attachEvent("onUndo", function (action, row, column, value) {
	    if (action == "gridlines-hide") hideGridlines$1(view, value);
	  });
	}
	function hideGridlines$1(view) {
	  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var page = arguments.length > 2 ? arguments[2] : undefined;
	  var oldState;
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    oldState = grid.$view.className.indexOf("webix_borderless") != -1;
	    if (state == "toggle") state = !oldState;
	    if (state != oldState) {
	      if (state) webix.html.addCss(grid.$view, "webix_borderless", true);else webix.html.removeCss(grid.$view, "webix_borderless");
	      view.callEvent("onCommand", [{
	        id: "toolbar-update",
	        name: "hide-gridlines",
	        value: state
	      }]);
	    }
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      if (!sheet.content.table) sheet.content.table = {
	        gridlines: 1
	      };
	      oldState = !sheet.content.table.gridlines;
	      if (state === "toggle") state = !oldState;
	      sheet.content.table.gridlines = state ? 0 : 1;
	    } else return;
	  }
	  if (state != oldState) view.callEvent("onAction", ["gridlines-hide", {
	    newValue: state,
	    value: oldState,
	    page: page
	  }]);
	}
	function serialize$4(view, data) {
	  data.table.gridlines = view.$$("cells").$view.className.indexOf("webix_borderless") != -1 ? 0 : 1;
	}
	function load$3(view, data) {
	  var mode = false;
	  if (!webix.isUndefined(data.table) && !webix.isUndefined(data.table.gridlines)) mode = !data.table.gridlines;
	  hideGridlines$1(view, mode);
	}

	var m29 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hideGridlines: hideGridlines$1,
		init: init$9,
		load: load$3,
		serialize: serialize$4
	});

	function init$8(view) {
	  view.attachEvent("onUndo", function (action, row, column, value) {
	    if (action == "header-hide") {
	      hideHeaders$1(view, value);
	    }
	  });
	}
	function hideHeaders$1(view, state, page) {
	  var oldState;
	  page = page || view.getActiveSheet();
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    var _oldState = !grid.config.header;
	    if (state == "toggle") state = !_oldState;
	    if (state != _oldState) {
	      grid.config.header = !state;
	      view.callEvent("onCommand", [{
	        id: "toolbar-update",
	        name: "hide-headers",
	        value: state
	      }]);
	      var firstVisible = grid.isColumnVisible("rowId");
	      if (firstVisible && state || !firstVisible && !state) grid.hideColumn("rowId", {}, true, !!state);
	      grid.refreshColumns();
	    }
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      if (!sheet.content.table) sheet.content.table = {
	        headers: 1
	      };
	      oldState = !sheet.content.table.headers;
	      if (state === "toggle") state = !oldState;
	      sheet.content.table.headers = state ? 0 : 1;
	    } else return;
	  }
	  if (state != oldState) view.callEvent("onAction", ["header-hide", {
	    newValue: state,
	    value: oldState,
	    page: page
	  }]);
	}
	function serialize$3(view, data) {
	  data.table.headers = view.$$("cells").config.header ? 1 : 0;
	}
	function load$2(view, data) {
	  var mode;
	  if (data.table && !webix.isUndefined(data.table.headers)) mode = !data.table.headers;
	  hideHeaders$1(view, mode);
	}

	var m28 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hideHeaders: hideHeaders$1,
		init: init$8,
		load: load$2,
		serialize: serialize$3
	});

	function init$7(view) {
	  view.comments = {
	    get: function (row, column, page) {
	      return getComment(view, row, column, page);
	    },
	    add: function (row, column, comment, page) {
	      commentCell(view, row, column, comment, false, page);
	    },
	    remove: function (row, column, page) {
	      removeComment(view, row, column, false, page);
	    },
	    _activeComment: {},
	    _pull: {}
	  };
	  view.attachEvent("onReset", function () {
	    return reset$1(view);
	  });
	  view.attachEvent("onUndo", function (type, row, column, value) {
	    if (type === "comment") _undoComment(view, row, column, value);
	  });
	  view.attachEvent("onAction", function (action, p) {
	    if (action == "before-grid-change") updatePosition(view, p.name, p.inc, p.data, p.start);
	  });
	}
	function _undoComment(view, row, column, value) {
	  if (getComment(view, row, column)) removeComment(view, row, column, true);
	  if (value) commentCell(view, row, column, value, true);
	}
	function reset$1(view) {
	  view.comments._pull = {};
	}
	function removeComment(view, row, column, silent, page) {
	  page = page || view.getActiveSheet();
	  var old = getComment(view, row, column, page);
	  if (old) {
	    if (page != view.getActiveSheet()) {
	      var comments = getSheet(view, page).content.comments;
	      var index = findIndex(comments, function (comment) {
	        return comment[0] == row && comment[1] == column;
	      });
	      comments.splice(index, 1);
	    } else {
	      delete view.comments._pull[row][column];
	      view.$$("cells").updateItem(row, column);
	    }
	    if (!silent) view.callEvent("onAction", ["comment", {
	      row: row,
	      column: column,
	      newValue: null,
	      value: old,
	      page: page
	    }]);
	  }
	}
	function removeCommentsRange(view, range, page) {
	  group.set(function () {
	    eachRange(range, view, function (view, cell) {
	      if (getComment(view, cell.row, cell.column, page)) removeComment(view, cell.row, cell.column, false, page);
	    });
	    view.$$("cells").refresh();
	  });
	}
	function commentCell(view, row, column, comment, silent, page) {
	  page = page || view.getActiveSheet();
	  var oldValue = getComment(view, row, column, page) || null;
	  if (page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (!sheet.content.comments) sheet.content.comments = [];
	    if (oldValue) find(sheet.content.comments, function (comment) {
	      return comment[0] == row && comment[1] == column;
	    })[2] = comment;else sheet.content.comments.push([row, column, comment]);
	  } else {
	    if (typeof comment == "string") comment = comment.trim() ? comment : "";
	    view.comments._pull[row] = view.comments._pull[row] ? view.comments._pull[row] : {};
	    view.comments._pull[row][column] = comment;
	    view.$$("cells").addCellCss(row, column, "ssheet_commented_cell");
	  }
	  if (!silent) view.callEvent("onAction", ["comment", {
	    row: row,
	    column: column,
	    newValue: comment,
	    value: oldValue,
	    page: page
	  }]);
	}
	function serialize$2(view, data) {
	  var row,
	    column,
	    comments = [];
	  for (row in view.comments._pull) {
	    for (column in view.comments._pull[row]) if (view.comments._pull[row][column]) comments.push([row, column, view.comments._pull[row][column]]);
	  }
	  data.comments = comments;
	}
	function load$1(view, data) {
	  var i,
	    comments = data.comments;
	  if (comments) for (i = 0; i < comments.length; i++) commentCell(view, comments[i][0], comments[i][1], comments[i][2], true);
	}
	function updatePosition(view, name, inc, data, start) {
	  var comments = data.comments,
	    i = comments.length;
	  if (inc) {
	    while (i--) {
	      var _comments$i = _slicedToArray(comments[i], 2),
	        row = _comments$i[0],
	        column = _comments$i[1];
	      if (row && name == "row" && row >= start.row || column && name == "column" && column >= start.column) {
	        if (name == "row") {
	          if (row < start.row - inc)
	            //delete comment if row was deleted
	            comments.splice(i, 1);else
	            //update mark position if upper row was deleted
	            comments[i][0] = row * 1 + inc;
	        } else if (name == "column") {
	          if (column < start.column - inc) {
	            comments.splice(i, 1);
	          } else comments[i][1] = column * 1 + inc;
	        }
	      }
	    }
	  }
	}
	function getComment(view, row, column, page) {
	  var comment;
	  if (page && page != view.getActiveSheet()) {
	    var sheet = getSheet(view, page);
	    if (sheet && sheet.content.comments) {
	      comment = find(sheet.content.comments, function (comment) {
	        return comment[0] == row && comment[1] == column;
	      });
	      if (comment) comment = comment[2];
	    }
	  } else if (view.comments._pull[row] && view.comments._pull[row][column]) comment = view.comments._pull[row][column];
	  return comment || "";
	}

	var m26 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$7,
		load: load$1,
		removeCommentsRange: removeCommentsRange,
		serialize: serialize$2
	});

	function init$6(view) {
	  view.attachEvent("onUndo", function (action, row, column, value) {
	    if (action == "show-formulas") {
	      showFormulas$1(view, value);
	    }
	  });
	}
	function showFormulas$1(view, value, page) {
	  page = page || view.getActiveSheet();
	  var old;
	  if (page == view.getActiveSheet()) {
	    var grid = view.$$("cells");
	    old = grid.config.showFormulas;
	    if (value == "toggle") value = !old;
	    if (value != old) {
	      grid.config.showFormulas = value;
	      view.callEvent("onCommand", [{
	        id: "toolbar-update",
	        name: "show-formulas",
	        value: value
	      }]);
	      grid.refresh();
	    }
	  } else {
	    var sheet = getSheet(view, page);
	    if (sheet) {
	      if (!sheet.content.table) sheet.content.table = {
	        showFormulas: 1
	      };
	      old = sheet.content.table.showFormulas;
	      if (value == "toggle") value = !old;
	      sheet.content.table.showFormulas = value ? 1 : 0;
	    } else return;
	  }
	  if (value != old) view.callEvent("onAction", ["show-formulas", {
	    newValue: value,
	    value: old,
	    page: page
	  }]);
	}
	function serialize$1(view, data) {
	  data.table.showFormulas = view.$$("cells").config.showFormulas ? 1 : 0;
	}
	function load(view, data) {
	  var mode = false;
	  if (data.table && data.table.showFormulas) mode = data.table.showFormulas;
	  showFormulas$1(view, mode);
	}

	var m31 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$6,
		load: load,
		serialize: serialize$1,
		showFormulas: showFormulas$1
	});

	function init$5(view) {
	  var modules = [m29, m28, m14, m18, m21, m13, m26, m31];
	  view.attachEvent("onDataSerialize", function (data) {
	    for (var i = 0; i < modules.length; i++) {
	      if (modules[i].serialize) modules[i].serialize(view, data);
	    }
	  });
	  view.attachEvent("onDataParse", function (data) {
	    for (var i = 0; i < modules.length; i++) {
	      if (modules[i].load) modules[i].load(view, data);
	    }
	  });
	}

	var m19 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$5
	});

	var types = [".xls", ".xlt", ".xla", ".xlsx", ".xlsm", ".xltx", ".xltm", ".xlam", ".xlsb"];
	function init$4(view) {
	  var uploader;
	  if (window.XMLHttpRequest && new XMLHttpRequest().upload) {
	    uploader = webix.ui({
	      view: "uploader",
	      apiOnly: true,
	      accept: types.join()
	    });
	    uploader.attachEvent("onBeforeFileAdd", webix.bind(function (upload) {
	      if (types.indexOf("." + upload.type.toLowerCase()) > -1) {
	        view.reset();
	        if (!upload.file.options) upload.file.options = {};
	        webix.extend(upload.file.options, {
	          cellDates: false,
	          sheetStubs: view.config.sheetStubs
	        });
	        view.parse(upload.file, "excel");
	      }
	      return false;
	    }, this));
	    view._destroy_with_me.push(uploader);
	  }
	  view.attachEvent("onCommand", function (obj) {
	    if (obj.id === "excel-import") startImport(view, uploader);
	  });
	}
	function startImport(view, uploader) {
	  if (!uploader) view.alert(webix.i18n.spreadsheet.labels["import-not-support"]);else webix.delay(function () {
	    return uploader.fileDialog();
	  });
	}

	var m20 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$4
	});

	function init$3(view) {
	  var table = view._table;
	  view.$exportView = function (options) {
	    var pdf = options.export_mode == "pdf";
	    var excel = options.export_mode == "excel";
	    var defaultOptions = {
	      stubCells: true,
	      header: false,
	      footer: false,
	      heights: true,
	      rawValues: !pdf,
	      filterHTML: true,
	      spans: true,
	      styles: true,
	      math: !pdf,
	      hidden: excel,
	      xCorrection: table.config.header || options.hidden ? 1 : 0,
	      ignore: {
	        rowId: true
	      },
	      conditions: true
	    };
	    webix.extend(options, defaultOptions);
	    if (excel || pdf) return _exportView(view, options);else return table;
	  };
	  table.$getExportValue = function (row, column, options) {
	    var value = view.getCellValue(row, column, options.math);
	    var mode = options.export_mode;
	    var math = options.math && value[0] == "=" && value.length > 1;
	    if ((mode == "pdf" || mode == "csv") && !math && !options.rawValues) value = getRenderedValue(view, row, column);else if (mode == "excel" && math) {
	      if (/^=(image|sparkline)\(/i.test(value)) value = "";else {
	        var id = view._mPage.cellID(row - 1, column - 1);
	        var arrayRowEnd, arrayColEnd, ref;
	        for (var r = row + 1; r <= view.config.rowCount; r++) {
	          var cell = view._mPage.getCell(r - 1, column - 1);
	          if (cell && cell.source === id) arrayRowEnd = r;else break;
	        }
	        for (var c = column + 1; c <= view.config.columnCount; c++) {
	          var _cell = view._mPage.getCell(row - 1, c - 1);
	          if (_cell && _cell.source === id) arrayColEnd = c;else break;
	        }
	        if (arrayColEnd || arrayRowEnd) ref = toRange(row, column, arrayRowEnd || row, arrayColEnd || column);
	        var cellValue = view.getCellValue(row, column, false);
	        if (/^=(checkbox|radio)\(/i.test(value)) value = cellValue ? "=TRUE()" : "=FALSE()";
	        value = {
	          value: /^=hyperlink\(/i.test(value) ? value.split("\"")[3] : cellValue,
	          formula: value,
	          ref: ref
	        };
	      }
	    }
	    return value;
	  };
	}
	function _exportView(view, options) {
	  var _arguments = arguments,
	    _this = this;
	  var excel = options.export_mode == "excel";
	  if (options.sheets === true) options.sheets = view._sheets.map(function (s) {
	    return s.name;
	  });else if (!options.sheets || !options.sheets.length) options.sheets = [view._activeSheet];else if (typeof options.sheets == "string") options.sheets = [options.sheets];
	  if (!excel) options.sheets = options.sheets.filter(function (sheet) {
	    return isVisible(view, sheet);
	  });else if (view._sheets.length != options.sheets.length) {
	    for (var i = 0; i < view._sheets.length; i++) {
	      //add veryHidden sheets in any case
	      var sheet = view._sheets[i];
	      if (sheet.state == "veryHidden" && options.sheets.indexOf(sheet.name) == -1) options.sheets.push(sheet.name);
	    }
	  }
	  options.dataOnly = true;
	  var data = [];
	  var active = view._activeSheet;
	  var _loop = function (_i) {
	    var sheet = options.sheets[_i];
	    var id = sheet.id || sheet;
	    view.showSheet(id);
	    var oldZoom = view._zoom;
	    view.ignoreUndo(function () {
	      return view.zoom(1);
	    });
	    if (options.hidden) options.xCorrection = 1;
	    var sheetOptions = sheet.options ? webix.extend(sheet.options, options) : webix.copy(options);
	    if (id != active) sheetOptions._hidden = true;
	    if (!sheetOptions.name) sheetOptions.name = id;
	    var pdfTable = !excel && sheetOptions.display != "image";
	    var serialized = view.serialize();
	    var _getDimension = getDimension(serialized.data, serialized.spans, 0, 0),
	      _getDimension2 = _slicedToArray(_getDimension, 2),
	      rows = _getDimension2[0],
	      cols = _getDimension2[1];
	    if (!excel) {
	      if (webix.isUndefined(sheetOptions.textBefore)) sheetOptions.textBefore = sheetOptions.name;
	      if (pdfTable) {
	        sheetOptions.ignore = sheetOptions.ignore || {};
	        for (var _i2 = cols + 1; _i2 <= view.config.columnCount; _i2++) {
	          sheetOptions.ignore[_i2] = true;
	        }
	        var filter = sheetOptions.filter || function () {
	          return true;
	        };
	        sheetOptions.filter = function (obj) {
	          return obj.id <= rows && filter.apply(_this, _arguments);
	        };
	      }
	    }
	    var sheetData = webix[excel ? "toExcel" : "toPDF"](view._table, sheetOptions);
	    if (excel) sheetData[0].state = getSheet(view, id).state || "visible";
	    if (pdfTable && sheetData[0].scheme.length == 0) return 1; // continue
	    if ((excel || pdfTable) && sheetOptions.styles) {
	      var styles = sheetData[0].styles = _getStyles$1(view, sheetOptions, excel, rows, cols);
	      if (pdfTable) _updatePdfData(styles, sheetData, sheetOptions, view, serialized);
	    }
	    data = data.concat(sheetData);
	    if (excel) {
	      data[_i].ranges = [];
	      view.ranges.serialize(id).forEach(function (range) {
	        var ref = range[1].split("!");
	        data[_i].ranges.push({
	          Sheet: range[2] ? null : _i,
	          Name: range[0],
	          Ref: ref[0] + "!" + ref[1].replace(/[0-9]+|[A-Z]+/gi, function (match) {
	            return "$".concat(match);
	          })
	        });
	      });
	    } else {
	      if (options.autowidth) getAutowidth(sheetOptions, options);
	    }
	    view.ignoreUndo(function () {
	      return view.zoom(oldZoom);
	    });
	  };
	  for (var _i = 0; _i < options.sheets.length; _i++) {
	    if (_loop(_i)) continue;
	  }
	  view.showSheet(active);
	  delete options.dataOnly;
	  return data;
	}
	function _updatePdfData(styles, sheetData, sheetOptions, view, serialized) {
	  var header = sheetOptions.header ? 1 : 0;
	  if (sheetOptions.spans) {
	    var spans = serialized.spans.sort(function (a, b) {
	      return a[1] < b[1] ? 1 : a[1] > b[1] ? -1 : 0;
	    });
	    for (var i = 0; i < spans.length; i++) {
	      if (spans[i][2] > 1) {
	        var row = spans[i][0] - 1 + header,
	          // zero-based row position
	          col = spans[i][1] - 1,
	          // zero-based col position
	          cols = spans[i][2];
	        if (styles[row] && styles[row][col]) {
	          styles[row][col].colspan = cols;
	          // if colspan, then remove merged cells (else PDFJS will shift columns)
	          var rowData = sheetData[0].exportData[row - header];
	          if (rowData) {
	            // remove merged cell values
	            rowData.splice(col + 1, cols - 1);
	          }
	          var style = Object.values(styles[row]);
	          style.splice(col + 1, cols - 1); // remove merged cell styles
	          styles[row] = style;
	        }
	      }
	    }
	  }
	  var data = sheetData[0].exportData;
	  for (var r = 0; r < data.length; r++) {
	    for (var c = 0; c < data[r].length; c++) {
	      var height = view.$$("cells").config.rowHeight;
	      if (sheetOptions.heights && serialized.sizes.length) {
	        for (var s = 0; s < serialized.sizes.length; s++) {
	          var rowSize = serialized.sizes[s][0];
	          if (rowSize && rowSize == r + 1) {
	            height = serialized.sizes[s][2];
	            break;
	          }
	        }
	      }
	      var cellStyle = styles[r + header][c];
	      var align = cellStyle.vertAlign;
	      var pad = height * 0.75 - cellStyle.fontSize; // available px for padding in top & bottom
	      cellStyle.paddingTop = align == "top" ? 0 : align == "bottom" ? pad : pad / 2;
	      cellStyle.paddingBottom = align == "bottom" ? 0 : align == "top" ? pad : pad / 2;
	    }
	  }
	}
	function getAutowidth(view, options) {
	  var prop = options.orientation && options.orientation == "landscape" ? "height" : "width";
	  var width;
	  if (view.$width) width = view.$width;else
	    //'view' can be local settings and we need to compare them with common ones
	    width = view[prop];
	  options[prop] = Math.max(options[prop] || 0, width || 0);
	}
	function _safeColor$1(str) {
	  str = str.substring(1);
	  if (str.length === 3) str = str + str;
	  return str;
	}
	function _getDefaults(options) {
	  var d = defaultStyles;
	  if (options.export_mode == "excel") return {
	    font: {
	      sz: d["font-size"] * 0.75,
	      name: d["font-family"].replace(/'|,.*$/g, "")
	      //we do not export default color, but it is the right place to do it
	    },
	    alignment: {
	      horizontal: d["text-align"],
	      vertical: d["vertical-align"] == "middle" ? "center" : d["vertical-align"],
	      wrapText: d["white-space"] != "nowrap"
	    }
	  };else return {
	    fontSize: d["font-size"] * 0.75,
	    //we do not export default color, but it is the right place to do it
	    textAlign: d["text-align"],
	    whiteSpace: d["white-space"] != "nowrap"
	  };
	}
	function _getStyles$1(view, options, excel, rows, cols) {
	  view.compactStyles();
	  var result = [];
	  var cached = {};
	  var cachedConditions = {};
	  var defaults = _getDefaults(options);
	  if (excel && options.docHeader) result = result.concat([{
	    0: _getDocStyle(options.docHeader.css)
	  }, {}]);
	  if (options.header) result.push({});
	  var delta = result.length;
	  var grid = view.$$("cells");
	  var rIndex = delta;
	  grid.eachRow(function (row) {
	    if (row > rows) return;
	    var cIndex = 0;
	    grid.eachColumn(function (col) {
	      if (cIndex > cols) return;
	      if (cIndex >= options.xCorrection) {
	        var css = getStyle$1(view, {
	          row: row,
	          column: col
	        }, null, true);
	        var index = cIndex - options.xCorrection;
	        result[rIndex] = result[rIndex] || {};
	        var styles;
	        if (css) {
	          if (cached[css.id]) styles = webix.copy(cached[css.id]);else {
	            styles = _getCellStyle(css.text, excel, options);
	            for (var name in defaults) {
	              if (excel) webix.extend(styles[name], defaults[name]);else if (!styles[name]) styles[name] = defaults[name];
	            }
	            cached[css.id] = webix.copy(styles);
	          }
	        } else styles = webix.copy(defaults);
	        if (options.conditions) {
	          //not real excel condition, save only bg and color (sheetJS doesn't support)
	          var condition = _getCellConditions(view, row, col, cachedConditions);
	          if (condition) _updateStyleCondition(styles, condition, excel);
	        }
	        result[rIndex][index] = styles;
	        var type;
	        if (options.math) {
	          var math = view.getCellValue(row, col);
	          if (typeof math == "string" && math[0] == "=" && math.length > 1) {
	            var value = view.getCellValue(row, col, false);
	            if (isNaN(value)) type = "string";
	          }
	        }
	        result[rIndex][index].type = type || getType(view, row, col);
	      }
	      cIndex++;
	    }, options.hidden);
	    rIndex++;
	  }, options.hidden);
	  if (excel && options.docFooter) result = result.concat([{}, {
	    0: _getDocStyle(options.docFooter.css)
	  }]);
	  return result;
	}
	function _getCellStyle(styles, excel, options) {
	  var str = styles.split(";");
	  var stl = {};
	  if (excel) stl = {
	    font: {},
	    alignment: {},
	    border: {}
	  };
	  for (var s = 0; s < str.length; s++) {
	    if (str[s]) {
	      if (excel) _getExcelCellStyle(stl, str, s);else _getPdfCellStyle(stl, str, s, options.table);
	    }
	  }
	  return stl;
	}
	function _getCellConditions(view, r, c, cached) {
	  var rendered = getRenderedValue(view, r, c);
	  var css = getConditionCss(view, r, c, rendered);
	  if (css) {
	    if (cached[css]) return cached[css];
	    var el = webix.html.create("div", {
	      "class": css
	    });
	    document.body.appendChild(el);
	    var computed = window.getComputedStyle(el);
	    var bg = computed.backgroundColor;
	    var color = computed.color;
	    document.body.removeChild(el);
	    cached[css] = [bg, color];
	    return cached[css];
	  }
	}
	function _updateStyleCondition(stl, condition, excel) {
	  var _condition$map = condition.map(function (val) {
	      return webix.color.rgbToHex(val);
	    }),
	    _condition$map2 = _slicedToArray(_condition$map, 2),
	    bg = _condition$map2[0],
	    color = _condition$map2[1];
	  if (excel) {
	    stl.fill = {
	      fgColor: {
	        rgb: bg
	      }
	    };
	    stl.font.color = {
	      rgb: color
	    };
	  } else {
	    stl.backgroundColor = bg;
	    stl.color = color;
	  }
	}
	function _getExcelCellStyle(stl, str, s) {
	  switch (style_names[s]) {
	    case "color":
	      stl.font.color = {
	        rgb: _safeColor$1(str[s])
	      };
	      break;
	    case "background":
	      {
	        var fill = _safeColor$1(str[s]);
	        if (fill && fill.toLowerCase() !== "ffffff") stl.fill = {
	          fgColor: {
	            rgb: fill
	          }
	        };
	        break;
	      }
	    case "text-align":
	      stl.alignment.horizontal = str[s];
	      break;
	    case "font-family":
	      stl.font.name = str[s].replace(/'|,.*$/g, ""); // cut off fallback font
	      break;
	    case "font-size":
	      stl.font.sz = str[s].replace("px", "") * 0.75; //px to pt conversion
	      break;
	    case "font-style":
	      stl.font.italic = str[s] == "italic";
	      break;
	    case "underline":
	      stl.font.underline = str[s] == "underline";
	      break;
	    case "strike":
	      stl.font.strike = str[s] == "strike";
	      break;
	    case "font-weight":
	      stl.font.bold = str[s] == "bold";
	      break;
	    case "vertical-align":
	      stl.alignment.vertical = str[s] == "middle" ? "center" : str[s];
	      break;
	    case "wrap":
	      stl.alignment.wrapText = str[s] == "wrap";
	      break;
	    case "borders":
	      break;
	    case "format":
	      stl.format = getFormatSource(str[s], true) || "";
	      break;
	    case "border-right":
	    case "border-bottom":
	    case "border-left":
	    case "border-top":
	      stl.border[style_names[s].split("-")[1]] = getBorderStyles(str[s], true);
	      break;
	    case "indent":
	      stl.alignment.indent = str[s];
	      break;
	  }
	}
	function _getPdfCellStyle(stl, str, s, table) {
	  switch (style_names[s]) {
	    case "color":
	      stl.color = _safeColor$1(str[s]);
	      break;
	    case "background":
	      stl.backgroundColor = _safeColor$1(str[s]);
	      break;
	    case "text-align":
	      stl.textAlign = str[s];
	      break;
	    case "font-family":
	      break;
	    case "font-size":
	      stl.fontSize = str[s].replace("px", "") * 0.75;
	      break;
	    case "font-style":
	      stl.italic = str[s] == "italic";
	      break;
	    case "underline":
	      stl.underline = str[s] == "underline";
	      break;
	    case "strike":
	      stl.strikethrough = str[s] == "strike";
	      break;
	    case "font-weight":
	      stl.bold = str[s] == "bold";
	      break;
	    case "vertical-align":
	      stl.vertAlign = str[s]; // not supported in PDFJS, so simulate with lineHeight and paddingTop
	      break;
	    case "wrap":
	      stl.whiteSpace = str[s] != "nowrap";
	      break;
	    case "borders":
	      break;
	    case "format":
	      break;
	    case "border-right":
	    case "border-bottom":
	    case "border-left":
	    case "border-top":
	      {
	        var pos = style_names[s].split("-")[1];
	        stl["border".concat(pos[0].toUpperCase() + pos.substring(1), "Color")] = getBorderStyles(str[s]);
	        break;
	      }
	    case "indent":
	      if (str[s]) {
	        var name = "padding".concat(str[2] == "right" ? "Right" : "Left");
	        var padding = table && table[name] ? table[name] : 10; // 10 - default padding value
	        stl[name] = padding + str[s] * 6;
	      }
	      break;
	  }
	}
	function getBorderStyles(val, excel) {
	  var _val$split = val.split(","),
	    _val$split2 = _slicedToArray(_val$split, 2),
	    color = _val$split2[0],
	    type = _val$split2[1];
	  if (excel) return {
	    color: {
	      rgb: _safeColor$1(color)
	    },
	    style: type
	  };else return _safeColor$1(color);
	}
	function _getDocStyle(css) {
	  if (!css) return {};
	  var str = [];
	  for (var i = 0; i < style_names.length; i++) str.push(css[style_names[i]] || "");
	  return _getCellStyle(str.join(";"), true);
	}

	var m23 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$3
	});

	function init$2(view) {
	  view._parseExcel = function (obj, driver) {
	    var options = obj.options || {};
	    options.math = view.config.math;
	    var full = {
	      sheets: []
	    };
	    var fmt = {
	      count: formatsCount,
	      cache: {}
	    };
	    for (var i = 0; i < obj.names.length; i++) {
	      options.name = obj.names[i];
	      full.sheets.push({
	        name: options.name,
	        state: obj.states[i],
	        content: _excel_to_data(driver.getSheet(obj, options), obj.ranges, i, fmt)
	      });
	    }
	    return full;
	  };
	  view._parseCsv = function (obj, driver) {
	    obj = driver.getRecords(obj);
	    var dataObj = webix.copy(obj);
	    var data = [];
	    for (var i = 0; i < dataObj.length; i++) {
	      var item = dataObj[i].split(driver.cell);
	      for (var c = 0; c < item.length; c++) {
	        var row = i + 1,
	          column = c + 1;
	        data.push([row, column, item[c]]);
	      }
	    }
	    return {
	      data: data
	    };
	  };
	}
	function _excel_to_data(obj, ranges, index, fmt) {
	  var dataObj = webix.copy(obj.data);
	  var data = [];
	  var _loop = function (i) {
	    var _loop2 = function (c) {
	      var row = i + 1,
	        column = c + 1;
	      var val = dataObj[i][c];
	      if (obj.links.length) {
	        var link = find(obj.links, function (link) {
	          return link[0] == i && link[1] == c;
	        });
	        if (link) {
	          link = typeof link[2] == "string" && link[2][0] == "=" ? link[2].slice(1) : "\"".concat(link[2], "\"");
	          val = typeof val == "string" && val[0] == "=" ? val.slice(1) : "\"".concat(val, "\"");
	          val = "=HYPERLINK(".concat(link, ", ").concat(val, ")");
	        }
	      }
	      data.push([row, column, val]);
	    };
	    for (var c = 0; c < dataObj[0].length; c++) {
	      _loop2(c);
	    }
	  };
	  for (var i = 0; i < dataObj.length; i++) {
	    _loop(i);
	  }
	  obj.data = data;

	  //merged cells
	  if (obj.spans) {
	    for (var _i = 0; _i < obj.spans.length; _i++) {
	      obj.spans[_i][0]++;
	      obj.spans[_i][1]++;
	    }
	  }

	  //named ranges
	  if (ranges) {
	    for (var r = 0; r < ranges.length; r++) {
	      var sheetIndex = ranges[r].Sheet;
	      var book = webix.isUndefined(sheetIndex);
	      if (book || sheetIndex === index) {
	        obj.ranges = obj.ranges || [];
	        obj.ranges.push([ranges[r].Name.toUpperCase(), ranges[r].Ref.substring(ranges[r].Ref.indexOf("!") + 1).replace(/\$/g, ""), book]);
	      }
	    }
	  }

	  //cell styles
	  if (obj.styles) _getStyles(obj, fmt);
	  if (obj.types) _getTypes(obj);
	  if (obj.hidden) {
	    _getHidden(obj);
	  }

	  //column width and row height
	  if (obj.sizes) {
	    for (var _i2 = 0; _i2 < obj.sizes.length; _i2++) {
	      if (obj.sizes[_i2][0] == "column") obj.sizes[_i2] = [0, obj.sizes[_i2][1] + 1, obj.sizes[_i2][2]];else obj.sizes[_i2] = [obj.sizes[_i2][1] + 1, 0, obj.sizes[_i2][2]];
	    }
	  }
	  return obj;
	}

	//ARGB conversion
	function _safeColor(str) {
	  str = str || "000000";
	  if (str.length === 8) str = str.substring(2);
	  return "#" + str;
	}

	//only fonts that we support can be imported
	function _safeFont(str) {
	  var safe = defaultStyles["font-family"];
	  for (var i = 0; i < fontFamily.length; i++) {
	    if (fontFamily[i].value == str) {
	      safe = fontFamily[i].id;
	      break;
	    }
	  }
	  return safe;
	}
	function _getTypes(obj) {
	  obj.types.forEach(function (type) {
	    for (var i = 0; i < obj.data.length; i++) {
	      if (obj.data[i][0] === type[0] + 1 && obj.data[i][1] === type[1] + 1) {
	        obj.data[i][4] = type[2];
	        break;
	      }
	    }
	  });
	}
	function _getHidden(obj) {
	  var hidden = {
	    row: [],
	    column: []
	  };
	  for (var i = 0; i < obj.hidden.length; i++) {
	    var item = obj.hidden[i];
	    if (item[0] == "column") hidden.column.push(item[1] + 1);else hidden.row.push(item[1] + 1);
	  }
	  obj.table = {
	    hidden: hidden
	  };
	}
	function _getBorderStyles(pos, stl) {
	  pos = pos.replace("border-", "");
	  if (stl.border && stl.border[pos]) {
	    var border = stl.border[pos];
	    if (border.color) {
	      var color = _safeColor(border.color.rgb) || "";
	      var type = border.style || "";
	      return "".concat(color, ",").concat(type);
	    }
	  }
	  return "";
	}
	function _getStyles(obj, fmt) {
	  var stylescount = 1;
	  var styleshash = {},
	    styles = [],
	    formats = [];
	  for (var i = 0; i < obj.styles.length; i++) {
	    var str = [],
	      stl = obj.styles[i][2],
	      css = void 0;
	    var _loop3 = function () {
	      switch (style_names[s]) {
	        case "color":
	          str[s] = stl.font && stl.font.color ? _safeColor(stl.font.color.rgb) || "" : "";
	          break;
	        case "background":
	          str[s] = stl.fill && stl.fill.fgColor ? _safeColor(stl.fill.fgColor.rgb) || "" : "";
	          break;
	        case "text-align":
	          str[s] = (stl.alignment ? stl.alignment.horizontal : "") || defaultStyles["text-align"];
	          break;
	        case "font-family":
	          str[s] = stl.font && stl.font.name ? _safeFont(stl.font.name) : "";
	          break;
	        case "font-size":
	          str[s] = stl.font && stl.font.sz ? stl.font.sz / 0.75 + "px" || "" : ""; //pt to px conversion
	          break;
	        case "font-style":
	          str[s] = stl.font && stl.font.italic ? "italic" : "";
	          break;
	        case "underline":
	          str[s] = stl.font && stl.font.underline ? "underline" : "";
	          break;
	        case "strike":
	          str[s] = stl.font && stl.font.strike ? "strike" : "";
	          break;
	        case "font-weight":
	          str[s] = stl.font && stl.font.bold ? "bold" : "";
	          break;
	        case "vertical-align":
	          {
	            var va = stl.alignment ? stl.alignment.vertical || "" : "";
	            str[s] = (va == "center" ? "middle" : va) || defaultStyles["vertical-align"];
	            break;
	          }
	        case "wrap":
	          str[s] = stl.alignment && stl.alignment.wrapText ? "wrap" : "nowrap";
	          break;
	        case "borders":
	          str[s] = "";
	          break;
	        case "format":
	          {
	            var format = stl.numFmt;
	            var name = "";
	            if (format && format != "General") {
	              format = format.replaceAll("\\", "");
	              if (formatCache[format]) name = formatCache[format];else if (fmt.cache[format]) name = fmt.cache[format];else name = fmt.cache[format] = "fmt" + fmt.count++;
	              if (!find(formats, function (arr) {
	                return arr[0] == name;
	              })) formats.push([name, format]);
	            }
	            str[s] = name;
	            break;
	          }
	        case "border-right":
	        case "border-bottom":
	        case "border-left":
	        case "border-top":
	          str[s] = _getBorderStyles(style_names[s], stl);
	          break;
	        case "indent":
	          str[s] = stl.alignment && stl.alignment.indent ? stl.alignment.indent : "";
	          break;
	      }
	    };
	    for (var s = 0; s < style_names.length; s++) {
	      _loop3();
	    }
	    str = str.join(";");
	    css = styleshash[str] || "wss" + stylescount;
	    for (var d = 0; d < obj.data.length; d++) {
	      if (obj.data[d][0] === obj.styles[i][0] + 1 && obj.data[d][1] === obj.styles[i][1] + 1) {
	        obj.data[d][3] = css;
	        break;
	      }
	    }
	    if (!styleshash[str]) {
	      styles.push([css, str]);
	      styleshash[str] = css;
	      stylescount++;
	    }
	  }
	  obj.formats = formats;
	  obj.styles = styles;
	}

	var m24 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$2
	});

	function init$1(view) {
	  view.attachEvent("onCommand", function (action) {
	    switch (action.id) {
	      case "clear-value":
	        view.clearRange(null, {
	          values: true
	        });
	        break;
	      case "clear-style":
	        view.clearRange(null, {
	          styles: true
	        });
	        break;
	      case "clear-conditional-formats":
	        view.clearRange(null, {
	          conditions: true
	        });
	        break;
	      case "clear-dropdown-editors":
	        view.clearRange(null, {
	          editors: true
	        });
	        break;
	      case "clear-filters":
	        view.clearRange(null, {
	          filters: true
	        });
	        break;
	      case "clear-all":
	        group.set(function () {
	          view.clearRange(null, null);
	        });
	        break;
	      case "clear-comments":
	        view.clearRange(null, {
	          comments: true
	        });
	        break;
	    }
	  });
	}

	var m25 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		init: init$1
	});

	function operations(view) {
	  //order in some cases does matter
	  //resize must be applied after math, to size data by the result of math calculation
	  //types must be applied after state and data 
	  var all = [m32, m1, m2, m5, m6, m8, m9, m10, m11, m12, m13, m14, m16, m3, m8, m17, m16a, m16b, m16c, m18, m19, m4, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30, m31, m33];
	  for (var i = 0; i < all.length; i++) {
	    if (all[i].init) all[i].init(view);
	  }
	}

	/* row operations */

	function insertRow(row) {
	  callCommand(this, "add", "row", row);
	}
	function deleteRow(row) {
	  callCommand(this, "del", "row", row);
	}
	function setRowHeight(row, height, page) {
	  setSize(this, "row", row, height, page);
	}

	/* col operations */

	function insertColumn(column) {
	  callCommand(this, "add", "column", column);
	}
	function deleteColumn(column) {
	  callCommand(this, "del", "column", column);
	}
	function setColumnWidth(column, width, page) {
	  setSize(this, "column", column, width, page);
	}

	/* helpers */

	function getCells(view, id, group, page) {
	  if (!id) {
	    if (page && page != view.getActiveSheet()) return;
	    var area = view.$$("cells").getSelectArea();
	    if (area) id = [area.start[group], area.end[group]];
	  } else if (!webix.isArray(id)) {
	    id = [id, id];
	  }
	  return id;
	}
	function callCommand(view, name, group, id) {
	  var start = {},
	    end = {};
	  id = getCells(view, id, group);
	  if (!id) return;
	  start[group] = id[0];
	  end[group] = id[1];
	  view.callEvent("onCommand", [{
	    id: name,
	    group: group
	  }, start, end]);
	}
	function setSize(view, type, id, size, page) {
	  id = getCells(view, id, type, page);
	  if (!id) return;
	  var sheet;
	  if (page && page != view.getActiveSheet()) {
	    sheet = find(view._sheets, function (obj) {
	      return obj.name == page;
	    });
	    if (!sheet) return;
	  }
	  var grid = view.$$("cells");
	  group.set(function () {
	    var _loop = function (i) {
	        if (size == "auto") {
	          if (sheet) ; else (type == "row" ? adjustRow : adjustColumn)(i, view);
	        } else {
	          if (sheet) {
	            if (!sheet.content.sizes) sheet.content.sizes = [];
	            var oldSize = find(sheet.content.sizes, function (arr) {
	              return type == "row" ? arr[0] == i : arr[1] == i;
	            });
	            if (oldSize) {
	              if (size == oldSize[2]) return 0; // continue
	              else oldSize[2] = size;
	            } else {
	              if (type == "row") {
	                if (size == grid.config.columWidth) return 0; // continue
	              } else if (size == grid.config.rowHeight) return 0; // continue
	              var newSize = [0, 0, size];
	              newSize[type == "row" ? 0 : 1] = i;
	              sheet.content.sizes.push(newSize);
	            }
	            view.callEvent("onAction", [type + "-resize", _defineProperty(_defineProperty(_defineProperty({}, type, i), "value", size), "page", page)]);
	          } else {
	            size *= view._zoom;
	            grid[type == "row" ? "setRowHeight" : "setColumnWidth"](i, size);
	          }
	        }
	      },
	      _ret;
	    for (var i = id[0]; i <= id[1]; i++) {
	      _ret = _loop(i);
	      if (_ret === 0) continue;
	    }
	  });
	}

	var rco = /*#__PURE__*/Object.freeze({
		__proto__: null,
		deleteColumn: deleteColumn,
		deleteRow: deleteRow,
		insertColumn: insertColumn,
		insertRow: insertRow,
		setColumnWidth: setColumnWidth,
		setRowHeight: setRowHeight
	});

	function lockCell(row, column, state, page) {
	  lockCell$1(this, row, column, state, false, page);
	}
	function isCellLocked(row, column, page) {
	  return isCellLocked$1(this, row, column, page);
	}

	var lcl = /*#__PURE__*/Object.freeze({
		__proto__: null,
		isCellLocked: isCellLocked,
		lockCell: lockCell
	});

	function freezeColumns(column, page) {
	  var _this = this;
	  var oldValue;
	  group.set(function () {
	    if (page && page != _this.getActiveSheet()) {
	      var sheet = getSheet(_this, page);
	      if (sheet) {
	        if (!sheet.content.table) sheet.content.table = {};
	        oldValue = sheet.content.table.frozenColumns;
	        sheet.content.table.frozenColumns = column;
	        if (sheet.content.spans) checkSpans(_this, "column", column, sheet.content.spans);
	      }
	    } else {
	      if (!page) page = _this.getActiveSheet();
	      var grid = _this.$$("cells");
	      if (webix.isUndefined(column)) {
	        var sel = grid.getSelectArea();
	        column = sel ? sel.end.column : 0;
	      }
	      var base = grid.config.columns[0].id == "rowId" ? 1 : 0;
	      var index = base;
	      var removeFreeze = false;
	      if (column && column != _this._frozenColumns) {
	        for (var i = column; i > 0; i--) {
	          index = grid.getColumnIndex(i) + 1;
	          if (index) break;
	        }
	        if (!index) index = base;
	      } else removeFreeze = true;
	      checkSpans(_this, "column", column);
	      grid.unselect();
	      grid.define("leftSplit", index);
	      grid.refreshColumns();
	      oldValue = _this._frozenColumns;
	      _this._frozenColumns = removeFreeze || !column ? 0 : column;
	    }
	    _this.callEvent("onAction", ["freeze-column", {
	      value: oldValue || 0,
	      newValue: column,
	      page: page
	    }]);
	  });
	}
	function freezeRows(row, page) {
	  var _this2 = this;
	  var oldValue;
	  group.set(function () {
	    if (page && page != _this2.getActiveSheet()) {
	      var sheet = getSheet(_this2, page);
	      if (sheet) {
	        if (!sheet.content.table) sheet.content.table = {};
	        oldValue = sheet.content.table.frozenRows;
	        sheet.content.table.frozenRows = row;
	        if (sheet.content.spans) checkSpans(_this2, "row", row, sheet.content.spans);
	      }
	    } else {
	      if (!page) page = _this2.getActiveSheet();
	      var grid = _this2.$$("cells");
	      if (webix.isUndefined(row)) {
	        var sel = grid.getSelectArea();
	        row = sel ? sel.end.row : 0;
	      }
	      var index = 0;
	      var removeFreeze = false;
	      if (row && row != _this2._frozenRows) {
	        for (var i = row; i > 0; i--) {
	          index = grid.getIndexById(i) + 1;
	          if (index) break;
	        }
	      } else removeFreeze = true;
	      checkSpans(_this2, "row", row);
	      grid.unselect();
	      grid.define("topSplit", index);
	      grid.refreshColumns();
	      oldValue = _this2._frozenRows;
	      _this2._frozenRows = removeFreeze || !row ? 0 : row;
	    }
	    _this2.callEvent("onAction", ["freeze-row", {
	      value: oldValue || 0,
	      newValue: row,
	      page: page
	    }]);
	  });
	}
	function checkSpans(view, type, num, spans) {
	  if (spans) {
	    for (var i = spans.length - 1; i >= 0; i--) {
	      var span = spans[i];
	      var index1 = type == "row" ? 0 : 1;
	      var index2 = type == "row" ? 3 : 2;
	      if (span[index1] <= num && span[index1] + span[index2] - 1 > num) span[index2] = num - span[index1] + 1;
	      if (span[0] - span[3] == 0 && span[1] - span[2] == 0) spans.splice(i, 1);
	    }
	  } else {
	    var grid = view.$$("cells");
	    var _spans = grid.getSpan();
	    var changed;
	    for (var row in _spans) {
	      if (type == "row" && row > num) continue;
	      for (var col in _spans[row]) {
	        if (type == "column" && col > num) continue;
	        var _span = _spans[row][col];
	        var spanSize = type == "row" ? row * 1 + _span[1] - 1 : col * 1 + _span[0] - 1;
	        if (spanSize > num) {
	          changed = true;
	          changeSpan(view, [row, col], type == "row" ? _span[0] : _span[0] - (spanSize - num), type == "row" ? _span[1] - (spanSize - num) : _span[1]);
	        }
	      }
	    }
	    if (changed) view.refresh();
	  }
	}
	function changeSpan(view, span, x, y) {
	  view.splitCell(span[0], span[1], null, true);
	  view.combineCells({
	    cell: {
	      row: span[0],
	      column: span[1]
	    },
	    x: x,
	    y: y
	  }, null, true);
	}

	var fcl = /*#__PURE__*/Object.freeze({
		__proto__: null,
		freezeColumns: freezeColumns,
		freezeRows: freezeRows
	});

	function hideGridlines(state, page) {
	  hideGridlines$1(this, state, page);
	}

	var hbr = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hideGridlines: hideGridlines
	});

	function hideHeaders(state, page) {
	  hideHeaders$1(this, state, page);
	}

	var hhd = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hideHeaders: hideHeaders
	});

	function hideColumn(column, state, page) {
	  setState(this, column, state, "column", page);
	}
	function isColumnVisible(column, page) {
	  return isColumnVisible$1(this, column, page);
	}
	function hideRow(row, state, page) {
	  setState(this, row, state, "row", page);
	}
	function isRowVisible(row, page) {
	  return isRowVisible$1(this, row, page);
	}

	var hrc = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hideColumn: hideColumn,
		hideRow: hideRow,
		isColumnVisible: isColumnVisible,
		isRowVisible: isRowVisible
	});

	function addImage(row, column, url, page) {
	  this.setCellValue(row, column, image(url), page);
	  if (!page || page == this.getActiveSheet()) this.refresh();
	}
	function addSparkline(row, column, config, page) {
	  var value = chart(config);
	  this.setCellValue(row, column, value, page);
	  if (!page || page == this.getActiveSheet()) this.refresh();
	}

	// getSheetData is deprecated, use ss.getCellValue(row, col, math, page), ss.getRangeValue(range, page) instead
	function getSheetData(name) {
	  var _this = this;
	  if (this._mData.getPage(name)) return {
	    getValue: function (r, c, math) {
	      return _this.getCellValue(r, c, math, name);
	    },
	    getRangeValue: function (range) {
	      return _this.getRangeValue(range, name);
	    }
	  };
	}
	function registerMathMethod(name, handler) {
	  addMath(this, name, handler, true);
	}
	function recalculate() {
	  this._mData.getStore().recalculate();
	  this.callEvent("onMathRefresh", []);
	  this.refresh();
	}
	function setPlaceholder(name, value) {
	  if (_typeof(name) == "object") {
	    value = name;
	    name = "*";
	  }
	  this._mData.getStore().setPlaceholder(name, value);
	  this.refresh();
	  this.callEvent("onMathRefresh", []);
	}
	function addCheckbox(range, page) {
	  var _this2 = this;
	  if (!range) range = this.$$("cells").getSelectArea();
	  if (range) {
	    var start = range.start;
	    var end = range.end;
	    this.groupUndo(function () {
	      for (var r = start.row; r <= end.row; r++) for (var c = start.column; c <= end.column; c++) _this2.setCellValue(r, c, "=checkbox()", page);
	    });
	    this.refresh();
	  }
	}
	function markCheckbox(row, column, state, page) {
	  if (/^=(checkbox)\(/i.test(this.getCellValue(row, column, true, page))) {
	    this.setCellValue(row, column, "=checkbox(".concat(state === false ? 0 : 1, ")"));
	    this.refresh();
	  }
	}
	function addRadio(range, page) {
	  var _this3 = this;
	  if (!range) range = this.$$("cells").getSelectArea();
	  if (range) {
	    var start = range.start;
	    var end = range.end;
	    this.groupUndo(function () {
	      for (var r = start.row; r <= end.row; r++) for (var c = start.column; c <= end.column; c++) _this3.setCellValue(r, c, "=radio(".concat(r - start.row + 1, ", ").concat(c - start.column + 1, ", ").concat(end.row - start.row + 1, ", ").concat(end.column - start.column + 1, ")"), page);
	    });
	    this.refresh();
	  }
	}
	function markRadio(row, column, state, page) {
	  setRadioState(this, row, column, state, page);
	}

	var mat = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addCheckbox: addCheckbox,
		addImage: addImage,
		addRadio: addRadio,
		addSparkline: addSparkline,
		getSheetData: getSheetData,
		markCheckbox: markCheckbox,
		markRadio: markRadio,
		recalculate: recalculate,
		registerMathMethod: registerMathMethod,
		setPlaceholder: setPlaceholder
	});

	//spans
	function combineCells(range, page, silent) {
	  var _this = this;
	  var isActivePage = !page || page == this.getActiveSheet();
	  if (!range) {
	    if (!isActivePage) return;
	    var sel = this.getSelectedId(true);
	    if (sel.length > 1) {
	      range = getRange$1(sel);
	    }
	  }
	  group.set(function () {
	    if (range) addSpan(_this, range.cell, range.x, range.y, null, page);
	  });
	  if (!silent && isActivePage) this.refresh();
	}
	function splitCell(row, column, page, silent) {
	  var isActivePage = !page || page == this.getActiveSheet();
	  if (row && column) {
	    removeSpan(this, {
	      row: row,
	      column: column
	    }, page);
	  } else if (isActivePage) {
	    group.set(function () {
	      this.eachSelectedCell(function (cell) {
	        removeSpan(this, cell);
	      });
	    }, this);
	  }
	  if (!silent && isActivePage) this.refresh();
	}

	//styles
	function addStyle(prop, origin, page) {
	  return addStyle$1(this, prop, origin, page);
	}
	function getStyle(row, column, page) {
	  return getStyle$1(this, {
	    row: row,
	    column: column
	  }, page);
	}
	function setStyle(row, column, style, page) {
	  return setStyle$1(this, {
	    row: row,
	    column: column
	  }, style, page);
	}
	function setRangeStyle(rangeStr, style, page) {
	  group.set(function () {
	    setRangeStyle$1(this, rangeStr, style, page);
	  }, this);
	}
	function clearRange(rangeStr, type, page) {
	  if (!rangeStr) {
	    if (!page || page == this.getActiveSheet()) rangeStr = this._table.getSelectArea();
	    if (!rangeStr) return;
	  }
	  if (!type) type = {
	    styles: true,
	    values: true,
	    editors: true,
	    filters: true,
	    conditions: true,
	    comments: true
	  };
	  if (type.styles) clearRangeStyle(this, rangeStr, page);
	  if (type.conditions) clearConditionalFormats(this, rangeStr, page);
	  if (type.values) this.setRangeValue(rangeStr, null, page);
	  if (type.editors) clearEditors(this, rangeStr, page);
	  if (type.filters) clearFilters(this, rangeStr, page);
	  if (type.comments) removeCommentsRange(this, rangeStr, page);
	  this.refresh();
	}
	function compactStyles() {
	  return compactStyles$1(this);
	}

	//serialize
	function serialize(config) {
	  var obj = {};
	  this.callEvent("onDataSerialize", [obj, config]);
	  if (config) {
	    if (config.compactStyles) obj.styles = removeUnusedStyles(obj);
	    if (config.sheets) return serialize$e(this, obj, config);
	  }
	  return obj;
	}

	//sheets
	function showSheet(name) {
	  show(this, name);
	}
	function setSheetState(name, state) {
	  setState$1(this, name, state);
	}
	function getSheetState(name) {
	  return getSheet(this, name).state || "visible";
	}
	function getActiveSheet() {
	  return this._activeSheet;
	}
	function addSheet(content, name, show) {
	  return add$2(this, content, name, show);
	}
	function clearSheet() {
	  this.reset();
	}
	function renameSheet(name, newName) {
	  rename(this, name, newName);
	}
	function editSheet(name) {
	  edit(this, name);
	}
	function removeSheet(name) {
	  remove$2(this, name);
	}

	//undo
	function undo() {
	  undo$1(this);
	}
	function redo() {
	  redo$1(this);
	}

	//sort
	function sortRange(range, dir) {
	  sortRange$1(this, range, dir);
	}

	//cells
	function showCell(ref, silent) {
	  showCells(this, ref, silent);
	}

	var ops = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addSheet: addSheet,
		addStyle: addStyle,
		clearRange: clearRange,
		clearSheet: clearSheet,
		combineCells: combineCells,
		compactStyles: compactStyles,
		editSheet: editSheet,
		getActiveSheet: getActiveSheet,
		getSheetState: getSheetState,
		getStyle: getStyle,
		redo: redo,
		removeSheet: removeSheet,
		renameSheet: renameSheet,
		serialize: serialize,
		setRangeStyle: setRangeStyle,
		setSheetState: setSheetState,
		setStyle: setStyle,
		showCell: showCell,
		showSheet: showSheet,
		sortRange: sortRange,
		splitCell: splitCell,
		undo: undo
	});

	function refresh(all) {
	  if (all) this._table.refreshColumns();else this._table.refresh();
	}
	function eachSelectedCell(cb) {
	  var cells = this.getSelectedId(true);
	  for (var i = 0; i < cells.length; i++) cb.call(this, cells[i]);
	}
	function getSelectedRange(sheet) {
	  var area = this._table.getSelectArea();
	  if (area) {
	    if (sheet) sheet = this.getActiveSheet();
	    return toRange(area.start.row, area.start.column, area.end.row, area.end.column, sheet);
	  }
	  return "";
	}
	function getSelectedId(all) {
	  var area = this._table.getSelectArea();
	  if (!all) return area && area.start.row ? area.start : null;
	  var selection = [];
	  if (area) {
	    var c0 = area.start;
	    var c1 = area.end;
	    for (var i = c0.row; i <= c1.row; i++) {
	      for (var j = c0.column; j <= c1.column; j++) {
	        selection.push({
	          row: i,
	          column: j
	        });
	      }
	    }
	  }
	  return selection;
	  //return this._table.getSelectedId(all)
	}
	function getCellValue(row, column, math, page) {
	  page = page ? this._mData.getPage(page) : this._mPage;
	  if (!page) return;
	  var value = page.getValue(row - 1, column - 1, math !== false);
	  return correctVal(value);
	}
	function setCellValue(row, column, value, page) {
	  var _this = this;
	  if (!page) page = this.getActiveSheet();
	  var muonPage = this._mData.getPage(page);
	  if (!muonPage) return;
	  value = correctVal(value);
	  var old = this.getCellValue(row, column, true, page);
	  var oldType = getType(this, row, column, page);
	  var oldStyle, oldEditor;
	  if (!this._type_change && page != this.getActiveSheet()) {
	    oldStyle = this.getStyle(row, column, page);
	    oldEditor = this.getCellEditor(row, column, page);
	  }
	  var sameValue;
	  if (oldType == "date") {
	    var parser = webix.Date.strToDate(webix.i18n.spreadsheet.formats.parseDateTime);
	    var dateValue = isNaN(value) ? getExcelDateFromJs(parser(value)) : value;
	    sameValue = old == dateValue;
	  } else if (oldType != "string" && value !== "" && !isNaN(value) && old == value && value !== 0) {
	    sameValue = true;
	    value = value * 1;
	  }
	  if (!sameValue && old !== value) {
	    group.set(function () {
	      if (_this.callEvent("onBeforeValueChange", [row, column, value, old, page])) {
	        if (page != _this.getActiveSheet()) {
	          var sheet = getSheet(_this, page).content;
	          var cell = find(sheet.data, function (cell) {
	            return cell[0] == row && cell[1] == column;
	          });
	          if (!cell) {
	            cell = [row, column];
	            sheet.data.push(cell);
	          }
	          cell[2] = value;
	          _this._page_value_set = true;
	          cell[4] = null;
	          var item = loadCell(_this, sheet, cell);
	          delete _this._page_value_set;
	          var muonItem = muonPage.getCell(row - 1, column - 1, true);
	          muonItem.$format = checkFormat({
	            fmt: getFormatFromData(sheet, cell)
	          }, "string") ? 1 : 0;
	          muonPage.setValue(row - 1, column - 1, item.value);
	          cell[2] = item.value;
	          cell[4] = muonItem.type = item.type;
	          _this._type_change = true;
	          //prepareCell can change style (1/1/2001 --loadCell--> 36892 + date type --prepareCell--> date format)
	          prepareCell(cell, sheet, true);
	          muonItem.style = cell[3];
	          delete _this._type_change;
	          _this.callEvent("onCellChange", [row, column, value, page]);
	          if (!_this._validation_restore && !_this._type_change && isInvalid(_this, row, column, null, page)) {
	            var validation = _this.validation.get(row, column, page);
	            var oldData = {
	              value: old,
	              style: oldStyle,
	              editor: oldEditor
	            };
	            showValidationError(_this, validation).then(function () {
	              if (validation.errorHandle == "stop") restoreValue(_this, row, column, oldData, page);
	            }).fail(function () {
	              restoreValue(_this, row, column, oldData, page);
	            });
	          }
	        } else {
	          var sel = _this.getSelectedId();
	          fillEditor(_this, sel, true);
	          _this._mPage.setValue(row - 1, column - 1, value);
	          if (!_this._type_change) {
	            _this._type_change = true;
	            //onCellChange can change item (via types module)
	            _this.callEvent("onCellChange", [row, column, value, page]);
	            delete _this._type_change;
	          }
	          var updatedType = getType(_this, row, column);

	          //recalculate if we refer to a cell, where type is string and value is something like 005 or 5e5
	          if (oldType != updatedType && updatedType == "string" && value[0] == "=" && value.length > 1) _this._mPage.setValue(row - 1, column - 1, value);
	          fillEditor(_this, sel);
	          if (/^=hyperlink\(/i.test(value)) {
	            var baseStyle = _this.getStyle(row, column);
	            var urlStyle = _this.addStyle({
	              color: "#0000ff",
	              underline: "underline"
	            }, baseStyle);
	            _this.setStyle(row, column, urlStyle);
	          }
	          if (!_this._validation_restore && !_this._type_change && isInvalid(_this, row, column, getRenderedValue(_this, row, column))) {
	            var _validation = _this.validation.get(row, column);
	            showValidationError(_this, _validation).then(function () {
	              if (_validation.errorHandle == "stop") {
	                restoreValue(_this);
	              }
	            }).fail(function () {
	              restoreValue(_this);
	            });
	          }
	        }
	        if (!_this._type_change) _this.saveCell(row, column, page);
	      }
	    });
	  }
	}
	function restoreValue(view, row, column, data, page) {
	  view._validation_restore = true;
	  if (page) {
	    view.setStyle(row, column, data.style, page);
	    view.setCellEditor(row, column, data.editor, page);
	    view.setCellValue(row, column, data.value, page);
	  } else {
	    view.undo();
	    view._ssUndoHistory.splice(view._ssUndoCursor + 1);
	  }
	  delete view._validation_restore;
	}
	function showValidationError(view, validation) {
	  var errorHandle = validation.errorHandle || "information";
	  var type = errorHandle == "stop" ? "alert-error" : (errorHandle == "warning" ? "confirm-" : "alert-") + errorHandle;
	  var locale = webix.i18n.spreadsheet.labels;
	  return view[errorHandle == "warning" ? "confirm" : "alert"]({
	    type: type,
	    ok: locale["validation-error-" + (errorHandle == "stop" ? "restore" : "save")],
	    cancel: locale["validation-error-restore"],
	    title: validation.errorTitle || locale["validation-error-title-text"],
	    text: validation.errorMessage || locale["validation-error-message-text"]
	  });
	}
	function correctVal(val) {
	  if (typeof val === "boolean") val *= 1;
	  return val || val === 0 ? val : "";
	}
	function setRangeValue(range, value, page) {
	  group.set(function () {
	    var pos = rangeObj(range, this);
	    var i = 0;
	    for (var row = pos.start.row; row <= pos.end.row; row++) {
	      for (var column = pos.start.column; column <= pos.end.column; column++, i++) {
	        this.setCellValue(row, column, webix.isArray(value) ? value[i] : value, page);
	      }
	    }
	  }, this);
	}
	function getRangeValue(range$1, page) {
	  if (!page) page = this.getActiveSheet();
	  var pos = range(range$1, this, page);
	  var muonPage = this._mData.getPage(pos[4]);
	  if (!pos || !muonPage) return [];
	  return muonPage.getRange(pos[0] - 1, pos[1] - 1, pos[2] - 1, pos[3] - 1).map(correctVal);
	}
	function getRow(id, page) {
	  var _this2 = this;
	  var row, colCount;
	  var isActiveSheet = !page || page == this.getActiveSheet();
	  if (isActiveSheet) {
	    row = webix.copy(this._table.getItem(id));
	    colCount = this.config.columnCount;
	  } else {
	    var sheet = getSheet(this, page);
	    if (sheet) {
	      var height;
	      if (sheet.content.sizes) height = find(sheet.content.sizes, function (size) {
	        return size[0] == id;
	      });
	      height = height ? height[2] : this.$$("cells").config.rowHeight;
	      row = {
	        id: id,
	        $height: height
	      };
	      colCount = getDimension(sheet.content.data, sheet.content.spans, 1, 1)[1];
	    } else return;
	  }
	  var _loop = function (i) {
	    var cell = (isActiveSheet ? _this2._mPage : _this2._mData.getPage(page)).getCell(id - 1, i - 1);
	    if (cell) {
	      row[i] = cell.value;
	      [["style", "$cellCss"], ["type", "$cellType"], ["format", "$cellFormat"]].forEach(function (param) {
	        var val = cell[param[0]];
	        if (val) {
	          if (!row[param[1]]) row[param[1]] = {};
	          row[param[1]][i] = val;
	        }
	      });
	      var math = _this2.getCellValue(id, i, true, page);
	      if (math && math[0] == "=") row["$" + i] = math;
	    }
	  };
	  for (var i = 1; i <= colCount; i++) {
	    _loop(i);
	  }
	  return row;
	}
	function getColumn(id, page) {
	  if (!page || page == this.getActiveSheet()) return this._table.getColumnConfig(id);
	  var sheet = getSheet(this, page);
	  if (sheet) {
	    var width;
	    if (sheet.content.sizes) width = find(sheet.content.sizes, function (size) {
	      return size[1] == id;
	    });
	    width = width ? width[2] : this.$$("cells").config.columnWidth;
	    return {
	      id: id,
	      width: width
	    };
	  }
	}
	function reset(mode) {
	  var obj = {
	    data: []
	  };
	  if (mode && mode.sheets) {
	    obj = newSheet(obj);
	  }
	  this.parse(obj);
	}
	function _resetTable() {
	  reset$6(this);
	}

	var cor = /*#__PURE__*/Object.freeze({
		__proto__: null,
		_resetTable: _resetTable,
		eachSelectedCell: eachSelectedCell,
		getCellValue: getCellValue,
		getColumn: getColumn,
		getRangeValue: getRangeValue,
		getRow: getRow,
		getSelectedId: getSelectedId,
		getSelectedRange: getSelectedRange,
		refresh: refresh,
		reset: reset,
		setCellValue: setCellValue,
		setRangeValue: setRangeValue
	});

	function saveCell(row, column, page) {
	  var cell = (page ? this._mData.getPage(page) : this._mPage).getCell(row - 1, column - 1);
	  save(this, "data", {
	    row: row,
	    column: column,
	    value: this.getCellValue(row, column, null, page),
	    page: page || this.getActiveSheet(),
	    style: (cell ? cell.style : "") || ""
	  });
	}

	var sav = /*#__PURE__*/Object.freeze({
		__proto__: null,
		saveCell: saveCell
	});

	function setCellEditor(row, column, editor, page) {
	  page = page || this.getActiveSheet();
	  var value;
	  if (page == this.getActiveSheet()) {
	    var line = this._table._ssEditors[row] = this._table._ssEditors[row] || {};
	    value = line[column] || null;
	    line[column] = editor;
	    if (editor && editor.editor) {
	      this._table.addCellCss(row, column, "ss_editor");
	    } else {
	      delete this._table._ssEditors[row][column];
	      this._table.removeCellCss(row, column, "ss_editor");
	    }
	  } else {
	    var sheet = getSheet(this, page);
	    if (!sheet) return;
	    if (!sheet.content.editors) sheet.content.editors = [];
	    var index = findIndex(sheet.content.editors, function (editor) {
	      return editor[0] == row && editor[1] == column;
	    });
	    if (index != -1) {
	      value = sheet.content.editors[index][2];
	      sheet.content.editors.splice(index, 1);
	    } else if (!editor) return;
	    if (editor) sheet.content.editors.push([row, column, editor]);
	  }
	  this.callEvent("onAction", ["dropdown", {
	    row: row,
	    column: column,
	    value: value,
	    newValue: editor,
	    page: page
	  }]);
	}
	function getCellEditor(row, column, page) {
	  if (page && page != this.getActiveSheet()) {
	    var sheet = getSheet(this, page);
	    if (sheet && sheet.content.editors) {
	      var editor = find(sheet.content.editors, function (editor) {
	        return editor[0] == row && editor[1] == column;
	      });
	      return editor ? editor[2] : null;
	    }
	  } else {
	    var line = this._table._ssEditors[row] || {};
	    return line[column] || null;
	  }
	}

	var dpd = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getCellEditor: getCellEditor,
		setCellEditor: setCellEditor
	});

	function setCellFilter(row, column, filter, page) {
	  page = page || this.getActiveSheet();
	  var sheet;
	  if (page != this.getActiveSheet()) {
	    sheet = getSheet(this, page);
	    if (!sheet) return;
	  }
	  filter = prepareFilter(this, row, column, filter, sheet);
	  var value;
	  if (sheet) {
	    if (!sheet.content.filters) sheet.content.filters = [];
	    var index = findIndex(sheet.content.filters, function (arr) {
	      return arr[0] == row && arr[1] == column;
	    });
	    if (index != -1) {
	      value = sheet.content.filters[index][2];
	      sheet.content.filters.splice(index, 1);
	    } else if (!filter) return;
	    if (filter) sheet.content.filters.push([row, column, filter]);
	  } else {
	    var line = this._table._ssFilters[row] = this._table._ssFilters[row] || {};
	    value = line[column] || null;
	    line[column] = filter;
	    if (filter && _typeof(filter) == "object") {
	      this._table.addCellCss(row, column, "ss_filter");
	      if (filter.value && isValueActive(filter.value)) this._table.addCellCss(row, column, "ss_filter_active");
	      webix.extend(filter, {
	        row: row,
	        column: column
	      }, true);
	      if (!filter.handler && filter.value && filter.value.condition) {
	        var mode = filter.mode || getFilterMode(this, row, column);
	        filter.handler = getFilterFunction(mode, filter.value);
	      }
	    } else {
	      delete this._table._ssFilters[row][column];
	      this._table.removeCellCss(row, column, "ss_filter");
	      this._table.removeCellCss(row, column, "ss_filter_active");
	    }
	  }
	  this.callEvent("onAction", ["filter", {
	    row: row,
	    column: column,
	    value: value,
	    newValue: filter,
	    page: page
	  }]);
	}
	function prepareFilter(view, row, column, filter, sheet) {
	  if (filter) {
	    if (webix.isArray(filter) || typeof filter == "string") filter = {
	      options: filter
	    };
	    filter.options = calibrateRange(view, row, column, filter.options, null, sheet);
	  }
	  return filter;
	}
	function getCellFilter(row, column, page) {
	  if (page && page != this.getActiveSheet()) {
	    var sheet = getSheet(this, page);
	    if (sheet && sheet.content.filters) return find(sheet.content.filters, function (arr) {
	      return arr[0] == row && arr[1] == column;
	    }) || null;
	  } else {
	    var line = this._table._ssFilters[row] || {};
	    return line[column];
	  }
	  return null;
	}
	function removeFilters(page) {
	  var _this = this;
	  if (page && page != this.getActiveSheet()) {
	    var sheet = getSheet(this, page);
	    if (sheet && sheet.content.filters) {
	      for (var i = 0; i < sheet.content.filters.length; i++) {
	        var filter = sheet.content.filters[i];
	        this.callEvent("onAction", ["filter", {
	          row: filter[0],
	          column: filter[1],
	          value: filter[2],
	          newValue: null,
	          page: page || this.getActiveSheet()
	        }]);
	      }
	      sheet.content.filters = [];
	    }
	  } else {
	    var filters = getFilters(this._table);
	    for (var _i = 0; _i < filters.length; _i++) {
	      var _filters$_i = filters[_i],
	        row = _filters$_i.row,
	        column = _filters$_i.column;
	      this.setCellFilter(row, column, null);
	    }
	    this._table._ssFilters = {};
	    this._table.data.filter(function (obj) {
	      return _this.isRowVisible(obj.id);
	    });
	  }
	}
	function filterSpreadSheet() {
	  var _this2 = this;
	  var grid = this._table;
	  grid.data.silent(function () {
	    // hidden rows
	    grid.data.filter(function (obj) {
	      return _this2.isRowVisible(obj.id);
	    });
	    var filters = getFilters(grid);
	    var _loop = function () {
	      var _filters$i = filters[i],
	        row = _filters$i.row,
	        column = _filters$i.column,
	        handler = _filters$i.handler,
	        lastRow = _filters$i.lastRow;
	      var finished = false;
	      grid.data.filter(function (obj) {
	        var r = obj.id;
	        if (r <= row || typeof handler != "function") return true;
	        var span = grid.getSpan(r, column);
	        if (span) {
	          if (span[0] == row && span[1] == column) return true;else r = span[0];
	        }
	        var value = String(_this2.getCellValue(r, column, false));
	        if (lastRow) {
	          if (r > lastRow) return true;
	        } else if (finished || !value) return finished = true;
	        return handler(value);
	      }, 1, true);
	    };
	    for (var i = 0; i < filters.length; i++) {
	      _loop();
	    }
	  });
	  grid.callEvent("onAfterFilter", []);
	  grid.refresh();
	}

	var flt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		filterSpreadSheet: filterSpreadSheet,
		getCellFilter: getCellFilter,
		removeFilters: removeFilters,
		setCellFilter: setCellFilter
	});

	function confirm(config) {
	  return webix.confirm(webix.extend({
	    container: this.$view,
	    css: "webix_ssheet_confirm",
	    ok: webix.i18n.spreadsheet.labels.ok,
	    cancel: webix.i18n.spreadsheet.labels.cancel
	  }, config, true));
	}
	function alert(config) {
	  return webix.alert(webix.extend({
	    container: this.$view,
	    css: "webix_ssheet_alert",
	    ok: webix.i18n.spreadsheet.labels.ok
	  }, config, true));
	}

	var cfm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		alert: alert,
		confirm: confirm
	});

	function resetUndo() {
	  reset$5(this);
	}
	function groupUndo(func) {
	  group.set(func, this);
	}
	function ignoreUndo(func) {
	  ignoreUndo$1(func, this);
	}

	var und = /*#__PURE__*/Object.freeze({
		__proto__: null,
		groupUndo: groupUndo,
		ignoreUndo: ignoreUndo,
		resetUndo: resetUndo
	});

	function setFormat(row, column, format, page) {
	  addFormat(this, row, column, format, null, page);
	}
	function changeDecimals(row, column, inc, page) {
	  //row and column may be obj
	  changeAreaDecimals(this, inc, row, column, page);
	}

	var fmt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		changeDecimals: changeDecimals,
		setFormat: setFormat
	});

	function showFormulas(state, page) {
	  showFormulas$1(this, state, page);
	}

	var fml = /*#__PURE__*/Object.freeze({
		__proto__: null,
		showFormulas: showFormulas
	});

	function showPrintBorders(value) {
	  var old = !!this._printBorders.$render;
	  if (value == "toggle") value = !old;
	  if (value != old) {
	    if (value) showBorders(this);else {
	      delete this._printBorders.$render;
	      this.refresh();
	    }
	    this.callEvent("onCommand", [{
	      id: "toolbar-update",
	      name: "print-borders",
	      value: value
	    }]);
	    this.callEvent("onAction", ["print-borders", {
	      newValue: value,
	      value: old
	    }]);
	  }
	}

	var prt = /*#__PURE__*/Object.freeze({
		__proto__: null,
		showPrintBorders: showPrintBorders
	});

	function zoom(value, page) {
	  zoom$3(this, value, false, page);
	}

	var zoom$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		zoom: zoom
	});

	function api(view) {
	  var all = [rco, lcl, fcl, hbr, hhd, hrc, mat, ops, cor, sav, dpd, flt, cfm, und, fmt, fml, prt, zoom$1];
	  for (var i = 0; i < all.length; i++) webix.extend(view, all[i]);
	}

	var defaultMenu = [{
	  id: "file",
	  submenu: [{
	    id: "sheet",
	    submenu: [{
	      id: "new-sheet"
	    }, {
	      id: "copy-sheet"
	    }, {
	      id: "remove-sheet"
	    }, {
	      id: "hide-sheet"
	    }]
	  }, {
	    id: "excel-import"
	  }, {
	    id: "excel-export"
	  }, {
	    id: "print"
	  }, {
	    id: "print-borders"
	  }]
	}, {
	  id: "edit",
	  submenu: [{
	    id: "add-range"
	  }, {
	    id: "add-dropdown"
	  }, {
	    id: "add-link"
	  }, {
	    id: "lock-cell"
	  }, {
	    id: "conditional-format"
	  }, {
	    id: "clear",
	    submenu: [{
	      id: "clear-value"
	    }, {
	      id: "clear-style"
	    }, {
	      id: "clear-conditional-formats"
	    }, {
	      id: "clear-dropdown-editors"
	    }, {
	      id: "clear-filters"
	    }, {
	      id: "clear-comments"
	    }, {
	      $template: "Separator"
	    }, {
	      id: "clear-all"
	    }]
	  }, {
	    id: "validation",
	    submenu: [{
	      id: "add-cell-validation"
	    }, {
	      id: "remove-cell-validation"
	    }, {
	      id: "highlight-invalid-data"
	    }, {
	      id: "remove-highlight-invalid-data"
	    }]
	  }]
	}, {
	  id: "insert",
	  submenu: [{
	    id: "image",
	    submenu: [{
	      id: "add-image-cell"
	    }, {
	      id: "add-image-top"
	    }]
	  }, {
	    id: "graph",
	    submenu: [{
	      id: "add-sparkline"
	    }, {
	      id: "add-chart"
	    }]
	  }, {
	    id: "controls",
	    submenu: [{
	      id: "add-checkbox"
	    }, {
	      id: "add-radio"
	    }]
	  }, {
	    id: "add-comment"
	  }]
	}, {
	  id: "data",
	  submenu: [{
	    id: "sort",
	    submenu: [{
	      id: "sort-asc"
	    }, {
	      id: "sort-desc"
	    }]
	  }, {
	    id: "create-filter"
	  }]
	}, {
	  id: "view",
	  submenu: [{
	    id: "columns",
	    submenu: [{
	      id: "insert-column"
	    }, {
	      id: "delete-column"
	    }, {
	      id: "show-column"
	    }, {
	      id: "hide-column"
	    }, {
	      id: "resize-column"
	    }]
	  }, {
	    id: "rows",
	    submenu: [{
	      id: "insert-row"
	    }, {
	      id: "delete-row"
	    }, {
	      id: "show-row"
	    }, {
	      id: "hide-row"
	    }, {
	      id: "resize-row"
	    }]
	  }, {
	    $template: "Separator"
	  }, {
	    id: "freeze-columns"
	  }, {
	    id: "freeze-rows"
	  }, {
	    id: "hide-gridlines"
	  }, {
	    id: "hide-headers"
	  }, {
	    id: "show-formulas"
	  }]
	}];
	var readonlyMenu = [{
	  id: "file",
	  submenu: [{
	    id: "excel-export"
	  }, {
	    id: "print"
	  }, {
	    id: "print-borders"
	  }]
	}, {
	  id: "view",
	  submenu: [{
	    id: "hide-gridlines"
	  }, {
	    id: "hide-headers"
	  }, {
	    id: "show-formulas"
	  }]
	}];
	var ui = {
	  getMenuData: function (menu, config) {
	    var i;
	    for (i = 0; i < menu.length; i++) {
	      if (typeof menu[i] == "string") menu[i] = {
	        id: menu[i]
	      };
	      if ((menu[i].id == "resize-column" || menu[i].id == "resize-row") && !config.resizeCell) {
	        menu.splice(i, 1);
	        i--;
	        continue;
	      }
	      if (!menu[i].value) menu[i].value = webix.i18n.spreadsheet.menus[menu[i].id];
	      if (menu[i].submenu) menu[i].submenu = this.getMenuData(menu[i].submenu, config);
	    }
	    return menu;
	  }
	};
	function init(view) {
	  view.attachEvent("onComponentInit", function () {
	    return ready(view);
	  });
	  var config = view.config;
	  var menu = {
	    view: "menu",
	    borderless: true,
	    css: "webix_ssheet_menu",
	    id: "menu",
	    autowidth: true,
	    type: {
	      height: 40
	    },
	    data: ui.getMenuData(webix.isArray(config.menu) ? config.menu : webix.copy(config.readonly ? readonlyMenu : defaultMenu), config)
	  };
	  view.callEvent("onViewInit", ["menu", menu]);
	  return menu;
	}
	function ready(view) {
	  if (view.$$("menu")) view.$$("menu").attachEvent("onMenuItemClick", function (id) {
	    return callAction(view, id);
	  });
	}
	var actionMap = {
	  "undo": function (view) {
	    return view.undo();
	  },
	  "redo": function (view) {
	    return view.redo();
	  },
	  "insert-column": function (view) {
	    return view.insertColumn();
	  },
	  "delete-column": function (view) {
	    return view.deleteColumn();
	  },
	  "show-column": function (view) {
	    return view.callEvent("onCommand", [{
	      id: "show",
	      group: "column",
	      neighbors: true
	    }]);
	  },
	  "hide-column": function (view) {
	    return view.hideColumn(null, true);
	  },
	  "resize-column": function (view) {
	    return view.callEvent("onCommand", [{
	      id: "resize",
	      group: "column",
	      value: webix.i18n.spreadsheet.menus["resize-column"]
	    }]);
	  },
	  "insert-row": function (view) {
	    return view.insertRow();
	  },
	  "delete-row": function (view) {
	    return view.deleteRow();
	  },
	  "show-row": function (view) {
	    return view.callEvent("onCommand", [{
	      id: "show",
	      group: "row",
	      neighbors: true
	    }]);
	  },
	  "hide-row": function (view) {
	    return view.hideRow(null, true);
	  },
	  "resize-row": function (view) {
	    return view.callEvent("onCommand", [{
	      id: "resize",
	      group: "row",
	      value: webix.i18n.spreadsheet.menus["resize-row"]
	    }]);
	  },
	  "freeze-columns": function (view) {
	    return view.freezeColumns();
	  },
	  "freeze-rows": function (view) {
	    return view.freezeRows();
	  },
	  "hide-gridlines": function (view) {
	    return view.hideGridlines("toggle");
	  },
	  "hide-headers": function (view) {
	    return view.hideHeaders("toggle");
	  },
	  "show-formulas": function (view) {
	    return view.showFormulas("toggle");
	  },
	  "print-borders": function (view) {
	    return view.showPrintBorders("toggle");
	  }
	};
	function callAction(view, id) {
	  if (view.callEvent("onMenuItemClick", [id])) {
	    if (actionMap[id]) actionMap[id](view);else view.callEvent("onCommand", [{
	      id: id
	    }]);
	  }
	}

	//global definitions
	var component = {
	  name: "spreadsheet",
	  _base_index: {
	    count: 1
	  },
	  defaults: {
	    spans: true,
	    liveEditor: true,
	    rowCount: 50,
	    math: true,
	    columnCount: 20,
	    resizeCell: true,
	    sheetTabWidth: 90,
	    conditionStyle: getDefaultStyles()
	  },
	  $init: function () {
	    var _this = this;
	    this.$index = this._base_index.count++;
	    this.$view.className += " webix_ssheet";
	    addMathMethods();
	    this.$ready.unshift(this._sub_init);
	    this.$ready.unshift(setDefaultFormats);
	    this.$ready.push(this._set_handlers);
	    this._destroy_with_me = [];
	    this.attachEvent("onDestruct", function () {
	      _this._destroy_with_me.forEach(function (view) {
	        return view.destructor();
	      });
	    });
	  },
	  $skin: function () {
	    setSkinDefaults();
	  },
	  _sub_init: function () {
	    var obj = this.config;
	    var readonly = obj.readonly;
	    var rows = [];

	    //toolbars
	    if (obj.menu) rows.push(init(this));
	    if (readonly && (obj.toolbar || obj.buttons) || !readonly && obj.toolbar !== false) rows.push(init$t(this));
	    if (obj.subbar) rows.push(obj.subbar);
	    if (!readonly && obj.liveEditor) rows.push(init$o(this));

	    //data part
	    var tblObj = {
	      editable: !readonly,
	      liveEditor: obj.liveEditor
	    };
	    if (obj.rowHeight) tblObj.rowHeight = obj.rowHeight;
	    if (obj.columnWidth) tblObj.columnWidth = obj.columnWidth;
	    if (readonly) rows.push(init$q(this, tblObj));else rows.push({
	      cols: [init$q(this, tblObj), init$l(this)]
	    });
	    var bottom = obj.bottombar === true ? defaultBottom(this) : obj.bottombar;
	    if (bottom) rows.push(bottom);
	    init$z(this);
	    if (!readonly) init$h(this);
	    init$i(this);
	    this.rows_setter(rows);
	  },
	  _set_handlers: function () {
	    var _this2 = this;
	    //prevent double init
	    if (this._table) return;
	    this._table = this.$$("cells");

	    //init all sub modules
	    operations(this);

	    //set sizes for the table
	    reset$6(this, this.config.columnCount, this.config.rowCount);
	    init$p(this); //keyboard shortcuts

	    this._table.attachEvent("onAfterAreaAdd", function () {
	      return _this2.callEvent("onAfterSelect", [_this2.getSelectedId(true)]);
	    });
	    this.callEvent("onComponentInit", []);
	  },
	  $onLoad: function (obj, driver) {
	    //when loading data by data:, we can get $onLoad before _set_handlers call
	    this._set_handlers();
	    var excel = obj.excel;
	    if (excel) obj = this._parseExcel(obj, driver);else if (!obj.data && typeof obj == "string" && (driver.cell || driver.row)) obj = this._parseCsv(obj, driver);
	    load$a(this, obj, excel);
	  }
	};
	api(component);
	webix.protoUI(component, webix.AtomDataLoader, webix.IdSpace, webix.ui.layout);

}));
